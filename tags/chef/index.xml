<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chef on Michael Hedgpeth</title><link>https://hedge-ops.com/tags/chef/</link><description>Recent content in chef on Michael Hedgpeth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>MIT</copyright><lastBuildDate>Mon, 22 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://hedge-ops.com/tags/chef/index.xml" rel="self" type="application/rss+xml"/><item><title>Chef is a Community Before It's a Vendor</title><link>https://hedge-ops.com/chef-community/</link><pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/chef-community/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-chef-community.jpg" alt="Chef Community" />
&lt;/div>
&lt;p>Back in October, I was frustrated. I had invested deeply into a new feature Chef had made called &lt;a href="https://hedge-ops.com/policyfiles/">Policyfiles&lt;/a> and had seen it not be adopted. I met in an intense meeting with their product management team trying to figure out exactly how I be able to migrate off of the feature and onto the platform that everyone else was on. I was involved in a typical vendor situation where what I was doing wasn&amp;rsquo;t aligned with their direction and I was feeling some pain because of it.&lt;/p>
&lt;p>Then an unexpected thing happened.&lt;/p>
&lt;p>The next day, at Chef Community Summit, a VP at Chef got up in front of everyone and told &lt;em>us&lt;/em> to suggest topics. I submitted a policyfiles topic and showed up to the session, surprised by the number of people who attended. I went through the pros and cons of the feature and the feature seemed to resonate with the audience. The same product management team I was working with the day before attended, had a great attidude, listened, were interested and engaged.&lt;/p>
&lt;p>It then dawned on me: working with Chef Software Inc. is indeed working with a vendor, but it&amp;rsquo;s much more than that. Their DNA came about within an open source community, and their value is tied up within a community collaborating to make their product better. So rather than shut me down, they encouraged me. Even when they disagreed with me. I was a member of their community so I could propose whatever I wanted, and if there was a benefit to that community then they were all for it.&lt;/p>
&lt;p>So after the Chef Community Summit I wrote some blog posts, went on the Food Fight Show, and answered questions on slack on the #policyfile channel. I also worked with Chef Software Inc. as a customer to make sure they understood how central policyfiles were to our workflow and success with chef.&lt;/p>
&lt;p>They listened, they changed their approach, and they even let me talk about it on Wednesday at 2PM at Chef Conf. Almost three years ago, I started down a path of figuring out who we would partner with to change operations for NCR&amp;rsquo;s Hospitality products. I recognized even then that Chef, Inc. has a different kind of DNA. Yes, there is a sales organization (and they&amp;rsquo;re great). Yes there are contracts, and we pay money. But the best part of it all is that I&amp;rsquo;m a part of a larger community that is all pointed in the same direction: we want to change the fundamentals of IT and help traditional businesses make that transformation.&lt;/p>
&lt;p>This is a technical problem, a cultural problem, an organizational problem, and I feel so fortunate and blessed to be able to solve it with such a great community of like-minded people.&lt;/p></description></item><item><title>Chef Artifacts with Artifactory</title><link>https://hedge-ops.com/artifactory/</link><pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/artifactory/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-artifactory.jpg" alt="Artifactory" />
&lt;/div>
&lt;p>If you&amp;rsquo;re going to deploy anything, you&amp;rsquo;ll eventually come across a fundamental need: you need somewhere to put your large files. At first, Chef seems like an attractive choice for this, but on deeper inspection it&amp;rsquo;s a horrible path to take. Chef is really great at delivering idempotent scripts to your machines to test and repair. It&amp;rsquo;s not that great of a file server. Storing your files in Chef will make your cookbooks more bloated, your source code repositories more bloated, and cause pain all around.&lt;/p>
&lt;p>So it&amp;rsquo;s been a pleasure recently to discover how great artifactory is for a tool for managing artifacts for deployments. Artifactory very naturally and easily lets you get up and running with hosting artifacts in a safe and scalable way. I&amp;rsquo;d like to lay out a bit of how we use artifactory for those interested in using it for themselves.&lt;/p>
&lt;h2 id="licensing">Licensing&lt;/h2>
&lt;p>First, I &lt;em>really&lt;/em> want to give artifactory my money, but there is a budget cycle to fend with, and besides people don&amp;rsquo;t want to spend money unless they can see the value they&amp;rsquo;re getting. So this post will be based on the &lt;em>free&lt;/em> version of artifactory. Fortunately, the free version contains what we need; we just need to host artifacts and call it good. Later we can get into the fancypants gem repos, supermarket, artifact expiration features. For now let&amp;rsquo;s ship it!&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>It was quite delightful for me to get artifactory up and running. In evaluation mode I did this with docker:&lt;/p>
&lt;h3 id="docker">Docker&lt;/h3>
&lt;p>I first just pull the image:&lt;/p>
&lt;pre>&lt;code>docker pull docker.bintray.io/jfrog/artifactory-oss:latest
&lt;/code>&lt;/pre>&lt;p>And then run the container:&lt;/p>
&lt;pre>&lt;code>docker run --name artifactory -d -p 8081:8081 docker.bintray.io/jfrog/artifactory-oss:latest
&lt;/code>&lt;/pre>&lt;p>I then navigate my browser to &lt;code>http://localhost:8081&lt;/code> and I&amp;rsquo;m immediately using artifactory. This was an excellent example of &lt;a href="http://www.anniehedgie.com/docker">inverted learning&lt;/a> that Annie loves to talk about.&lt;/p>
&lt;h3 id="package-installation">Package Installation&lt;/h3>
&lt;p>For those of us freaked out about running Docker in production, artifactory&amp;rsquo;s package installation is pretty good as well:&lt;/p>
&lt;pre>&lt;code>wget https://bintray.com/jfrog/artifactory-rpms/rpm -O bintray-jfrog-artifactory-rpms.repo
sudo mv bintray-jfrog-artifactory-rpms.repo /etc/yum.repos.d/
sudo yum install jfrog-artifactory-oss
&lt;/code>&lt;/pre>&lt;p>It&amp;rsquo;s really that easy. They did a fantastic job of making it easy.&lt;/p>
&lt;h2 id="uploading">Uploading&lt;/h2>
&lt;p>Creating and uploading artifacts with artifactory is easy to intuit on their web UI. For CI jobs, we&amp;rsquo;ve found that the &lt;a href="https://www.jfrog.com/confluence/display/CLI/JFrog+CLI">&lt;code>jfrog.exe&lt;/code>&lt;/a> is a really nice way of making uploads easy.&lt;/p>
&lt;p>This way &lt;a href="https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-Configuration">you can store your authentication credentials&lt;/a> for uploading to artifactory on your build agents in a &lt;code>~/.jfrog/jfrog-cli.conf&lt;/code> file. This way your usage of the &lt;code>jfrog.exe&lt;/code> can be very simple:&lt;/p>
&lt;p>You can &lt;a href="https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-UploadingFiles">upload&lt;/a>:&lt;/p>
&lt;pre>&lt;code>jfrog rt u *.tgz product-repo/policyfile-archives
&lt;/code>&lt;/pre>&lt;p>And you can &lt;a href="https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-DownloadingFiles">download&lt;/a>&lt;/p>
&lt;pre>&lt;code>jfrog rt dl product-repo/policyfile-archives/webserver-3498732hjfkdlsfdahlfewlrhewkl.tgz
&lt;/code>&lt;/pre>&lt;p>If you&amp;rsquo;re doing it right, that&amp;rsquo;s about all that you need.&lt;/p>
&lt;h2 id="access-control">Access Control&lt;/h2>
&lt;p>For any automation situation, you want to create access control to the assets of that automation. That way you prevent, at many levels, the situation where your scripts accidentally deploy the same product on all your nodes. If you keep access restricted, you keep things happening the way you&amp;rsquo;d say they would happen.&lt;/p>
&lt;p>Fortunately, artifactory allows for &lt;a href="https://www.jfrog.com/confluence/display/RTF/Managing+Users">users to be created&lt;/a> for this very purpose. So each of your products could have its own artifactory user, which would only be granted access to the repositories you say it should.&lt;/p>
&lt;h2 id="chef-integration">Chef Integration&lt;/h2>
&lt;p>Fortunately, artifactory provides an http api that works very nicely with the &lt;code>remote_file&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">remote_file &lt;span style="color:#d14">&amp;#39;C:\cafe\staging\chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
source &lt;span style="color:#d14">&amp;#39;https://productuser:mypassw0rd@artifactory.mycompany.com/artifactory/chef-repo/chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span>
checksum &lt;span style="color:#d14">&amp;#39;c594965648e20a2339d6f33d236b4e3e22b2be6916cceb1b0f338c74378c03da&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can &lt;a href="https://coderanger.net/chef-tips/#3">create a module&lt;/a> that will build your url for you and make it even easier:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">remote_file &lt;span style="color:#d14">&amp;#39;C:\cafe\staging\chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
extends &lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">Artifactory&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">UrlResolver&lt;/span>
source artifactory_url &lt;span style="color:#d14">&amp;#39;chef-repo/chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span>
checksum &lt;span style="color:#d14">&amp;#39;c594965648e20a2339d6f33d236b4e3e22b2be6916cceb1b0f338c74378c03da&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Having an https url is great because I can use a lot of third party chef cookbooks that just need a URL.&lt;/p>
&lt;p>We have even taken it a step further and developed our own custom resource:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">artifactory_file &lt;span style="color:#d14">&amp;#39;C:\cafe\staging\chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
repsoitory_path &lt;span style="color:#d14">&amp;#39;chef-repo/chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span>
checksum &lt;span style="color:#d14">&amp;#39;c594965648e20a2339d6f33d236b4e3e22b2be6916cceb1b0f338c74378c03da&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will automatically determine the artifactory path we use to all of our cookbooks that just want to download a file can be easier to code.&lt;/p>
&lt;h2 id="checksum-validation">Checksum Validation&lt;/h2>
&lt;p>You should be checking checksums on all downloads. Fortunately the &lt;code>remote_file&lt;/code> resource gives you a built-in way to do this. Simply add the &lt;code>checksum&lt;/code> attribute to your resource and you have checking. That way if your files are tampered with or not what you expected, you don&amp;rsquo;t go ahead; you stop right there. That&amp;rsquo;s the &amp;ldquo;limit the damage when things go wrong&amp;rdquo; principle at work again. This is something I learned well from my security friends.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Artifactory is a fantastic an essential ally to Chef in your search for DevOps nirvana. I highly recommend it over the other alternatives: Nexus by Sonatype and your own SFTP server. We&amp;rsquo;re extremely happy with this product.&lt;/p></description></item><item><title>Chef Rollback with Policyfiles and Cafe</title><link>https://hedge-ops.com/chef-rollback/</link><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/chef-rollback/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-chef-rollback.jpg" alt="Failure Masquerading as Success" />
&lt;/div>
&lt;p>When we first looked at application release automation tools, one of the first things people told me we needed was a solid rollback mechanism. One of my colleagues even insisted without satisfying his rollback scenarios, it was silly even looking at a tool for application release automation. I can definitely understand the sentiment; when you&amp;rsquo;re doing a change and that change goes badly you really want to have a mechanism to get out of that bad situation.&lt;/p>
&lt;p>It would be fantastic if we had a time machine and were able to simply tell ourselves &amp;ldquo;stop!&amp;rdquo; But in lieu of that, we have to devise a plan for when we need to get out of a change we made, we are able to do so safely.&lt;/p>
&lt;h1 id="policyfiles-simplify-rollback">Policyfiles Simplify Rollback&lt;/h1>
&lt;p>Fortunately, we have the &lt;a href="https://hedge-ops.com/policyfiles/">policyfiles&lt;/a> feature at our disposal which makes &lt;strong>everything&lt;/strong> in this area so much simpler. In the classical Chef model, your rollback might be a rollback change to an environment pin, or a role, or a cookbook, or a combination of all of these. And if you, like most people in a panic, made some on the fly changes to any of these, good luck with getting out of that mess.&lt;/p>
&lt;p>With policyfiles, rollback of your Chef code is quite easy; you simply upload the old version of the policy to the Chef server and reconverge your nodes. That&amp;rsquo;s it. It&amp;rsquo;s virtually impossible to get yourself into a mess where you can&amp;rsquo;t somehow &amp;ldquo;remember&amp;rdquo; what your rollback was.&lt;/p>
&lt;h1 id="with-a-defined-deployment-its-even-simpler">With a Defined Deployment Its Even Simpler&lt;/h1>
&lt;p>And, now that I&amp;rsquo;ve shown you how you can do a controlled, atomic deployment with a &lt;a href="https://hedge-ops.com/policyfile-deployment-with-cafe-and-psake/">policyfile deployment&lt;/a>, things get even easier! You &lt;strong>just&lt;/strong> went to Jenkins and uploaded policy &lt;code>1.0.32&lt;/code> for your nodes related to product X. Things went south. Now go back to that same place and enter in &lt;code>1.0.31&lt;/code> and roll out that new policy to all your nodes, safely and immediately with &lt;a href="https://hedge-ops.com/introducing-cafe/">cafe&lt;/a>.&lt;/p>
&lt;h1 id="sometimes-a-data-bag-will-suffice">Sometimes a Data Bag will Suffice&lt;/h1>
&lt;p>If you&amp;rsquo;re just dealing with whether you&amp;rsquo;re going to deploy version &lt;code>A&lt;/code> or &lt;code>B&lt;/code> of your application, with Chef you can just store which version you&amp;rsquo;re on in a Data Bag. If your Chef code doesn&amp;rsquo;t need to change, a &amp;ldquo;rollback&amp;rdquo; is simply an update of your Data Bag and then a convergence with cafe. I&amp;rsquo;ve found it a best practice to decouple my Chef code, wrapped in policies, with what version my application is on, stored in Data Bags.&lt;/p>
&lt;h1 id="code-a-rollback-in-critical-situations">Code a Rollback in Critical Situations&lt;/h1>
&lt;p>It would be silly of me to suggest merely rolling back chef code and product code are enough to satisfy a true rollback. In some situations that isn&amp;rsquo;t sufficient. Let&amp;rsquo;s say we have a situation like this:&lt;/p>
&lt;pre>&lt;code>Version 1.0
website myweb exists
Version 2.0
website myweb exists
website newmicroservice exists
&lt;/code>&lt;/pre>&lt;p>And let&amp;rsquo;s say you went from version &lt;code>1.0&lt;/code> to version &lt;code>2.0&lt;/code>. And things went south, so you rolled back. In this situation, with Chef you would still have &lt;code>newmicoservice&lt;/code> there. So to facilitate this kind of change, you&amp;rsquo;ll want to do this:&lt;/p>
&lt;pre>&lt;code>Version 1.0
website myweb exists
Version 1.1
website myweb exists
website newmicroservice DOES NOT exist
Version 2.0
website myweb exists
website newmicroservice exists
&lt;/code>&lt;/pre>&lt;p>Here you&amp;rsquo;re giving your Chef code an ability to roll back and undo stuff you plan on doing in the future. This is smart planning. I recommend it for any time a product adds new features; always add a version of the cookbook (or better yet, an attribute to a cookbook) that will turn that thing off, so if you need to roll back you can roll back safely.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Hopefully by now you can see that the rollback mechanisms offered by Chef Policyfiles are an excellent alternative to the coded rollback in other application release automation tools. In addition to this, you get all of the fantastic elements of infrastructure as code with Chef and infrastructure testing with InSpec. The holistic approach is what gets you a full solution that will create the velocity you&amp;rsquo;re looking for.&lt;/p></description></item><item><title>Cafe Cookbook</title><link>https://hedge-ops.com/cafe-cookbook/</link><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/cafe-cookbook/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-cafe-cookbook.jpg" alt="Cafe Cookbook" />
&lt;/div>
&lt;p>With a &lt;a href="policyfile-deployment-with-cafe-and-psake">solid deployment pipeline&lt;/a> in place for running Chef that depends on &lt;a href="https://hedge-ops.com/introducing-cafe/">Cafe&lt;/a> for a safe, atomic, and controlled rollout of Chef &lt;a href="https://hedge-ops.com/policyfiles/">policy&lt;/a> changes, it has become more important than ever to utilize &lt;a href="https://hedge-ops.com/introducing-cafe/">cafe&lt;/a> to manage itself and Chef on a machine. The &lt;a href="https://github.com/mhedgpeth/cafe-cookbook">&lt;code>cafe&lt;/code> cookbook&lt;/a> does just that.&lt;/p>
&lt;p>The cafe cookbook makes it easy to ensure that Cafe is installed and configured properly on a machine and will manage Chef upgrades that happen outside of when Chef runs.&lt;/p>
&lt;p>It does this very easily by giving you access to two resources:&lt;/p>
&lt;h2 id="cafe-resource">&lt;code>cafe&lt;/code> resource&lt;/h2>
&lt;p>To install and configure Cafe, you should use the &lt;code>cafe&lt;/code> resource, for example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">cafe &lt;span style="color:#d14">&amp;#39;cafe&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
download_source &lt;span style="color:#d14">&amp;#39;https://github.com/mhedgpeth/cafe/releases/download/0.9.2-beta/cafe-win10-x64-0.9.2.0.zip&amp;#39;&lt;/span>
download_checksum &lt;span style="color:#d14">&amp;#39;75707978E48B51EC9564D209A9B6CA8F4B563AC4B128C34614435899FAD787C7&amp;#39;&lt;/span>
version &lt;span style="color:#d14">&amp;#39;0.9.2.0&amp;#39;&lt;/span>
installer &lt;span style="color:#d14">&amp;#39;cafe-win10-x64-0.9.2.0.zip&amp;#39;&lt;/span>
cafe_install_root &lt;span style="color:#d14">&amp;#39;D:&amp;#39;&lt;/span>
chef_interval &lt;span style="color:#099">1800&lt;/span>
service_port &lt;span style="color:#099">59320&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See the &lt;a href="https://github.com/mhedgpeth/cafe/releases">Cafe Releases&lt;/a> page to get the &lt;code>download_source&lt;/code>, &lt;code>version&lt;/code>, and &lt;code>installer&lt;/code> that you need to use. You&amp;rsquo;ll have to calculate your own checksum at the moment. The last three properties are configuration elements of Cafe itself; if you omit them, the resource will use sensible default values.&lt;/p>
&lt;p>You should also notice that this resource is very friendly to air-gapped environments; you can use any URL you need to use here, as long as you get it downloaded and it matches the checksum. We use &lt;a href="https://www.jfrog.com/artifactory/">artifactory&lt;/a> for our artifacts and love it.&lt;/p>
&lt;p>If you are introducing Cafe to existing Chef nodes because you want to manage Chef that way now, and your &lt;code>cafe_install_root&lt;/code> is set to &lt;code>D:&lt;/code>, it will dutifully install Cafe for the first time in &lt;code>D:\chef&lt;/code>. On an upgrade, the &lt;code>cafe&lt;/code> service asks its &lt;code>cafe Updater&lt;/code> service friend to update &lt;code>cafe&lt;/code> for it, because services can&amp;rsquo;t update themselves. This all happens after the Chef run is finished, assuming that Cafe is running Chef.&lt;/p>
&lt;h2 id="cafe_chef-resource">&lt;code>cafe_chef&lt;/code> resource&lt;/h2>
&lt;p>You&amp;rsquo;ll also want to keep the &lt;code>chef-client&lt;/code> application up to date and consistent on all of your nodes. You&amp;rsquo;ll want to make sure you do this when Chef is not running as well. Fortunately, Cafe has you covered in this regard. Simply declare what you want Chef to look like on the machine, and Cafe handles the rest:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">cafe_chef &lt;span style="color:#d14">&amp;#39;chef-client&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
download_source &lt;span style="color:#d14">&amp;#39;https://packages.chef.io/files/stable/chef/13.0.118/windows/2012r2/chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span>
installer &lt;span style="color:#d14">&amp;#39;chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span>
download_checksum &lt;span style="color:#d14">&amp;#39;c594965648e20a2339d6f33d236b4e3e22b2be6916cceb1b0f338c74378c03da&amp;#39;&lt;/span>
version &lt;span style="color:#d14">&amp;#39;13.0.118&amp;#39;&lt;/span>
cafe_install_root &lt;span style="color:#d14">&amp;#39;D:&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As with the scenario above, you can use any source you want from a private repository like artifactory. This is the equivalent of running &lt;code>cafe chef download 13.0.118&lt;/code> and then &lt;code>cafe install chef 13.0.118&lt;/code> but gives you more control to download the file.&lt;/p>
&lt;p>Also, you can omit the &lt;code>cafe_install_root&lt;/code> if you want to install everything on &lt;code>C:&lt;/code>.&lt;/p>
&lt;p>It&amp;rsquo;s important to understand what exactly is happening here, because this is at the genesis of why Cafe exists. You would expect Cafe to be &lt;em>running&lt;/em> Chef at this moment, so you don&amp;rsquo;t want it to upgrade Chef immediately. So here we&amp;rsquo;re &lt;strong>not&lt;/strong> upgrading Chef, we&amp;rsquo;re &lt;strong>requesting&lt;/strong> that Cafe upgrade Chef after the Chef client runs. The &lt;em>desired state&lt;/em> of the system is &amp;ldquo;I want Cafe to make the Chef client be on version 13.0.118&amp;rdquo;. Cafe handles the rest!&lt;/p>
&lt;p>So you don&amp;rsquo;t need to worry about timing here. Cafe runs &lt;strong>all&lt;/strong> of its jobs sequentially because it knows that you don&amp;rsquo;t want things stepping on other things. So sleep peacefully, my friend!&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>I hope you&amp;rsquo;re as excited as I am about the promise Cafe brings to the Chef runtime. With Cafe, you can still use Chef to manage itself and Cafe on an application, but you can trust that Cafe will handle this management with grace and no drama. If you&amp;rsquo;re interested in deploying or contributing to Cafe, I&amp;rsquo;d love to hear from you about it. I think it addresses a critical need within the Chef ecosystem.&lt;/p></description></item><item><title>Policyfile Deployment with Cafe and Psake</title><link>https://hedge-ops.com/policyfile-deployment-with-cafe-and-psake/</link><pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/policyfile-deployment-with-cafe-and-psake/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-policyfile-deployment-with-cafe-and-psake.jpg" alt="Policyfile Deployment with Cafe" />
&lt;/div>
&lt;p>Our &lt;a href="https://hedge-ops.com/cookbook-development-with-rakefile/">cookbook builds&lt;/a> make a &lt;a href="https://hedge-ops.com/cookbook-pipeline-with-jenkinsfile/">pipeline&lt;/a> which places them into a private supermarket. Then separate &lt;a href="https://hedge-ops.com/policyfile-pipeline-with-jenkinsfile/">policyfile repository pipelines&lt;/a> grouped by product get uploaded to an artifactory server.&lt;/p>
&lt;p>Now for the exciting part: In an air-gapped environment, we can easily update all the things chef-related and do that within a transactional interaction with the Chef Server and all of its nodes.&lt;/p>
&lt;p>This is the part where my project &lt;a href="https://hedge-ops.com/introducing-cafe/">cafe&lt;/a> really shines. In this situation where you&amp;rsquo;re rolling out a &lt;a href="https://hedge-ops.com/policyfiles/">policy&lt;/a> to a Chef Server, you might have a lot of issues; you might have to wait an indeterminate time for chef to run on each node. You may not be able to predict if all the right policies hit the nodes when they run next. It&amp;rsquo;s a very scary moment.&lt;/p>
&lt;p>But we can automate that crazy situation and make it a peaceful, good situation. We do that with cafe and &lt;a href="https://github.com/psake/psake">psake&lt;/a> a powershell-based automation mechanism.&lt;/p>
&lt;p>Why psake? Within our windows-heavy environment people want to see powershell. So it makes sense for us to orchestrate our deployment of chef changes with a powershell-based mechanism. If I was in a ruby shop I&amp;rsquo;d probably use rake. Whatever it takes; the main requirements are that it be a staged model where if a stage fails then the execution stops. Pretty much any make-based system will do that.&lt;/p>
&lt;h1 id="psake-deployment-script-with-cafe">Psake Deployment Script with Cafe&lt;/h1>
&lt;p>So let&amp;rsquo;s jump into our &lt;code>deploy.ps1&lt;/code> which is our script to deploy all the things to the Chef Server and rerun Chef on all the servers:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">properties {
&lt;span style="color:#998;font-style:italic">#put properties here like servers&lt;/span>
&lt;span style="color:#008080">$servers&lt;/span> = @( &lt;span style="color:#d14">&amp;#39;database-server&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;webserver&amp;#39;&lt;/span>)
&lt;span style="color:#008080">$policy_group&lt;/span> = &lt;span style="color:#d14">&amp;#39;qa&amp;#39;&lt;/span>
&lt;span style="color:#008080">$product_prefix&lt;/span> = &lt;span style="color:#d14">&amp;#39;myproduct&amp;#39;&lt;/span>
}
Task &lt;span style="color:#000;font-weight:bold">default&lt;/span> -description &lt;span style="color:#d14">&amp;#34;runs a full deployment&amp;#34;&lt;/span> `
-depends PauseChef, UpdatePolicies, ConvergeNodes, ResumeChef
Task PauseChef -description &lt;span style="color:#d14">&amp;#34;pauses chef across all nodes using cafe&amp;#34;&lt;/span> {
&lt;span style="color:#000;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#008080">$server&lt;/span> &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#008080">$servers&lt;/span>) {
exec { &lt;span style="color:#0086b3">Invoke-Expression&lt;/span> &lt;span style="color:#d14">&amp;#34;C:\cafe\cafe.exe chef pause on: $server&amp;#34;&lt;/span> }
}
}
Task UpdatePolicies -description &lt;span style="color:#d14">&amp;#34;Updates the Policies on the Chef Server&amp;#34;&lt;/span> {
&lt;span style="color:#000;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#008080">$policyfile&lt;/span> &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#0086b3">Get-ChildItem&lt;/span> -Filter *.tgz) {
&lt;span style="color:#0086b3">Write-Host&lt;/span> &lt;span style="color:#d14">&amp;#34;Uploading $policyfile to $policy_group&amp;#34;&lt;/span>
exec { &lt;span style="color:#0086b3">Invoke-Expression&lt;/span> &lt;span style="color:#d14">&amp;#34;chef push-archive $policy_group $policyfile&amp;#34;&lt;/span> }
}
}
Task ConvergeNodes -description &lt;span style="color:#d14">&amp;#34;Runs Chef on all nodes&amp;#34;&lt;/span> {
&lt;span style="color:#000;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#008080">$server&lt;/span> &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#008080">$servers&lt;/span>) {
exec { &lt;span style="color:#0086b3">Invoke-Expression&lt;/span> &lt;span style="color:#d14">&amp;#34;C:\cafe\cafe.exe chef run on: $server&amp;#34;&lt;/span> }
}
}
Task ResumeChef -description &lt;span style="color:#d14">&amp;#34;Resumes Chef across all nodes using cafe&amp;#34;&lt;/span> {
&lt;span style="color:#000;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#008080">$server&lt;/span> &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#008080">$servers&lt;/span>) {
exec { &lt;span style="color:#0086b3">Invoke-Expression&lt;/span> &lt;span style="color:#d14">&amp;#34;C:\cafe\cafe.exe chef resume on: $server&amp;#34;&lt;/span> }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I really love how readable and self-documenting this is. So much so, that I don&amp;rsquo;t feel like I have to explain it. What I will say is that we follow this workflow:&lt;/p>
&lt;ol>
&lt;li>Pause Chef (get into maintenance mode)&lt;/li>
&lt;li>Push policies to Chef Server&lt;/li>
&lt;li>Converge All Nodes&lt;/li>
&lt;li>Resume Chef&lt;/li>
&lt;/ol>
&lt;p>The control and safety here should make every Chef user giddy with excitement. This change event is so scary, that you need safety around it. Coupled with Policyfiles, cafe brings you that safety, and if you agree I would love your help making cafe everything it should be within the Chef ecosystem.&lt;/p>
&lt;h1 id="pipeline-for-deployment">Pipeline for Deployment&lt;/h1>
&lt;p>If you&amp;rsquo;ll remember from the &lt;a href="https://hedge-ops.com/policyfile-pipeline-with-jenkinsfile/">policyfile pipeline&lt;/a> post, everything described above is packaged &lt;strong>with&lt;/strong> the policyfile archives. So this is the script that runs within the context of those other files. We have &lt;strong>one package&lt;/strong>, versioned by Jenkins, that we can upload to do an atomic update of everything related to Chef, then reconverge the nodes.&lt;/p>
&lt;p>So now that we have this file available on our artifacts server, it&amp;rsquo;s time to run a deployment. With an air-gapped environment, the source of these files might be different, or you might get those files to their destination in a variety of ways. However, the basics remain the same from a pipeline perspective: you need to download the file, unzip it, and run the script. Here is an example &lt;code>Jenkinsfile&lt;/code> that does just this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">archiveName &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#34;myproduct_policies_${policiesVersion}.zip&amp;#34;&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;Download&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;windows&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
bat &lt;span style="color:#d14">&amp;#39;del /F /Q *.*&amp;#39;&lt;/span>
bat &lt;span style="color:#d14">&amp;#34;jfrog.exe rt download myproduct-repo/myproduct-policies/${archiveName} ${archiveName} --flat=true&amp;#34;&lt;/span>
bat &lt;span style="color:#d14">&amp;#34;\&amp;#34;C:\\Program Files\\7-Zip\\7z.exe\&amp;#34; x ${archiveName}&amp;#34;&lt;/span>
stash &lt;span style="color:#d14">&amp;#39;everything&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">powershell&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>command&lt;span style="color:#000;font-weight:bold">){&lt;/span>
ansiColor&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;xterm&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
print &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;${(char)27}[33m ${new Date()} Executing :: ${command}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
bat &lt;span style="color:#d14">&amp;#34;powershell.exe -Command \&amp;#34;${command}\&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">invoke_psake&lt;/span>&lt;span style="color:#000;font-weight:bold">(){&lt;/span>
powershell&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;.\\psake.ps1 .\\deploy.ps1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;Deploy&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;windows&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
unstash &lt;span style="color:#d14">&amp;#39;everything&amp;#39;&lt;/span>
invoke_psake&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s as simple as that. In Jenkins we make &lt;code>policiesVersion&lt;/code> a parameter and all of the sudden we have a parameterized build of versioned grouped policies that happen in an ATOMIC update, with immediate node convergence.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>I love taking the complexity of all those Chef scripts, on all those nodes, and narrowing them down to a single file that gets deployed to a target environment. This is exactly what the developers have been doing for some time; it&amp;rsquo;s nice to see my Chef workflow catch up with that goodness. In a change management situation, it&amp;rsquo;s &lt;em>very clear&lt;/em> what&amp;rsquo;s happening here.&lt;/p>
&lt;p>One improvement I want to make soon: I&amp;rsquo;d like to have a file checksum added as a parameter to the Jenkins job. That way if someone accidentally fat fingered the wrong version, you wouldn&amp;rsquo;t accidentally get the wrong version deployed. Everything needs a safety net.&lt;/p></description></item><item><title>Policyfile Pipeline with Jenkinsfile</title><link>https://hedge-ops.com/policyfile-pipeline-with-jenkinsfile/</link><pubDate>Sat, 13 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/policyfile-pipeline-with-jenkinsfile/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-policyfile-pipeline-with-jenkinsfile.jpg" alt="Policyfile Pipeline with Jenkinsfile" />
&lt;/div>
&lt;p>I&amp;rsquo;m a huge proponent of &lt;a href="https://hedge-ops.com/policyfiles/">policyfiles&lt;/a> for managing Chef changes in all of your environments. Let&amp;rsquo;s talk a little about how we take a policyfile and create a pipeline in Jenkins around it to get it deployed to the right places.&lt;/p>
&lt;p>Many environments that aren&amp;rsquo;t as security-conscious will have a single Chef Server to rule them all, connected to a single CI server. This is the model that &lt;a href="https://docs.chef.io/workflow.html">Chef Workflow&lt;/a> assumes, and it&amp;rsquo;s a nice situation to be in. In those situations, the pipeline I lay out will be much simpler, but I still recommend following the basic pieces. Since it&amp;rsquo;s more complicated and therefore covers all the bases, we&amp;rsquo;ll go for a disconnected, releasable pipeline that can and will traverse the development to operations barrier that many security-minded organizations have.&lt;/p>
&lt;p>For our policyfiles pipeline, we create a similar process to our cookbooks:&lt;/p>
&lt;ol>
&lt;li>We keep a separate &lt;code>policies&lt;/code> git repo for each product group of policies that we have. &lt;strong>We don&amp;rsquo;t keep the policyfiles in the cookbook.&lt;/strong> This is largely because we want to have our own pipeline for policies that is &lt;strong>unrelated&lt;/strong> to the cookbook pipeline. The cookbook pipeline will promote a cookbook to a &lt;em>supermarket&lt;/em>, and the policy will pull the cookbook &lt;em>from&lt;/em> that supermarket. This creates two separate processes that have a beginning and end, but are disconnected, so allow for independence. This is a critical aspect to designing any pipeline, and one I&amp;rsquo;ll blog about in the near future.&lt;/li>
&lt;li>We have a &lt;code>rakefile&lt;/code> for doing tasks that can be done locally on a developer machine&lt;/li>
&lt;li>We then put that into a pipeline with a &lt;code>Jenkinsfile&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Let&amp;rsquo;s first look at the &lt;code>rakefile&lt;/code>:&lt;/p>
&lt;h1 id="policyfile-rakefile">Policyfile Rakefile&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;rake/clean&amp;#39;&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;rake/packagetask&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">product_name&lt;/span>
&lt;span style="color:#d14">&amp;#39;myproduct&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">policies&lt;/span>
&lt;span style="color:#008080">FileList&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#d14">#{&lt;/span>product_name&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">-*.rb&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">policies_version&lt;/span>(build_number)
&lt;span style="color:#d14">&amp;#34;1.&lt;/span>&lt;span style="color:#d14">#{&lt;/span>build_number&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">.0&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">archive_name&lt;/span>
build_number &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#008080">ENV&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;BUILD_ID&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">if&lt;/span> build_number&lt;span style="color:#000;font-weight:bold">.&lt;/span>nil?
&lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#d14">#{&lt;/span>product_name&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">_policies.zip&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">else&lt;/span>
&lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#d14">#{&lt;/span>product_name&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">_policies_&lt;/span>&lt;span style="color:#d14">#{&lt;/span>policies_version(build_number)&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">.zip&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
task &lt;span style="color:#990073">:default&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#990073">:compile_policies&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
desc &lt;span style="color:#d14">&amp;#34;compiles all policies&amp;#34;&lt;/span>
task &lt;span style="color:#990073">:compile_policies&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
rm &lt;span style="color:#008080">Dir&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>glob(&lt;span style="color:#d14">&amp;#39;*.lock.json&amp;#39;&lt;/span>)
policies&lt;span style="color:#000;font-weight:bold">.&lt;/span>each &lt;span style="color:#000;font-weight:bold">do&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>policyfile&lt;span style="color:#000;font-weight:bold">|&lt;/span>
sh &lt;span style="color:#d14">&amp;#39;chef&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;install&amp;#39;&lt;/span>, policyfile
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
directory &lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span>
&lt;span style="color:#008080">CLEAN&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>include(&lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span>)
&lt;span style="color:#008080">CLEAN&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>include(&lt;span style="color:#d14">&amp;#39;*.zip&amp;#39;&lt;/span>)
desc &lt;span style="color:#d14">&amp;#34;Exports all policies to archives and stages them in the archive folder&amp;#34;&lt;/span>
task &lt;span style="color:#990073">:export_policies&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
policies&lt;span style="color:#000;font-weight:bold">.&lt;/span>each &lt;span style="color:#000;font-weight:bold">do&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>policyfile&lt;span style="color:#000;font-weight:bold">|&lt;/span>
sh &lt;span style="color:#d14">&amp;#39;chef&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;export&amp;#39;&lt;/span>, policyfile, &lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;-a&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;os&amp;#39;&lt;/span>
task &lt;span style="color:#990073">:stage&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#990073">:clean&lt;/span>, &lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span>, &lt;span style="color:#990073">:export_policies&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
cp &lt;span style="color:#d14">&amp;#39;deploy.ps1&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span>
cp &lt;span style="color:#d14">&amp;#39;psake.psm1&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span>
cp &lt;span style="color:#d14">&amp;#39;psake.psd1&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span>
cp &lt;span style="color:#d14">&amp;#39;psake.ps1&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
task &lt;span style="color:#990073">:package&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#990073">:stage&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
cd(&lt;span style="color:#d14">&amp;#39;staging&amp;#39;&lt;/span>) &lt;span style="color:#000;font-weight:bold">do&lt;/span>
&lt;span style="color:#000;font-weight:bold">if&lt;/span> &lt;span style="color:#008080">OS&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>windows?
sh &lt;span style="color:#d14">&amp;#39;C:\Program Files\7-Zip\7z.exe&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;-tzip&amp;#39;&lt;/span>, archive_name, &lt;span style="color:#d14">&amp;#39;*.*&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;-x!*.zip&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">else&lt;/span>
sh &lt;span style="color:#d14">&amp;#39;zip&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;-r&amp;#39;&lt;/span>, archive_name, &lt;span style="color:#d14">&amp;#39;.&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;-x&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;*.zip&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s unpack this a little bit. Here&amp;rsquo;s what&amp;rsquo;s going on:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>compile_poilcies&lt;/strong> will run &lt;code>chef install&lt;/code> against all files that have the pattern &lt;code>myproduct-*.rb&lt;/code>. So it basicaly generates the &lt;code>Policyfile.lock.json&lt;/code> for all the policies in the repo.&lt;/li>
&lt;li>&lt;strong>export_policies&lt;/strong> will export all policies to a &lt;code>tgz&lt;/code> file with &lt;code>chef export&lt;/code> command.&lt;/li>
&lt;li>&lt;strong>stage&lt;/strong> will stage all the things that are to be packaged into a &lt;code>staging&lt;/code> folder including the deployment scripts written in psake (more on that in the next post).&lt;/li>
&lt;li>&lt;strong>package&lt;/strong> will package the &lt;code>tgz&lt;/code> file and the deployment scripts into a package&lt;/li>
&lt;/ol>
&lt;h1 id="policyfile-jenkinsfile">Policyfile Jenkinsfile&lt;/h1>
&lt;p>Now that we have a rakefile that can do the work we need, now it&amp;rsquo;s time to get that into a &lt;code>Jenkinsfile&lt;/code> to describe the pipeline. The pipeline will create a package of all policyfile archives and put them, with the script that will deploy them, on our artifactory server. Here&amp;rsquo;s an example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="color:#999;font-weight:bold;font-style:italic">#!/usr/bin/env groovy&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> repository &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;myproduct-policies&amp;#39;&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> workingDirectory &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#34;policies/${repository}&amp;#34;&lt;/span>
&lt;span style="color:#998;font-style:italic">// the current branch that is being built
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#458;font-weight:bold">def&lt;/span> currentBranch &lt;span style="color:#000;font-weight:bold">=&lt;/span> env&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">BRANCH_NAME&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">execute&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>command&lt;span style="color:#000;font-weight:bold">){&lt;/span>
ansiColor&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;xterm&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
bat command
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;Checkout&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;windows&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
checkout&lt;span style="color:#000;font-weight:bold">([&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;GitSCM&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">branches:&lt;/span> scm&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">branches&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">doGenerateSubmoduleConfigurations:&lt;/span> scm&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">doGenerateSubmoduleConfigurations&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">extensions:&lt;/span> scm&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">extensions&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#000;font-weight:bold">[[&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;RelativeTargetDirectory&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">relativeTargetDir:&lt;/span> workingDirectory&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;LocalBranch&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#900;font-weight:bold">localBranch:&lt;/span> currentBranch&lt;span style="color:#000;font-weight:bold">]],&lt;/span>
&lt;span style="color:#900;font-weight:bold">userRemoteConfigs:&lt;/span> scm&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">userRemoteConfigs&lt;/span>
&lt;span style="color:#000;font-weight:bold">])&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>workingDirectory&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
execute&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;rake -t clean&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stash &lt;span style="color:#900;font-weight:bold">name:&lt;/span> &lt;span style="color:#d14">&amp;#39;everything&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">includes:&lt;/span> &lt;span style="color:#d14">&amp;#39;**&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;Compile&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;windows&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
unstash &lt;span style="color:#d14">&amp;#39;everything&amp;#39;&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>workingDirectory&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
execute&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;rake -t compile_policies&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">try&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
execute&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;git add *.lock.json&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
execute&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;git commit -m \&amp;#34;Automatically Compiled Policyfiles\&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
withCredentials&lt;span style="color:#000;font-weight:bold">([[&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;UsernamePasswordMultiBinding&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#900;font-weight:bold">credentialsId:&lt;/span> &lt;span style="color:#d14">&amp;#39;abcYOUR_GUID_HERE123&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#900;font-weight:bold">usernameVariable:&lt;/span> &lt;span style="color:#d14">&amp;#39;GIT_USERNAME&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#900;font-weight:bold">passwordVariable:&lt;/span> &lt;span style="color:#d14">&amp;#39;GIT_PASSWORD&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
execute&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;git push http://${env.GIT_USERNAME}:${env.GIT_PASSWORD}@almgit.ncr.com/scm/chef/${repository}.git ${currentBranch}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">catch&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>error&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
echo &lt;span style="color:#d14">&amp;#34;Nothing to commit because of error: ${error}, so skipping pushing&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stash &lt;span style="color:#900;font-weight:bold">name:&lt;/span> &lt;span style="color:#d14">&amp;#39;compiled&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">includes:&lt;/span> &lt;span style="color:#d14">&amp;#39;**&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;Package&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;windows&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
unstash &lt;span style="color:#d14">&amp;#39;compiled&amp;#39;&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>workingDirectory&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
execute&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;rake -t package&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
archiveArtifacts &lt;span style="color:#d14">&amp;#39;staging/*.zip&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;Publish&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;windows&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
unstash &lt;span style="color:#d14">&amp;#39;compiled&amp;#39;&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>workingDirectory&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
execute&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;jfrog.exe rt upload &amp;#34;staging\\\\*.zip&amp;#34; myproduct-repo/myproduct-policies/&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is a description of all the stages:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Stage&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Checkout&lt;/td>
&lt;td>Checks out the policies repo&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Compile&lt;/td>
&lt;td>Generates all policyfile.lock.json files and checks them into git&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Package&lt;/td>
&lt;td>Creates tgz files and zips them up with deployment scripts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Publish&lt;/td>
&lt;td>Publishes this all to artifactory&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can see a pattern here with the pipelines from the earlier post on &lt;a href="https://hedge-ops.com/cookbook-development-with-rakefile/">cookbook build&lt;/a> and &lt;a href="https://hedge-ops.com/cookbook-pipeline-with-jenkinsfile/">cookbook pipelines&lt;/a>. They rely on script that can run locally, then end up being deployed to something that is a source of the next step in the process. More on that in the next post: how we deploy these policies to a Chef Server and reconverge the nodes.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Hopefully you&amp;rsquo;re starting to see the pattern I use when designing a pipeline element in my Chef Pipeline. Everything has a starting point and a destination. Every pipeline &lt;em>segment&lt;/em> will take a &amp;ldquo;stable&amp;rdquo; input and put it into an &amp;ldquo;even more stable&amp;rdquo; location at the end. It all flows together very quickly and then allows for quick changes that can flow to production.&lt;/p></description></item><item><title>Cookbook Pipeline with Jenkinsfile</title><link>https://hedge-ops.com/cookbook-pipeline-with-jenkinsfile/</link><pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/cookbook-pipeline-with-jenkinsfile/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-cookbook-pipeline-with-jenkinsfile.jpg" alt="Pipeline with Jenkinsfile" />
&lt;/div>
&lt;p>Now that we have a &lt;a href="https://hedge-ops.com/cookbook-development-with-rakefile/">local cookbook build&lt;/a> ready to go, it&amp;rsquo;s time to get that in a CI environment. I have been a fan of &lt;a href="https://www.jetbrains.com/teamcity">TeamCity&lt;/a> and my friends at Chef have a done a great job with &lt;a href="https://docs.chef.io/workflow.html">Chef Workflow in Automate&lt;/a>. For us, however, &lt;a href="https://jenkins.io/">Jenkins&lt;/a> is our tool of choice with managing our deployment pipelines, for a few reasons:&lt;/p>
&lt;ol>
&lt;li>Jenkins is &lt;strong>free&lt;/strong>. We are able to get done what we need inside of the free version, so it&amp;rsquo;s nice that we don&amp;rsquo;t have or need a license or support.&lt;/li>
&lt;li>Jenkins is &lt;strong>flexible&lt;/strong>. We have complicated requirements around security, and Jenkins has been easy to bend to those requirements without requiring a lot of fuss.&lt;/li>
&lt;li>Jenkins is &lt;strong>friendly to a pipeline mindset&lt;/strong>. Compared to TeamCity, Jenkins is much better at laying out a workflow and walking through the various stages of that workflow, defined in a single file.&lt;/li>
&lt;li>Jenkins is &lt;strong>recommended by expensive consultants&lt;/strong>. In a large enterprise that&amp;rsquo;s important. If you go with a tool that the high-powered consultants don&amp;rsquo;t put on a &amp;ldquo;here&amp;rsquo;s what people are doing&amp;rdquo; list, you end up fighting an uphill battle. Choose those battles wisely; you&amp;rsquo;ll likely lose them unless you have a &lt;em>very&lt;/em> compelling use case.&lt;/li>
&lt;/ol>
&lt;p>So now that we&amp;rsquo;ve decided on Jenkins as our CI of choice, let&amp;rsquo;s talk about how we would implement that.&lt;/p>
&lt;h1 id="jenkinsfile-example">Jenkinsfile Example&lt;/h1>
&lt;p>First, in your cookbook repository in git you would have a &lt;code>Jenkinsfile&lt;/code>. Ours looks like this (just scroll down if you don&amp;rsquo;t care; it&amp;rsquo;s ok):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="color:#999;font-weight:bold;font-style:italic">#!/usr/bin/env groovy&lt;/span>
&lt;span style="color:#998;font-style:italic">// COOKBOOK BUILD SETTINGS
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>
&lt;span style="color:#998;font-style:italic">// name of this cookbook
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#458;font-weight:bold">def&lt;/span> cookbook &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;cafe&amp;#39;&lt;/span>
&lt;span style="color:#998;font-style:italic">// SUPERMARKET SETTINGS
&lt;/span>&lt;span style="color:#998;font-style:italic">// the branch that should be promoted to supermarket
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#458;font-weight:bold">def&lt;/span> stableBranch &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;master&amp;#39;&lt;/span>
&lt;span style="color:#998;font-style:italic">// the current branch that is being built
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#458;font-weight:bold">def&lt;/span> currentBranch &lt;span style="color:#000;font-weight:bold">=&lt;/span> env&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">BRANCH_NAME&lt;/span>
&lt;span style="color:#998;font-style:italic">// OTHER (Unchanged)
&lt;/span>&lt;span style="color:#998;font-style:italic">// the checkout directory for the cookbook; usually not changed
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#458;font-weight:bold">def&lt;/span> cookbookDirectory &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#34;cookbooks/${cookbook}&amp;#34;&lt;/span>
&lt;span style="color:#998;font-style:italic">// Everything below should not change unless you have a good reason :slightly_smiling_face:
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span>&lt;span style="color:#458;font-weight:bold">def&lt;/span> building_pull_request &lt;span style="color:#000;font-weight:bold">=&lt;/span> env&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">pullRequestId&lt;/span> &lt;span style="color:#000;font-weight:bold">!=&lt;/span> &lt;span style="color:#000;font-weight:bold">null&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">notify_stash&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>building_pull_request&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#000;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>building_pull_request&lt;span style="color:#000;font-weight:bold">){&lt;/span>
step&lt;span style="color:#000;font-weight:bold">([&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;StashNotifier&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">commitSha1:&lt;/span> &lt;span style="color:#d14">&amp;#34;${env.sourceCommitHash}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">execute&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>command&lt;span style="color:#000;font-weight:bold">){&lt;/span>
ansiColor&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;xterm&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
bat command
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">rake&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>command&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
execute&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;chef exec rake -t ${command}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">fetch&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>scm&lt;span style="color:#000;font-weight:bold">,&lt;/span> cookbookDirectory&lt;span style="color:#000;font-weight:bold">,&lt;/span> currentBranch&lt;span style="color:#000;font-weight:bold">){&lt;/span>
checkout&lt;span style="color:#000;font-weight:bold">([&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;GitSCM&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">branches:&lt;/span> scm&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">branches&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">doGenerateSubmoduleConfigurations:&lt;/span> scm&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">doGenerateSubmoduleConfigurations&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">extensions:&lt;/span> scm&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">extensions&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">[&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;RelativeTargetDirectory&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#900;font-weight:bold">relativeTargetDir:&lt;/span> cookbookDirectory&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000;font-weight:bold">[&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;CleanBeforeCheckout&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000;font-weight:bold">[&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;LocalBranch&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#900;font-weight:bold">localBranch:&lt;/span> currentBranch&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#900;font-weight:bold">userRemoteConfigs:&lt;/span> scm&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">userRemoteConfigs&lt;/span>
&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;Lint&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;windows&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
notify_stash&lt;span style="color:#000;font-weight:bold">(&lt;/span>building_pull_request&lt;span style="color:#000;font-weight:bold">)&lt;/span>
echo &lt;span style="color:#d14">&amp;#34;cookbook: ${cookbook}&amp;#34;&lt;/span>
echo &lt;span style="color:#d14">&amp;#34;current branch: ${currentBranch}&amp;#34;&lt;/span>
echo &lt;span style="color:#d14">&amp;#34;checkout directory: ${cookbookDirectory}&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">try&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
fetch&lt;span style="color:#000;font-weight:bold">(&lt;/span>scm&lt;span style="color:#000;font-weight:bold">,&lt;/span> cookbookDirectory&lt;span style="color:#000;font-weight:bold">,&lt;/span> currentBranch&lt;span style="color:#000;font-weight:bold">)&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>cookbookDirectory&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#998;font-style:italic">// clean out any old artifacts from the cookbook directory including the berksfile.lock file
&lt;/span>&lt;span style="color:#998;font-style:italic">&lt;/span> rake&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;clean&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>cookbookDirectory&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">try&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
rake&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;style&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">finally&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
step&lt;span style="color:#000;font-weight:bold">([&lt;/span>$class&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#d14">&amp;#39;CheckStylePublisher&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">canComputeNew:&lt;/span> &lt;span style="color:#000;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">defaultEncoding:&lt;/span> &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">healthy:&lt;/span> &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">pattern:&lt;/span> &lt;span style="color:#d14">&amp;#39;**/reports/xml/checkstyle-result.xml&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#900;font-weight:bold">unHealthy:&lt;/span> &lt;span style="color:#d14">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
currentBuild&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">result&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;SUCCESS&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">catch&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>err&lt;span style="color:#000;font-weight:bold">){&lt;/span>
currentBuild&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">result&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;FAILED&amp;#39;&lt;/span>
notify_stash&lt;span style="color:#000;font-weight:bold">(&lt;/span>building_pull_request&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">throw&lt;/span> err
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;Unit Test&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;windows&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">try&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
fetch&lt;span style="color:#000;font-weight:bold">(&lt;/span>scm&lt;span style="color:#000;font-weight:bold">,&lt;/span> cookbookDirectory&lt;span style="color:#000;font-weight:bold">,&lt;/span> currentBranch&lt;span style="color:#000;font-weight:bold">)&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>cookbookDirectory&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
rake&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;test:berks_install&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
rake&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;test:unit&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
currentBuild&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">result&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;SUCCESS&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">catch&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>err&lt;span style="color:#000;font-weight:bold">){&lt;/span>
currentBuild&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">result&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;FAILED&amp;#39;&lt;/span>
notify_stash&lt;span style="color:#000;font-weight:bold">(&lt;/span>building_pull_request&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">throw&lt;/span> err
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">finally&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
junit &lt;span style="color:#900;font-weight:bold">allowEmptyResults:&lt;/span> &lt;span style="color:#000;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#900;font-weight:bold">testResults:&lt;/span> &lt;span style="color:#d14">&amp;#39;**/rspec.xml&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;Functional (Kitchen)&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;kitchen&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000;font-weight:bold">try&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
fetch&lt;span style="color:#000;font-weight:bold">(&lt;/span>scm&lt;span style="color:#000;font-weight:bold">,&lt;/span> cookbookDirectory&lt;span style="color:#000;font-weight:bold">,&lt;/span> currentBranch&lt;span style="color:#000;font-weight:bold">)&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>cookbookDirectory&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
rake&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;test:kitchen:all&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
currentBuild&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">result&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;SUCCESS&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">catch&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>err&lt;span style="color:#000;font-weight:bold">){&lt;/span>
currentBuild&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#008080">result&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;FAILED&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">finally&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
notify_stash&lt;span style="color:#000;font-weight:bold">(&lt;/span>building_pull_request&lt;span style="color:#000;font-weight:bold">)&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>cookbookDirectory&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
rake&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;test:kitchen:destroy&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>currentBranch &lt;span style="color:#000;font-weight:bold">==&lt;/span> stableBranch&lt;span style="color:#000;font-weight:bold">){&lt;/span>
lock&lt;span style="color:#000;font-weight:bold">(&lt;/span>cookbook&lt;span style="color:#000;font-weight:bold">){&lt;/span>
stage &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;Promote to Supermarket&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;kitchen&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
fetch&lt;span style="color:#000;font-weight:bold">(&lt;/span>scm&lt;span style="color:#000;font-weight:bold">,&lt;/span> cookbookDirectory&lt;span style="color:#000;font-weight:bold">,&lt;/span> currentBranch&lt;span style="color:#000;font-weight:bold">)&lt;/span>
dir&lt;span style="color:#000;font-weight:bold">(&lt;/span>cookbookDirectory&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
execute &lt;span style="color:#d14">&amp;#34;git branch --set-upstream ${currentBranch} origin/${currentBranch}&amp;#34;&lt;/span>
rake&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;release&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can see here that the &lt;code>Jenkinsfile&lt;/code> is acting more like an integration point to the &lt;code>rakefile&lt;/code>. That&amp;rsquo;s how we like it; we want as much as possible to be reproducible locally. Then we walk through the stages and do the things. Here is a more detailed explanation of the stages:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Stage&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Lint&lt;/td>
&lt;td>Checks that the code meets our guidelines&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unit Test&lt;/td>
&lt;td>Runs chef unit tests on the cookbook, if any exist&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Functional (Kitchen)&lt;/td>
&lt;td>Runs test kitchen against all suites&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Promote to Supermarket&lt;/td>
&lt;td>Promotes the cookbook to an internal supermarket&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>This provides a very simple way for cookbooks to go from a checkin to the supermarket.&lt;/p>
&lt;h2 id="setting-this-up-in-jenkins">Setting this up in Jenkins&lt;/h2>
&lt;p>In Jenkins we create two builds:&lt;/p>
&lt;ol>
&lt;li>A &lt;a href="https://jenkins.io/doc/book/pipeline/">pipeline&lt;/a> build that builds off of &lt;code>master&lt;/code>. Notice that we &lt;strong>don&amp;rsquo;t&lt;/strong> use the multi-branch pipeline build at the moment, because we were having quality issues with that feature in Jenkins and wanted to test our pull requests.&lt;/li>
&lt;li>A &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Stash+pullrequest+builder+plugin">pull request&lt;/a> builder that tests pull requests in our local &lt;a href="https://www.atlassian.com/software/bitbucket">bitbucket&lt;/a> server.&lt;/li>
&lt;/ol>
&lt;p>The pull requests inside of bitbucket are set to not allow acceptance without a passing build, so this keeps our &lt;code>master&lt;/code> branch clean and ready to go. Just in case, the &lt;code>master&lt;/code> build will build everything before sending the cookbook off to the supermarket.&lt;/p>
&lt;p>You&amp;rsquo;ll also notice that the &lt;code>Jenkinsfile&lt;/code> has a lot of &lt;code>try/catch&lt;/code> logic in it. This is so the &lt;code>Jenkinsfile&lt;/code> can notify the pull request verifier that a build failed, and that message will show up inside of the pull request. So you get some complexity here, but great benefit with having nice integration with your pull request workflow.&lt;/p>
&lt;p>Once pull requests are solid, it&amp;rsquo;s now time to lock down your master branch. Don&amp;rsquo;t let a lot of people commit directly to it; instead have them submit pull requests. This follows the normal open source model that products like Chef use, and you&amp;rsquo;ll find that it works very well.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>With a solid cookbook build in place and a CI process, things start to get regularly tested and quality goes up. I had to be persuaded by my colleagues to go the pull request verifier route, but now that I have, I see what they were trying to tell me: pull requests get tested, master is solid, and your speed of delivery goes up. Maybe one day the Jenkins blue ocean project will catch up to Bitbucket integration, but until then, this works pretty nice for us.&lt;/p>
&lt;p>I&amp;rsquo;d like to also thank and credit my colleagues &lt;a href="http://kerryhouse.net/">John Kerry&lt;/a> and Richard Godbee for leading me in this direction. They spent a ton of time helping me understand how to make a good workflow in Jenkins, and the outline above would not be possible if it weren&amp;rsquo;t for their help.&lt;/p></description></item><item><title>Cookbook Development with Rakefiles</title><link>https://hedge-ops.com/cookbook-development-with-rakefile/</link><pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/cookbook-development-with-rakefile/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-cookbook-development-with-rakefile.jpg" alt="Cookbook Development Rakefile" />
&lt;/div>
&lt;p>When we &lt;a href="https://hedge-ops.com/my-advice-for-chef-in-large-corporations/">started Chef&lt;/a>, we had a loose set of rules for everyone to follow and sent them on their way. We quickly realized, however, that we needed to standardize how a cookbook met quality standards before it got released. We would try to make a simple change to a cookbook and it didn&amp;rsquo;t meet our coding standards. Or they forgot to &lt;a href="https://hedge-ops.com/test-kitchen-required-not-optional/">introduce kitchen&lt;/a>. Or they remembered but they didn&amp;rsquo;t do anything when their kitchen broke three weeks ago. It was chaos.&lt;/p>
&lt;p>Essentially our cookbooks are like any other code product: they need a build process, automated testing, and a way to release them to the outside world. Without that, you&amp;rsquo;ll have chaos and doom.&lt;/p>
&lt;p>The best way I know of to do this is with &lt;code>rake&lt;/code> (see &lt;a href="https://github.com/mhedgpeth/cafe-cookbook/blob/master/Rakefile">this example&lt;/a> on my &lt;code>cafe&lt;/code> cookbook).&lt;/p>
&lt;p>&lt;code>rake&lt;/code> has several advantages:&lt;/p>
&lt;ol>
&lt;li>It&amp;rsquo;s all in one file, using a common framework that other Ruby developers use&lt;/li>
&lt;li>It easily integrates within a chef environment using the &lt;code>chef exec&lt;/code> commands&lt;/li>
&lt;li>It integrates well into any existing pipeline or CI server&lt;/li>
&lt;/ol>
&lt;p>Its one disadvantage is that it can be difficult for non-ruby developers to understand, &lt;em>however&lt;/em>, the benefits above far outweighs this advantage. We&amp;rsquo;ve found that with the simple &lt;code>rakefile&lt;/code> below, most people don&amp;rsquo;t even have to touch their rakefile and can just use it.&lt;/p>
&lt;p>We use the same &lt;code>rakefile&lt;/code> for every cookbook, located in the base folder of the cookbook in a dedicated git repository for that cookbook. Here&amp;rsquo;s an example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">task &lt;span style="color:#990073">default&lt;/span>: &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#990073">:clean&lt;/span>, &lt;span style="color:#990073">:style&lt;/span>, &lt;span style="color:#990073">:test&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
desc &lt;span style="color:#d14">&amp;#39;Removes any policy lock files present, berks lockfile, etc.&amp;#39;&lt;/span>
task &lt;span style="color:#990073">:clean&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
&lt;span style="color:#d14">%w(
&lt;/span>&lt;span style="color:#d14"> Berksfile.lock
&lt;/span>&lt;span style="color:#d14"> .bundle
&lt;/span>&lt;span style="color:#d14"> .cache
&lt;/span>&lt;span style="color:#d14"> coverage
&lt;/span>&lt;span style="color:#d14"> Gemfile.lock
&lt;/span>&lt;span style="color:#d14"> .kitchen
&lt;/span>&lt;span style="color:#d14"> metadata.json
&lt;/span>&lt;span style="color:#d14"> vendor
&lt;/span>&lt;span style="color:#d14"> policies/*.lock.json
&lt;/span>&lt;span style="color:#d14"> commit.txt
&lt;/span>&lt;span style="color:#d14"> rspec.xml
&lt;/span>&lt;span style="color:#d14"> )&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>each { &lt;span style="color:#000;font-weight:bold">|&lt;/span>f&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#008080">FileUtils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>rm_rf(&lt;span style="color:#008080">Dir&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>glob(f)) }
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
desc &lt;span style="color:#d14">&amp;#39;Run foodcritic and cookstyle on this cookbook&amp;#39;&lt;/span>
task &lt;span style="color:#990073">style&lt;/span>: &lt;span style="color:#d14">&amp;#39;style:all&amp;#39;&lt;/span>
namespace &lt;span style="color:#990073">:style&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
&lt;span style="color:#998;font-style:italic"># Cookstyle&lt;/span>
&lt;span style="color:#000;font-weight:bold">begin&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;cookstyle&amp;#39;&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;rubocop/rake_task&amp;#39;&lt;/span>
&lt;span style="color:#008080">RuboCop&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">RakeTask&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>new(&lt;span style="color:#990073">:cookstyle&lt;/span>) &lt;span style="color:#000;font-weight:bold">do&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>task&lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#998;font-style:italic"># If we are in CI mode then add formatter options&lt;/span>
task&lt;span style="color:#000;font-weight:bold">.&lt;/span>options&lt;span style="color:#000;font-weight:bold">.&lt;/span>concat &lt;span style="color:#d14">%w(
&lt;/span>&lt;span style="color:#d14"> --require rubocop/formatter/checkstyle_formatter
&lt;/span>&lt;span style="color:#d14"> --format RuboCop::Formatter::CheckstyleFormatter
&lt;/span>&lt;span style="color:#d14"> -o reports/xml/checkstyle-result.xml
&lt;/span>&lt;span style="color:#d14"> )&lt;/span> &lt;span style="color:#000;font-weight:bold">if&lt;/span> &lt;span style="color:#008080">ENV&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;CI&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">rescue&lt;/span>
&lt;span style="color:#0086b3">puts&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;&amp;gt;&amp;gt; Gem load error: &lt;/span>&lt;span style="color:#d14">#{&lt;/span>e&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">, omitting style:cookstyle&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">unless&lt;/span> &lt;span style="color:#008080">ENV&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;CI&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#998;font-style:italic"># Load foodcritic&lt;/span>
&lt;span style="color:#000;font-weight:bold">begin&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;foodcritic&amp;#39;&lt;/span>
desc &lt;span style="color:#d14">&amp;#39;Run foodcritic style checks&amp;#39;&lt;/span>
&lt;span style="color:#008080">FoodCritic&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">Rake&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">LintTask&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>new(&lt;span style="color:#990073">:foodcritic&lt;/span>) &lt;span style="color:#000;font-weight:bold">do&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>task&lt;span style="color:#000;font-weight:bold">|&lt;/span>
task&lt;span style="color:#000;font-weight:bold">.&lt;/span>options &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#990073">fail_tags&lt;/span>:&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;any&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>,
&lt;span style="color:#990073">progress&lt;/span>: &lt;span style="color:#000;font-weight:bold">true&lt;/span>,
}
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">rescue&lt;/span> &lt;span style="color:#008080">LoadError&lt;/span>
&lt;span style="color:#0086b3">puts&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;&amp;gt;&amp;gt; Gem load error: &lt;/span>&lt;span style="color:#d14">#{&lt;/span>e&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">, omitting style:foodcritic&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">unless&lt;/span> &lt;span style="color:#008080">ENV&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;CI&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
task &lt;span style="color:#990073">all&lt;/span>: &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#990073">:cookstyle&lt;/span>, &lt;span style="color:#990073">:foodcritic&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
desc &lt;span style="color:#d14">&amp;#39;Run unit and functional tests&amp;#39;&lt;/span>
task &lt;span style="color:#0086b3">test&lt;/span>: &lt;span style="color:#d14">&amp;#39;test:all&amp;#39;&lt;/span>
namespace &lt;span style="color:#990073">:test&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
&lt;span style="color:#000;font-weight:bold">begin&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;rspec/core/rake_task&amp;#39;&lt;/span>
desc &lt;span style="color:#d14">&amp;#39;Run ChefSpec unit tests&amp;#39;&lt;/span>
&lt;span style="color:#008080">RSpec&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">Core&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">RakeTask&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>new(&lt;span style="color:#990073">:unit&lt;/span>) &lt;span style="color:#000;font-weight:bold">do&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>t&lt;span style="color:#000;font-weight:bold">|&lt;/span>
t&lt;span style="color:#000;font-weight:bold">.&lt;/span>rspec_opts &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#008080">ENV&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;CI&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> ? &lt;span style="color:#d14">&amp;#39;--format RspecJunitFormatter --out rspec.xml&amp;#39;&lt;/span> : &lt;span style="color:#d14">&amp;#39;--color --format progress&amp;#39;&lt;/span>
t&lt;span style="color:#000;font-weight:bold">.&lt;/span>pattern &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;test/unit/**{,/*/**}/*_spec.rb&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">rescue&lt;/span>
&lt;span style="color:#0086b3">puts&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;&amp;gt;&amp;gt; Gem load error: &lt;/span>&lt;span style="color:#d14">#{&lt;/span>e&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">, omitting tests:unit&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">unless&lt;/span> &lt;span style="color:#008080">ENV&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;CI&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">begin&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;kitchen/rake_tasks&amp;#39;&lt;/span>
desc &lt;span style="color:#d14">&amp;#39;Run kitchen integration tests&amp;#39;&lt;/span>
&lt;span style="color:#008080">Kitchen&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">RakeTasks&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>new
&lt;span style="color:#000;font-weight:bold">rescue&lt;/span> &lt;span style="color:#008080">StandardError&lt;/span> &lt;span style="color:#000;font-weight:bold">=&amp;gt;&lt;/span> e
&lt;span style="color:#0086b3">puts&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;&amp;gt;&amp;gt; Kitchen error: &lt;/span>&lt;span style="color:#d14">#{&lt;/span>e&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">, omitting &lt;/span>&lt;span style="color:#d14">#{&lt;/span>task&lt;span style="color:#000;font-weight:bold">.&lt;/span>name&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">unless&lt;/span> &lt;span style="color:#008080">ENV&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;CI&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
namespace &lt;span style="color:#990073">:kitchen&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
desc &lt;span style="color:#d14">&amp;#39;Destroys all active kitchen resources&amp;#39;&lt;/span>
task &lt;span style="color:#990073">:destroy&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
sh &lt;span style="color:#d14">&amp;#39;kitchen destroy&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
task &lt;span style="color:#990073">all&lt;/span>: &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;test:unit&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;test:kitchen:all&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
desc &lt;span style="color:#d14">&amp;#39;bumps the patch version and releases the cookbook to the supermarket&amp;#39;&lt;/span>
task &lt;span style="color:#990073">release&lt;/span>: &lt;span style="color:#d14">&amp;#39;release:all&amp;#39;&lt;/span>
namespace &lt;span style="color:#990073">:release&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
&lt;span style="color:#000;font-weight:bold">begin&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;bump&amp;#39;&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;bump/tasks&amp;#39;&lt;/span>
desc &lt;span style="color:#d14">&amp;#39;tags and pushes a patch change&amp;#39;&lt;/span>
task &lt;span style="color:#990073">tag&lt;/span>: &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;release:bump:patch&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
sh &lt;span style="color:#d14">&amp;#39;git pull&amp;#39;&lt;/span>
sh &lt;span style="color:#d14">&amp;#39;git push&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">rescue&lt;/span>
&lt;span style="color:#0086b3">puts&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;&amp;gt;&amp;gt; Gem load error: &lt;/span>&lt;span style="color:#d14">#{&lt;/span>e&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">, omitting release:bump*&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">unless&lt;/span> &lt;span style="color:#008080">ENV&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;CI&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;span style="color:#000;font-weight:bold">begin&lt;/span>
&lt;span style="color:#0086b3">require&lt;/span> &lt;span style="color:#d14">&amp;#39;stove/rake_task&amp;#39;&lt;/span>
&lt;span style="color:#008080">Stove&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">RakeTask&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>new
&lt;span style="color:#000;font-weight:bold">rescue&lt;/span>
&lt;span style="color:#0086b3">puts&lt;/span> &lt;span style="color:#d14">&amp;#34;&amp;gt;&amp;gt;&amp;gt; Gem load error: &lt;/span>&lt;span style="color:#d14">#{&lt;/span>e&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">, omitting operational:tag&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">unless&lt;/span> &lt;span style="color:#008080">ENV&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;CI&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
task &lt;span style="color:#990073">all&lt;/span>: &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;release:tag&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;release:publish&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As I&amp;rsquo;ve said before, you don&amp;rsquo;t really need to be able to understand every line of this &lt;code>rakefile&lt;/code> in order to make good use of it. So let&amp;rsquo;s get up to speed on that part:&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>Before running the &lt;code>rakefile&lt;/code> you&amp;rsquo;ll need to set up some gems:&lt;/p>
&lt;pre>&lt;code>chef gem install stove bump
&lt;/code>&lt;/pre>&lt;p>These gems are used for uploading to a supermarket and bumping a version, respectively. More on that below.&lt;/p>
&lt;h2 id="running-locally">Running Locally&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Function&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Command&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Lint&lt;/td>
&lt;td>Ensures that code meets standards&lt;/td>
&lt;td>chef exec rake -t style&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Test&lt;/td>
&lt;td>Ensures that code runs and is ready to go&lt;/td>
&lt;td>chef exec rake -t test&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>We run our &lt;code>rake&lt;/code> within the chef ruby environment, so we prepend it with &lt;code>chef exec&lt;/code> which says &amp;ldquo;run this with chef&amp;rsquo;s built-in ruby&amp;rdquo;. That makes everything much more consistent and easy, especially considering we&amp;rsquo;re using cookstyle and kitchen gems here.&lt;/p>
&lt;p>To run your linting, just run &lt;code>chef exec rake -t style&lt;/code>. This will run &lt;strong>both&lt;/strong> &lt;a href="https://github.com/chef/cookstyle">cookstyle&lt;/a> and &lt;a href="http://www.foodcritic.io/">foodcritic&lt;/a> on your cookbooks. We&amp;rsquo;ve found both linting tools to be helpful. Cookstyle is an more sane wrapper around rubocop.&lt;/p>
&lt;p>Another great pro tip on using &lt;code>cookstyle&lt;/code> is that you can automatically fix easy to fix errors by running &lt;code>cookstyle -a&lt;/code>. That saves a ton of time.&lt;/p>
&lt;p>Once you get past the linting phase, you can run unit tests and kitchen with &lt;code>chef exec rake -t test&lt;/code>. We consider &lt;a href="http://kitchen.ci/">test kitchen&lt;/a> to be an &lt;a href="https://hedge-ops.com/test-kitchen-required-not-optional/">absolutely critical&lt;/a> aspect of our coding process. Would you ever write code that you never ran before deploying it somewhere? If you&amp;rsquo;re not using test kitchen, that&amp;rsquo;s exactly what you&amp;rsquo;re doing!&lt;/p>
&lt;p>This &lt;code>rakefile&lt;/code> will also allow you to bump your versions automatically (&lt;code>release:bump:patch&lt;/code>) and upload to a supermarket (&lt;code>release:publish&lt;/code>). You&amp;rsquo;ll need the &lt;code>stove&lt;/code> and &lt;code>bump&lt;/code> gems installed with &lt;code>chef gem install stove bump&lt;/code>. Also you&amp;rsquo;ll need to add a &lt;code>.stove&lt;/code> file to house the configuration of how to talk to the supermarket, with these contents:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;username&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;yourusernametosupermarket&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;C:/Users/yourusername/.chef/yourusername.pem&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;no-git&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;true&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;endpoint&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;https://supermarket.yourcompany.com&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The bump and publish targets should be reserved for your CI agent most of the time.&lt;/p>
&lt;h2 id="running-with-ci">Running with CI&lt;/h2>
&lt;p>When you run this with a CI server, you&amp;rsquo;ll need set the &lt;code>CI&lt;/code> environment variable to &lt;code>true&lt;/code> so your tests will report the &amp;ldquo;CI&amp;rdquo; way. Then simply run the targets as you need. I&amp;rsquo;ll have a version of our &lt;code>Jenkinsfile&lt;/code> in the next post.&lt;/p>
&lt;h2 id="why-not-delivery-though">Why not Delivery though?&lt;/h2>
&lt;p>My friend Matt Stratton &lt;a href="https://www.mattstratton.com/post/getting-started-with-chef/">suggests&lt;/a> using Chef Delivery cookbooks to do this same thing. We didn&amp;rsquo;t go in this direction for a few reasons:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Ignorance&lt;/strong>: we don&amp;rsquo;t know delivery very well and there isn&amp;rsquo;t a community around it that can get a local build up and running quickly. Most of delivery seems to be centered around getting Chef Workflow to work, which is not something we had plans to do.&lt;/li>
&lt;li>&lt;strong>Training&lt;/strong>: more people know rake than know delivery. So rake is the easier option&lt;/li>
&lt;li>&lt;strong>Simplicity&lt;/strong>: while rake does leave you a bit confused as to the particulars of what you&amp;rsquo;re doing, it&amp;rsquo;s all in one file and can be easily run. The delivery stuff is in a hierarchy of folders and therefore takes more to understand.&lt;/li>
&lt;/ol>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Having a local cookbook build that is standard in all of our projects has become essential to our implementation of Chef at scale. I think the &lt;code>Rakefile&lt;/code> I use above is an excellent choice for standardizing in a way that is both flexible and simple.&lt;/p></description></item><item><title>Why Habitat?</title><link>https://hedge-ops.com/why-habitat/</link><pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/why-habitat/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-finding-habitat.jpg" alt="Why Habitat?" />
&lt;/div>
&lt;p>I started my career as a software engineer, and I always love creating a new application and seeing the magic of that application being deployed to production. I love seeing the excitement on our user&amp;rsquo;s faces when we talk about all the cool stuff we&amp;rsquo;re working on. And I love making that &lt;em>real&lt;/em> for people.&lt;/p>
&lt;p>Over the years, I&amp;rsquo;ve become increasingly aware of the gulf that exists between making something real on my own machine as a developer and making something real for a user of my software who is experiencing an ROI for my work. That frustration led me to tackle the problem of how to better deploy an application into production. I&amp;rsquo;ve found &lt;a href="https://www.habitat.sh/">Habitat&lt;/a> to be a compelling but often misunderstood new option within this space. In this post, I&amp;rsquo;ll describe the pros and cons of other application deployment technologies and then at the end talk about what makes me so excited about Habitat.&lt;/p>
&lt;p>Here are the various approaches to application automation, from the simplest to the most complex:&lt;/p>
&lt;h2 id="scripted">Scripted&lt;/h2>
&lt;p>In the past when we created new applications, most of us did an initial demo or deployment by running through a list of items someone needs to do to run an application in an environment that a developer didn&amp;rsquo;t build. There are files to be copied somewhere, commands to run, and validation to ensure that the application is running. In our starting scenario, people do this work manually or with custom built scripts, which become more and more complex over time.&lt;/p>
&lt;p>The problem with the &amp;ldquo;manual&amp;rdquo; or &amp;ldquo;scripted&amp;rdquo; way is that solutions end up being bespoke per application, and thus poorly maintainable. There also isn&amp;rsquo;t a really great way to know whether the script was successful. Many scripting languages will just return a code in the middle, leave the system in an unhealthy state, and just kind of shrug when failures occur.&lt;/p>
&lt;p>Also, you usually won&amp;rsquo;t do the scripted way in &lt;em>all&lt;/em> environments; just your production environment. This will create unintended surprises that lead to more brittle deployments and longer lead times to get deployments out.&lt;/p>
&lt;p>If you&amp;rsquo;re using a manual or bash/powershell scripted way to deploy applications, I highly recommend you consider a better mechanism defined below.&lt;/p>
&lt;h2 id="packaged">Packaged&lt;/h2>
&lt;p>The next obvious solution to this problem of how to get your application in production is to package the application and its files with scripts that will deploy it. This is what we considered when we evaluated &lt;a href="https://xebialabs.com/products/xl-deploy/">XL Deploy&lt;/a>. Also, in a windows-only world one could use &lt;a href="https://chocolatey.org/">Chocolatey&lt;/a> for this purpose.&lt;/p>
&lt;p>These tools really shine when deployment of a package is relatively simple and isolated. I love and use Chocolatey for third party applications, like installing ChefDK or even chrome on a new machine. The package mechanism also allows you to promote a single package through multiple environments, thus ensuring that you have better quality when you go to production.&lt;/p>
&lt;p>The packaged mechanism is almost always a better model than the pure scripted mechanism mentioned above. However, we decided not to go with this way to deploy applications because we wanted a more holistic model for how to manage the &lt;em>entire&lt;/em> machine that the application needed.&lt;/p>
&lt;p>For example, if we had an IIS machine, it&amp;rsquo;s just as important that IIS is set up properly as it is that the website files exist with a IIS website set up. If we ignore the former, there is no value in the latter.&lt;/p>
&lt;p>So for complex applications, I don&amp;rsquo;t recommend using a packaged mechanism for application deployment. I do recommend using the packaged mechanism for third party applications (and on windows, use Chocolatey), but limit its usage to isolated third party applications.&lt;/p>
&lt;h2 id="configuration-management">Configuration Management&lt;/h2>
&lt;p>Up until recently, if one were to want to take a more holistic approach to application deployment automation, the best choice was to use a configuration management tool like &lt;a href="https://www.chef.io/">Chef&lt;/a>.&lt;/p>
&lt;p>This has several advantages. First, with Chef you get a holistic machine level environment within which your application will run. So with our IIS example, you get a &lt;em>configured&lt;/em> IIS Server there upon which your application will run. You can use &lt;a href="https://hedge-ops.com/test-kitchen-required-not-optional/">Test Kitchen&lt;/a> to ensure that the entire machine will run, so you have a much better ability to test that your deployment code works early in the process. And integration testing with other third party applications is natural as well; if you have a problem with running an APM or Security tool with your application, you&amp;rsquo;ll find those problems more easily while using a configuration management approach to application automation, because you&amp;rsquo;ll more naturally be able to include all the machine dependencies into a coded, trackable artifact like a &lt;a href="https://hedge-ops.com/policyfiles/">Policyfile&lt;/a>.&lt;/p>
&lt;p>This is ultimately the path we took two and a half years ago, and I&amp;rsquo;m glad we did. The holistic approach has proven to be more difficult to execute than a simple scripted or package-based mechanism, but it also gives us consistency, which gives us higher uptime and &lt;a href="https://hedge-ops.com/our-superbowl/">ability to scale&lt;/a>.&lt;/p>
&lt;p>This approach has its drawbacks. First, it has been difficult to get our developers and QA staff to really embrace Chef for &lt;em>their&lt;/em> environments. They can&amp;rsquo;t just take a &amp;ldquo;chef&amp;rdquo; package and &amp;ldquo;run&amp;rdquo; it on a developer or QA machine for feature testing. They probably need an entire separate machine there. And they probably want it to be connected to a Chef Server. All of this overhead makes it difficult or impossible for a developer to want to use the chef deployment mechanism locally. When we get to a shared, stable QA environment or UAT environment, it&amp;rsquo;s fine. But for a QA person trying to test an app on a private local machine, Chef isn&amp;rsquo;t a very good natural choice.&lt;/p>
&lt;p>The second drawback to this approach is the distinct difference that exists between a promise-based configuration management system&amp;rsquo;s capabilities and the workflow-oriented approach that exists in a typical deployment. With deployment you&amp;rsquo;re talking about steps, like &amp;ldquo;first I upgrade the database, then I update the files, then I turn the websites on and add them back to the LB&amp;rdquo;. A &amp;ldquo;desired state&amp;rdquo; DSL like Chef, Puppet, or DSC is not a very natural way to express this. We&amp;rsquo;ve gotten around it with Chef and can get by, but the unnatural expression of workflow within a promise-based DSL has slowed down our adoption of Chef.&lt;/p>
&lt;p>For example, if I&amp;rsquo;m doing a workflow based deployment, it looks something like this:&lt;/p>
&lt;pre>&lt;code>1. Stop all services
2. Upgrade database
3. Copy files to the right locations
4. Start all services
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s relatively simple, and how most people think of an orchestrated deployment. With Chef, however, it becomes quite difficult (and this is only on one machine):&lt;/p>
&lt;pre>&lt;code>1. download the artifact file, notify 2, 3, 4 to run
2. service action: stopped (only if notified)
3. execute script 'upgrade database' (only if notified)
4. copy all files (only if notified)
5. service action: started (every time)
&lt;/code>&lt;/pre>&lt;p>If you don&amp;rsquo;t know Chef, you&amp;rsquo;re probably thoroughly confused, and that&amp;rsquo;s the point. Chef is just not very good at executing a workflow like this. You might say that Ansible or Puppet Orchestration are better at it, but the reality is that you&amp;rsquo;re still using a promise language to express a workflow problem. You&amp;rsquo;ve found a hammer and now you think everything is a nail. Is there a better way? Perhaps.&lt;/p>
&lt;h2 id="containers">Containers&lt;/h2>
&lt;p>A lot of people I meet view Docker as a lightweight virtual machine runtime mechanism. They think that Docker&amp;rsquo;s main benefits are faster uptime and lower resource consumption. Recently &lt;a href="http://www.weshigbee.com/">Wes Higbee&lt;/a> helped me understand the true benefits of Docker and how they relate to application deployment automation.&lt;/p>
&lt;p>Docker, at the surface, allows you to have the best of both worlds between packaging and configuration management above. You can create a Docker container that &lt;em>contains&lt;/em> all of the dependencies that the application needs to run into a container, and then ship that container to run on any linux environment you want. So you now have a single file, that is itself &lt;em>not&lt;/em> a script, it&amp;rsquo;s a package that is &lt;em>immediately&lt;/em> ready to run.&lt;/p>
&lt;p>This changes everything. I no longer have to worry that IIS is set up incorrectly. If I&amp;rsquo;m using a Docker container for Windows, I can use the &lt;code>microsoft\iis&lt;/code> image and build on top of it to create a fully encapsulated running application that can run on any Windows Server 2016 host.&lt;/p>
&lt;p>On top of that, I get a more lightweight runtime so I can take this image and very rapidly autoscale during peak consumption times. So in the past, I had to spin up a new server, and even if it was fully automated, I would have to wait a few minutes for that to be built. With Docker, I can have that server up in seconds, consuming less resources and therefore operating at a fraction of the cost, and then kill the server when the peak consumption time is over. Usually I&amp;rsquo;ll run a scheduler like &lt;a href="https://kubernetes.io/">Kubernetes&lt;/a>, &lt;a href="https://www.openshift.com">Open Shift&lt;/a>, or &lt;a href="https://mesosphere.com/">Mesosphere&lt;/a> to &amp;ldquo;schedule&amp;rdquo; when machines are going in and out of operations and how upgrades occur.&lt;/p>
&lt;p>When you fully grasp what containers can bring to the table for application runtime isolation and scale, it&amp;rsquo;s very easy to get caught up in the excitement of what the future can bring. However, as I think about it more, my excitement has been tempered a bit. Containers are a powerful tool that can do both great good and great harm to your business. Let&amp;rsquo;s consider a few risks:&lt;/p>
&lt;p>First, scheduled containers as mentioned above rely on an immutable infrastructure to work. In other words, if you are used to logging into a machine to look at anything, or making any manual changes at all, you&amp;rsquo;re not ready for containers. I often say to people that Packaging/Scripting is like playing Junior Varsity football, Configuration Management is like playing College Football, and Containers are like the NFL. If you&amp;rsquo;re still in JV football, you&amp;rsquo;re not going to get very far with the NFL equivalent. Yes, other companies have done it. But those companies also don&amp;rsquo;t ssh into their servers to make changes. Do you? If so you&amp;rsquo;re not ready for this. Work on becoming more mature in your processes, and then revisit it perhaps.&lt;/p>
&lt;p>A second problem with this containers approach, is that you end up isolating the application itself, which is wonderful, but you replace that isolation with an essential &lt;em>scheduler&lt;/em> component that is itself complicated and therefore prone to error. In other words, your developer may say &amp;ldquo;hey, my docker image works, what&amp;rsquo;s the problem?&amp;rdquo; and at that level there is no problem. But at the scheduler level, there might be an orchestration problem, or runtime problem. You solved your isolation problem, in effect, by replacing it with another tool that few people understand and that developers are likely not going to run themselves. Instead of having the desired effect of making deployment &lt;em>simpler&lt;/em>, it actually makes deployment more difficult, by introducing a runtime environment that allows little interactivity and troubleshooting.&lt;/p>
&lt;p>The final problem I have with containers is the latent issues of including a full stack of linux in the container image itself. I get this warning from &lt;a href="http://www.juliandunn.net/2015/12/04/the-oncoming-train-of-enterprise-container-deployments/">Julian Dunn&amp;rsquo;s blog&lt;/a>. Julian has some great points, and if you have time, read his post on the topic. The risk here is that if you include the current version of ubuntu in your docker image, and that version has security vulnerabilities inside of it that are discovered a decade from now, it&amp;rsquo;s going to be difficult to change/update those images. In Docker, an image is immutable, so you need to have a pipeline to build a new image set up if you&amp;rsquo;re doing it right. Which leads to the question: are your Docker images in production built within a continuous delivery pipeline? Are you prepared for that pipeline to be fully functional for the container&amp;rsquo;s lifespan, which could span decades? For most enterprises I&amp;rsquo;ve interacted with, it would be a huge step to go from where they are to a fully functional and operational CD pipeline. And on the startup side, do we &lt;em>really&lt;/em> trust that they will take the time to deploy docker in an immutable rebuildable way using a minimal image? I think that&amp;rsquo;s wishful thinking.&lt;/p>
&lt;p>In short, containers provide a fantastic platform for isolation of our application and for scaling it. But when you try to &lt;em>operationalize&lt;/em> the application, the complexity increases to the point that it becomes nearly impossible to pull it off without making serious ommissions that are going to bite you.&lt;/p>
&lt;p>Is there a better way? It looks like my friends at Chef have something that is quite intriguing:&lt;/p>
&lt;h2 id="habitat">Habitat&lt;/h2>
&lt;p>Last Summer, &lt;a href="https://hedge-ops.com/finding-habitat/">Chef released Habitat&lt;/a> as their application automation platform. Habitat is different in many ways to the previous categories, so much so that it deserves its own category.&lt;/p>
&lt;p>With habitat, I can script the build and execution of my application in a way that I would if I were just scripting it from scratch. But, unlike with the typical scripting mechanism, the scripting is &lt;em>build into the application&lt;/em> package itself.&lt;/p>
&lt;p>So Habitat is a package? Well it&amp;rsquo;s similar to that, yes. Habitat allows you to have a single file that represents the package. So I can provide QA the application and they can run it very quickly. Or as a developer I can run my application locally or on a container very easily. But unlike the packaging mechanisms listed above in the classic model, Habitat will isolate the package&amp;rsquo;s dependencies in order to give me the assurance that my application will run on any environment.&lt;/p>
&lt;p>Since I have that packaged deployment mechanism, I no longer need to fit the square peg (application deployment) into a round hole (configuration management). Instead, configuration management can do the things it is good at: making sure the machines on which your applications run are hardened and configured correctly. With the application deployment out of the configuration management code, the complexity drastically reduces and therefore the velocity of adoption drastically increases.&lt;/p>
&lt;p>And finally, Habitat will help you operationalize containers with a lot less complexity. It does this in two ways: First inside of its package is a &lt;em>contract&lt;/em> with other applications that will help fulfill the real-time configuration needs of a rapidly changing environment. For example, if I&amp;rsquo;m upgrading an application, I may need that application to be taken out of the load balancer, or I may need for that application to talk to a database. That sounds easy in a classic model where these things may change only occasionally, but in a containerized world, these things change within seconds. Habitat helps you manage the relationships within your applications and therefore allows you to truly operationalize microservices.&lt;/p>
&lt;p>It&amp;rsquo;s also easy to take this package and run it as a developer in a simpler model. This is the genius of packaging these services with the app: you no longer have to deal with the complexity of a scheduler, or &lt;em>something else&lt;/em> that is there. Developers never like to have to throw the kitchen sink at something to just run something. They want to run something simple and get a production-like result. Habitat is the closest thing I&amp;rsquo;ve seen to achieving this goal.&lt;/p>
&lt;p>The second thing Habitat does to lower complexity for containers is that it builds an application and all of its dependencies from scratch. This provides the isolation needed to truly make the package portable, but it also provides a declared understanding of &lt;em>what&lt;/em> an application&amp;rsquo;s dependencies are. So if there is a vulnerability in one of the dependencies, it&amp;rsquo;s as easy as querying for that dependency, and then easily rebuilding that application with the newer dependency.&lt;/p>
&lt;p>With the lower complexity for deploying applications, it&amp;rsquo;s also quite easy to increase the maturity of an application&amp;rsquo;s runtime &lt;em>without&lt;/em> having to resort to using Docker and a scheduler. This way an organization can have a more gradual strategy for taking advantage of application isolation and increase the cultural and procedural maturity needed to pull them off safely.&lt;/p>
&lt;p>For the reasons laid out in this post, I&amp;rsquo;ve become a fan of Habitat in the past six weeks that I&amp;rsquo;ve been looking at it. Habitat has a shot at changing the game for application development and delivering on the promise and profitability of Continuous Delivery of our applications. However, there are currently some drawbacks one should be aware of before going down this route. First, Habitat is in its early stages. While I would be fine with putting this into production (in fact I&amp;rsquo;m days away from doing so), the tooling is not as mature as one experiences with Docker. Therefore, an adopter will need to rely on their fantastic slack channel to get up to speed.&lt;/p>
&lt;p>The second negative to Habitat that I&amp;rsquo;ll call out is the learning curve, due to its bash-centric authoring model. There are a few abstractions I miss within Habitat. For example, when I&amp;rsquo;m telling Habitat where to find the source, I want to just give it the answer (for example, from GitHub). Instead I have to create a shell script to do some things that are not quite straightforward. Also, when I want to build an application, I want to tell it &amp;ldquo;build a node application from &lt;em>this&lt;/em> source directory&amp;rdquo;. Instead I need to copy/paste a bash script I didn&amp;rsquo;t write and change the &lt;em>right&lt;/em> things within that script. I&amp;rsquo;m told by the product team that this will be addressed within an upcoming &lt;a href="https://github.com/habitat-sh/habitat/issues/1951">blueprints feature&lt;/a>. When this feature is delivered, I will probably go from cautiously recommending it to wholeheartedly recommending it.&lt;/p>
&lt;p>The final negative to Habitat, for the next few weeks hopefully, is that there is little Windows support. Many of our applications rely on Windows to run, so our value of this platform will greatly increase when that is delivered.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>There are many approaches to application deployment automation: Scripting, Packaging, Configuration Management, Containers, and Habitat. Of them all, I believe Habitat has the greatest chance at delivering a scalable, cloud-ready, and operational application deployment mechanism that can truly realize the promise and ROI of DevOps for application developers. I highly encourage those of you interested in this topic to being following the project and contributing with feedback and implementations.&lt;/p>
&lt;p>There may be a time in the future where Chef is known more for Habitat and InSpec than for Chef, just as Apple is known more for their iPhone and iPad than their Mac. If the Habitat team delivers on the transformative vision they&amp;rsquo;ve laid out, that day will come very soon.&lt;/p></description></item><item><title>Policyfiles Update</title><link>https://hedge-ops.com/policyfiles-update/</link><pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/policyfiles-update/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-policyfiles-update.jpg" alt="Policyfiles Update" />
&lt;/div>
&lt;p>I wanted to share with you some great news &lt;a href="https://hedge-ops.com/policyfiles/">about policyfiles&lt;/a> and let you know what I&amp;rsquo;ll be up to on this blog over the next couple of months.&lt;/p>
&lt;p>Over the past six months or so, the Chef product team and I have been working together to map out our partnership. In the early days, their support and coaching &lt;a href="https://hedge-ops.com/technology-partnership/">were absolutely essential&lt;/a>, but as we&amp;rsquo;ve matured, their &lt;a href="https://www.chef.io/automate/">Chef Automate&lt;/a> product has become an essential element of operationalizing Chef at scale within our large organization.&lt;/p>
&lt;p>It was clear to me after our extensive initial discussions at Chef Community Summit in October that we weren&amp;rsquo;t going to be able to abandon Policyfiles at NCR. The change management guarantees that Policyfiles give us are too central to our approach to automation with safety. Also, I didn&amp;rsquo;t have the time to go back and train everyone on a different and more complicated way. And finally, I could see from the highly attended and engaged open space we did on Policyfiles that this topic resonated with users. I then decided to do what I could do to help Policyfiles gain traction as a feature and then try to work with Chef to see what we could do in their product.&lt;/p>
&lt;p>In January, &lt;a href="https://twitter.com/trevorghess">Trevor Hess&lt;/a> became our Customer Architect and we began working in earnest toward a solution for how to move forward. Trevor relied on his consulting experience to drill down to the essential elements of the solution and find the people that could help us. This led to Chef doing some research of their own to find out that this investment would indeed address a market need that has emerged within the last few months.&lt;/p>
&lt;p>So I&amp;rsquo;m happy to let you all know that Chef&amp;rsquo;s Product team has confirmed that viewing and filtering on Policyfile data in Chef Automate has made it onto the roadmap for this year. Over the next week or so we&amp;rsquo;ll be working on getting Policyfile data from the Chef Server to a Kibana report that others who use Policyfiles can take advantage of as well.&lt;/p>
&lt;p>The future of Automate is quite bright, and we&amp;rsquo;re thrilled to be a part of it going forward. Their investment in product management and UX is paying off tremendously. This is not the product I started with in 2014; it&amp;rsquo;s got a vision, team, and experience that is going to take Chef where it wants to go in the enterprise. I&amp;rsquo;m so happy that Policyfile users will get to take part of all that goodness.&lt;/p>
&lt;p>In May &lt;a href="http://sched.co/9vZD">I&amp;rsquo;m going to speak at ChefConf&lt;/a> on Policyfiles. In the meantime, I&amp;rsquo;m going to blog in detail about my approach to Policyfiles and Chef overall, in hopes that it will begin a movement among the Chef community to simplify the approach and thus broaden the adoption of Chef.&lt;/p>
&lt;p>As always, if you have any questions about Policyfiles, a few of us are active in the #policyfiles channel on the &lt;a href="http://community-slack.chef.io/">Chef Community Slack&lt;/a>. Let&amp;rsquo;s talk there.&lt;/p></description></item><item><title>Our Superbowl</title><link>https://hedge-ops.com/our-superbowl/</link><pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/our-superbowl/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-our-superbowl.jpg" alt="Our Superbowl" />
&lt;/div>
&lt;p>In the summer of 2014, I became convinced that NCR needed a more agile and consistent delivery process to safely enable our customers to grow their businesses beyond the four walls of the restaurant and into the new opportunities presented by mobile first consumers. While I was &lt;a href="https://hedge-ops.com/christmas-with-russians/">no stranger to continuous integration&lt;/a> and a testable pipeline for releases (what I was pleased to learn people call DevOps), I realized that our customers were not going to feel the full power of our investment into their success until we created a safe, repeatable, rapidly executable pipeline to transfer that value to them.&lt;/p>
&lt;p>I remember meeting with multiple people inside and outside of NCR who counseled me to get closer to our revenue and away from the &amp;ldquo;cost&amp;rdquo; focused operations space. I couldn&amp;rsquo;t let go of my intuition; if our customers weren&amp;rsquo;t realizing the true value of our development, then those investments are by definition worthless! So I &lt;em>had&lt;/em> to dive into this opportunity and work to change the game for our customers and NCR&amp;rsquo;s future.&lt;/p>
&lt;p>That future became the present just a few short weeks ago on a Sunday evening. A key customer wanted to go all-in with an online ordering promotion for the Super Bowl this Sunday. They demanded capacity from us that went beyond our ability to provide by just adding a few more machines. We decided to best serve this customer and all of our customers that we were going to build another production environment from the ground up on one of our most complicated but strategically important SaaS products.&lt;/p>
&lt;p>When I started this journey, this would have been an unthinkable level of risk. But since our forward thinking leadership invested in our partnership with Chef, the new environment was provisioned in a fraction of the time that we expected, and with full safety and consistency that we needed to be confident that we could meet our targets. When our customer did stress tests, the product team was able to quickly react to any issues and we had the confidence that we were going to increase stability through rapid change.&lt;/p>
&lt;p>At one point on Sunday evening, we ran into a snag with our deployment. We had a problem with Chef that would have blocked us from moving forward. I got on slack and asked a member of my customer success team, Thomas Cate, for help. He directed me to customer support. &lt;strong>Within ten minutes of filing the issue, Zach Zondlo, on a Sunday evening at 8PM Central Time, responded and got on our conference bridge to help us out.&lt;/strong> The problem was resolved in ten minutes. That experience alone was a mic drop moment for our partnership with Chef. The people at Chef know how important operations is and culturally assign the priority and dedication that high severity situations warrant.&lt;/p>
&lt;p>As we approach the big day on Sunday with a customer who will grow their revenue in a way they couldn&amp;rsquo;t have imagined just a few short years ago, I&amp;rsquo;m reminded of how my our partnership with Chef has meant to NCR and to me personally.&lt;/p>
&lt;p>I&amp;rsquo;m reminded of the early days when Matt Stratton believed that we could do this, even when I wondered how we were going to get everyone on board with such an ambitious and forward thinking plan.&lt;/p>
&lt;p>I&amp;rsquo;m reminded of the patient and understanding ear Justin Redd gave me as he walked me through the difficult and frustrating early days where I had to get so much operational alignment from so many people in order to make Chef a reality in production. Justin never came to me with a formula. He and his team listened, and helped us down a path that was &lt;strong>good for us first&lt;/strong>. They knew if we succeeded they would succeed.&lt;/p>
&lt;p>I&amp;rsquo;m reminded of my newfound respect for sales and my long strategic conversations with Brittany Shaeffer. Brittany has helped me realize that value needs connection to be realized. So many times those of us with an engineering background think that technical outcomes will just stand on their own merits to the business. The sales organization at Chef does a phenomenal job at helping me make that value a reality for all stakeholders, so the business can provide the fuel necessary achieve a high velocity delivery model.&lt;/p>
&lt;p>And I&amp;rsquo;m reminded of my friend Nathen Harvey who welcomed this BigCorp Texan into a world in which I felt more than a little out of place. I was only months into my Chef journey and for some reason submitted a talk to ChefConf that was accepted. By the time I got there I was completely convinced that I didn&amp;rsquo;t belong there. Nathen personally welcomed me into the Chef Community and showed me that I belonged there. I found this spirit of acceptance and inclusion so compelling that I felt safe enough to introduce &lt;a href="http://www.anniehedgie.com">my wife Annie&lt;/a> into it. And the community has shown a tremendous amount of &lt;a href="http://www.anniehedgie.com/leaning-in">respect and support&lt;/a> to Annie which has already had a profound affect on our future.&lt;/p>
&lt;p>I&amp;rsquo;m so happy to have gotten to this milestone in our partnership with Chef. I&amp;rsquo;m so happy to have leadership that believed in the vision and gave me the freedom and resources to execute that vision. I&amp;rsquo;m fortunate to know so many people within NCR that were able to take a chance and believe in what we were trying to accomplish. It truly takes a village to get anything done in a large organization, and I&amp;rsquo;m fortunate to be a part of a great one.&lt;/p>
&lt;p>Our partnership with Chef is only beginning. As we scale our solution to use Chef Automate, secure our expansion with Compliance, and add even more of our product suites to Chef, we&amp;rsquo;re confident that the best is yet to come!&lt;/p></description></item><item><title>Policyfile Attributes</title><link>https://hedge-ops.com/policyfile-attributes/</link><pubDate>Mon, 14 Nov 2016 08:00:00 +0000</pubDate><guid>https://hedge-ops.com/policyfile-attributes/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-policyfile-attributes.jpg" alt="Policyfile Attributes" />
&lt;/div>
&lt;p>When you start with &lt;a href="https://hedge-ops.com/policyfiles/">policyfiles&lt;/a> you quickly fall in love with the simplicity of the workflow and how easy it is to learn and teach. However, you&amp;rsquo;re also faced with an apparent show-stopper to adoption: there are lots of community cookbooks out there that expect certain attributes to be in certain locations. It can be quite confusing; I&amp;rsquo;m sure it&amp;rsquo;s kept a lot of people from adopting the feature. So let&amp;rsquo;s get that one out of the way in this post.&lt;/p>
&lt;p>We&amp;rsquo;ll take the use cases from easiest to most difficult:&lt;/p>
&lt;h1 id="define-attributes-within-policyfile">Define Attributes within Policyfile&lt;/h1>
&lt;p>Many times you&amp;rsquo;ll come across a community cookbook that expects attributes to be defined for it to properly run, like with the &lt;code>apache&lt;/code> cookbook.&lt;/p>
&lt;p>If the behavior of your cookbook doesn&amp;rsquo;t change very often, you can declare those attributes in your &lt;code>Policyfile.rb&lt;/code> if you want to:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># in Policyfile.rb&lt;/span>
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;apache2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#990073">listen_ports&lt;/span>: &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;80&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;443&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That will get you by for simple situations, but if you&amp;rsquo;re dealing with a half a dozen or more policies that use this cookbook, this will get very repetitive, and therefore error prone. My rule is if you repeat yourself more than three times then &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">you need to do something about it&lt;/a>.&lt;/p>
&lt;h1 id="define-attributes-within-wrapper-cookbook">Define Attributes within Wrapper Cookbook&lt;/h1>
&lt;p>In this case, I would create a wrapper cookbook called &lt;code>mycompany-apache&lt;/code> and define the attributes there. Then I can use that recipe in my runlist for all of my policies.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># in mycompany-apache/attributes/default.rb&lt;/span>
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;apache2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#990073">listen_ports&lt;/span>: &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;80&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;443&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In fact, as a rule of thumb I generally try to keep attributes out of my policyfiles. It&amp;rsquo;s great for smaller cases, and if you just have a few and are getting started, by all means do it, but it creates an unmaintainable mess if you have a lot of machines that need to run against the same attributes.&lt;/p>
&lt;p>As time has gone on, I think of Policyfiles as defining &lt;em>what&lt;/em> chef scripts should run on a node and something else to handle the configuration elements that those scripts need.&lt;/p>
&lt;h1 id="define-environment-specific-attributes-in-the-policyfile">Define Environment-specific Attributes in the Policyfile&lt;/h1>
&lt;p>With most if not all attributes now removed from my policyfiles, I come across a good reason to include them again: I need to have environment-specific settings that my cookbooks use. For example, let&amp;rsquo;s say that I need to use &lt;code>testdatabase&lt;/code> for my &lt;code>qa&lt;/code> environment and &lt;code>proddatabase&lt;/code> for my &lt;code>production&lt;/code> environment.&lt;/p>
&lt;p>You can do this pretty easily with Policyfiles:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># in Policyfile.rb&lt;/span>
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;qa&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;myapplication&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;database&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;testdatabase&amp;#39;&lt;/span>
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;production&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;myapplication&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;database&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;productiondatabase&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now in my recipe code I can simply write:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># in recipes/default.rb&lt;/span>
database &lt;span style="color:#000;font-weight:bold">=&lt;/span> node&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#008080">Chef&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>policy_group&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;myapplication&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;database&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is, frankly, how most of our applications work with Policyfiles. This has been good enough for us and therefore is what we went for. Since then, we&amp;rsquo;ve come across other use cases which cause us to go further:&lt;/p>
&lt;h1 id="define-environment-specfic-attributes-in-the-policyfile-consume-them-as-normal-attributes">Define Environment-specfic Attributes in the Policyfile, Consume Them As Normal Attributes&lt;/h1>
&lt;p>One of the major drawbacks of the previous section is the need to change your code to deal with the &lt;code>policy_group&lt;/code> within the hash to get to your value. This is fine if you&amp;rsquo;re starting from scratch like I did, but that won&amp;rsquo;t work for everyone. Thankfully &lt;a href="https://coderanger.net/">code ranger&lt;/a> and friends created the &lt;a href="https://github.com/poise/poise-hoist">poise-hoist&lt;/a> cookbook, which handles a lot of the translation for you.&lt;/p>
&lt;p>In order to do this, just add &lt;code>poise_hoist&lt;/code> to the &lt;code>run_list&lt;/code> of your &lt;code>Policyfile.rb&lt;/code>.&lt;/p>
&lt;p>Then, assuming you have the structure from the previous section, you&amp;rsquo;ll be able to get the database without using the &lt;code>policy_group&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># in recipes/default.rb, now using poise_hoist&lt;/span>
database &lt;span style="color:#000;font-weight:bold">=&lt;/span> node&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;myapplication&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;database&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you were using environments before and that kept you from using Policyfiles, &lt;strong>you now no longer have any excuse.&lt;/strong> Yes, that&amp;rsquo;s right: &lt;strong>you can use Policyfiles without changing a line of code by using the &lt;code>poise_hoist&lt;/code> cookbook!&lt;/strong>&lt;/p>
&lt;h1 id="define-role-specific-attributes-in-the-policyfile-consume-them-as-normal-attributes">Define Role-specific Attributes in the Policyfile, Consume Them As Normal Attributes&lt;/h1>
&lt;p>The same workflow we used above to migrate from environments can be used with our roles as well.&lt;/p>
&lt;p>We should first understand that roles don&amp;rsquo;t exist within policyfiles. To accomplish the same end, we use a wrapper cookbook that encapsulates everything we want that role to do.&lt;/p>
&lt;p>For example you could have a base role that you want everything to follow by creating a &lt;code>mycompany-platform&lt;/code> cookbook. Its default recipe could be something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># in mycompany-platform/recipes/default.rb&lt;/span>
include_recipe &lt;span style="color:#d14">&amp;#39;logging_provider::default&amp;#39;&lt;/span>
include_recipe &lt;span style="color:#d14">&amp;#39;chef-client::default&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In that same cookbook you could also define attributes that control your cookbooks:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># in mycompany-platform/attributes/default.rb&lt;/span>
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;chef-client&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;interval&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#099">3600&lt;/span>
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;logging_provider&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;url&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;http://insanely-expensive.io&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have some elements that change by environment, use the techniques above to do that: &lt;code>poise-hoist&lt;/code> will merge those elements into the places that your recipes will expect to look. For example, for the above section of code, if you wanted to make it environment specific, you would write:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># in Policyfile.rb&lt;/span>
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;qa&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
chef&lt;span style="color:#000;font-weight:bold">-&lt;/span>&lt;span style="color:#990073">client&lt;/span>: {
&lt;span style="color:#990073">interval&lt;/span>: &lt;span style="color:#099">900&lt;/span>
}
&lt;span style="color:#990073">logging_provider&lt;/span>: {
&lt;span style="color:#990073">url&lt;/span>: &lt;span style="color:#d14">&amp;#39;http://test-cheaply.io&amp;#39;&lt;/span>
}
}
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;production&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
chef&lt;span style="color:#000;font-weight:bold">-&lt;/span>&lt;span style="color:#990073">client&lt;/span>: {
&lt;span style="color:#990073">interval&lt;/span>: &lt;span style="color:#099">3600&lt;/span>
}
&lt;span style="color:#990073">logging_provider&lt;/span>: {
&lt;span style="color:#990073">url&lt;/span>: &lt;span style="color:#d14">&amp;#39;http://insanely-expensive.io&amp;#39;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="support-lots-of-environments-across-lots-of-policyfiles-with-data-bags">Support Lots of Environments Across Lots of Policyfiles with Data Bags&lt;/h1>
&lt;p>The techniques outlined above work well for applications that have a minimal number of roles and environments. For example, we have one application with a web and application tier and three different environments. For that we have our attributes declared in the &lt;code>application-webserver.rb&lt;/code> and &lt;code>application-appserver.rb&lt;/code> policyfiles and then flow those policyfiles through our pipeline from &lt;code>qa&lt;/code> to &lt;code>uat&lt;/code> and finally to &lt;code>production&lt;/code> policy groups.&lt;/p>
&lt;p>This starts to fall apart when you need a lot of roles (or policyfiles) use environment-specific attributes. At first glance you might be tempted to create new policy groups, like:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># probably not a good idea&lt;/span>
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;qa&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#990073">my_application&lt;/span>: {
&lt;span style="color:#990073">database&lt;/span>: &lt;span style="color:#d14">&amp;#39;qaserver&amp;#39;&lt;/span>
}
}
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;michael-performance&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#990073">my_application&lt;/span>: {
&lt;span style="color:#990073">database&lt;/span>: &lt;span style="color:#d14">&amp;#39;mhperdb&amp;#39;&lt;/span>
}
}
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;mary-testing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#990073">my_application&lt;/span>: {
&lt;span style="color:#990073">database&lt;/span>: &lt;span style="color:#d14">&amp;#39;marydb&amp;#39;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You&amp;rsquo;ll encounter a huge problem right away in that you have to copy and maintain these complex structures across a lot of policyfiles. That&amp;rsquo;s a recipe for something to go very wrong.&lt;/p>
&lt;p>Instead, we will offload the attributes definitions here to &lt;a href="https://docs.chef.io/data_bags.html">data bags&lt;/a>. So we&amp;rsquo;ll have different data bags per environment:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;filename&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;environment_michael-performance.json&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;my_application&amp;#34;&lt;/span>: {
&lt;span style="color:#000080">&amp;#34;database&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;mhperdb&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we&amp;rsquo;ll still keep &lt;code>michael-performance&lt;/code> as the &lt;code>policy_group&lt;/code> for the node, but we&amp;rsquo;ll not define any of the attributes in the Policyfile, but instead define them in the &lt;code>environment_michael-performance&lt;/code> data bag.&lt;/p>
&lt;p>Before the application cookbook runs, we can merge what is in the data bag into our node attributes by borrowing what the &lt;a href="https://github.com/poise/poise-hoist/blob/master/lib/poise_hoist.rb#L38">poise-hoist cookbook does&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># I haven&amp;#39;t run this but hopefully you get the idea&lt;/span>
environment &lt;span style="color:#000;font-weight:bold">=&lt;/span> data_bag_item(&lt;span style="color:#d14">&amp;#39;myapplication&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#34;environment-&lt;/span>&lt;span style="color:#d14">#{&lt;/span>&lt;span style="color:#008080">Chef&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>policy_group&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">&amp;#34;&lt;/span>)
&lt;span style="color:#008080">Chef&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">Mixin&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">DeepMerge&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>hash_only_merge!(node&lt;span style="color:#000;font-weight:bold">.&lt;/span>role_default, environment)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will, as before, make it so you can have Policyfiles and largely the same code as before because you were able to bring the environment data in from another source and merge it.&lt;/p>
&lt;h1 id="multi-dimensional-attributes-with-data-bags-and-policyfiles">Multi-Dimensional Attributes with Data Bags and Policyfiles&lt;/h1>
&lt;p>We have a couple of products that take this even further. You might have two dimensions of settings: in America, you one service and in Europe you use another. This is true for all environments, but the environments have their own distinct settings.&lt;/p>
&lt;p>In this situation you can create two different types of data bags: &lt;code>environment-uat&lt;/code> but also a &lt;code>american-services&lt;/code> and &lt;code>european-services&lt;/code>. Then you could have nodes know which environment they&amp;rsquo;re in and load the appropriate settings.&lt;/p>
&lt;p>You would have a couple of data bags:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;filename&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;american-services&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;weather&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;american-weather-services.com&amp;#34;&lt;/span>
}
{
&lt;span style="color:#000080">&amp;#34;filename&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;european-services&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;weather&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;letempsenfrance.fr&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you can merge that in as normal, based on timezone, or whichever element fits your situation:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">service &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#008080">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>now()&lt;span style="color:#000;font-weight:bold">.&lt;/span>gmt_offset &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#099">0&lt;/span> &lt;span style="color:#000;font-weight:bold">?&lt;/span> &lt;span style="color:#d14">&amp;#39;american&amp;#39;&lt;/span> : &lt;span style="color:#d14">&amp;#39;european&amp;#39;&lt;/span>
service_settings &lt;span style="color:#000;font-weight:bold">=&lt;/span> data_bag_item(&lt;span style="color:#d14">&amp;#39;my_application&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#d14">#{&lt;/span>service&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">-services&amp;#34;&lt;/span>)
&lt;span style="color:#008080">Chef&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">Mixin&lt;/span>&lt;span style="color:#000;font-weight:bold">::&lt;/span>&lt;span style="color:#008080">DeepMerge&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>hash_only_merge!(node&lt;span style="color:#000;font-weight:bold">.&lt;/span>role_default, service_settings)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The long term solution for much of this is to define it within a service discovery product like Consul. But that requires learning and adopting another thing, which will probably slow down getting the wins you&amp;rsquo;ll need early on to be successful. Get what you need to get done here, and then adopt other things that work for you one step at a time.&lt;/p>
&lt;h1 id="policyfile-nirvana---infrastructure-versions-decoupled-from-scripts">Policyfile Nirvana - Infrastructure Versions Decoupled from Scripts&lt;/h1>
&lt;p>When we start with policyfiles, as with the first few use cases above, we tend to put a lot of information in the policyfiles themselves. As things get more complicated, we start to shy away from that because it creates maintainability problems. I&amp;rsquo;ve grown in my usage of policyfiles to think of &lt;strong>policyfiles as a mechanism for getting the right versions of the chef recipes on the node to simply run them.&lt;/strong> That&amp;rsquo;s where they really shine; they&amp;rsquo;re an excellent dependency management/workflow simplification feature. They&amp;rsquo;re NOT going to shine for the other things.&lt;/p>
&lt;p>So when I have a version of a website change and therefore need for my scripts to change the file they&amp;rsquo;re using to load that website onto a webserver, I shouldn&amp;rsquo;t use the policyfile for that. Instead I can use the &lt;em>same&lt;/em> policyfile (or version of scripts) to download and install a &lt;em>new&lt;/em> version of my website.&lt;/p>
&lt;p>In this case, I&amp;rsquo;ve probably moved to the data bags based definition of what that website is:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;filename&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;environment-qa.json&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;website&amp;#34;&lt;/span>: {
&lt;span style="color:#000080">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;1.0.2&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I&amp;rsquo;m going to upgrade that database, I probably want to just upgrade the data bag. The script remains the same.&lt;/p>
&lt;p>This, to me, is a nirvana situation. I&amp;rsquo;m running stable scripts/recipes in all environments and am changing small elements of how they run to respect what environment they&amp;rsquo;re in. I&amp;rsquo;ve avoided duplication and therefore increased operatability of the solution.&lt;/p>
&lt;p>So, take a lesson from me, if you&amp;rsquo;re dealing with a complex system with a lot of node types, decouple your application version from the scripts that are running. Your CI/CD pipeline will simplify and it will be simpler to know what changed, why, and how it affects your situation.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>If you follow the techniques outlined above, you&amp;rsquo;ll have no issue with migrating to Policyfiles. You&amp;rsquo;ll need to make sure that there is a solid business case for it. I think you&amp;rsquo;ll find that the return from better change management and easier operatability will more than pay for the costs you&amp;rsquo;ll incur from using the techniques above.&lt;/p></description></item><item><title>Policyfiles</title><link>https://hedge-ops.com/policyfiles/</link><pubDate>Wed, 02 Nov 2016 08:00:00 +0000</pubDate><guid>https://hedge-ops.com/policyfiles/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-policyfiles.jpg" alt="Policyfiles" />
&lt;/div>
&lt;p>Recently at the &lt;a href="https://summit.chef.io/seattle/">Chef Community Summit&lt;/a>, I proposed a topic on &lt;a href="https://docs.chef.io/policyfile.html">Policyfiles&lt;/a>. Policyfiles are a new way to handle dependency and change management for your Chef infrastructure. During the session it became clear that there wasn&amp;rsquo;t enough information out there on how and why to use Policyfiles. I realized that an introduction to Policyfiles for the Chef Community was far overdue and committed to the session that I would market the feature through this blog post and future podcast episode on the Food Fight Show.&lt;/p>
&lt;h1 id="why-policyfiles">Why Policyfiles?&lt;/h1>
&lt;p>Early on in my Chef adoption, &lt;a href="https://hedge-ops.com/my-advice-for-chef-in-large-corporations/">it became clear that I couldn&amp;rsquo;t deliver on the strict change management controls within the legacy Chef workflow without a lot of work&lt;/a>. With the traditional Chef workflow, you can update a cookbook in production and all of the sudden all of your nodes are running different code. Was it tested this way before? Well let&amp;rsquo;s hope so! &amp;ldquo;Let&amp;rsquo;s hope so&amp;rdquo; doesn&amp;rsquo;t cut it when you&amp;rsquo;re dealing with an enterprise as large and complicated as NCR. Our entire business rests on the trust our customers put into us to securely handle their financial transactions.&lt;/p>
&lt;p>&lt;strong>With Policyfiles you can guarantee that the exact same cookbooks that ran in earlier environments will run in later environments.&lt;/strong> You get real change management that is inuitive and doesn&amp;rsquo;t leave you trying to explain the intricacies of Chef dependency management in an outage call. &lt;strong>It just works.&lt;/strong>&lt;/p>
&lt;p>Another benefit we get out of Policyfiles is &lt;strong>it makes Chef easy to learn&lt;/strong>. Rather than burdening the user with a complex structure of roles, cookbooks, environments, and pinning, I can simply show them a Policyfile and show them the workflow I outline below. This greatly speeds up time I spend teaching my colleagues Chef. I challenge the Chef veterans who are reading this to explain Chef to someone using the workflow outlined below and watch the magic: you&amp;rsquo;ll see that they really get it at the end, and they went from nothing to a working solution far more quickly than you&amp;rsquo;re used to.&lt;/p>
&lt;p>That adoption cost has a real effect on the future of Chef. If there are less people in the community due to high barriers to entry, there are less &lt;a href="https://supermarket.chef.io">community cookbooks&lt;/a> and less opportunities for Chef Inc. to monetize the platform and therefore invest more into it. So, even if you have already defined complicated workarounds that address the deficiencies in the legacy workflow, I encourage you to adopt and support it in situations it makes sense. Keep an open mind.&lt;/p>
&lt;h1 id="policyfile-workflow">Policyfile Workflow&lt;/h1>
&lt;p>The best way to understand the Policyfile feature is by walking through an example. We&amp;rsquo;ll configure a webserver for one of our apps with Policyfiles.&lt;/p>
&lt;h2 id="policyfilerb-file">Policyfile.rb file&lt;/h2>
&lt;p>The first thing we&amp;rsquo;ll start with is the &lt;code>Policyfile.rb&lt;/code> itself. &lt;strong>A Policyfile declares the name, run list, sources, and attributes for a node or group of nodes.&lt;/strong>&lt;/p>
&lt;p>Though &lt;code>Policyfile.rb&lt;/code> is the default name for the policyfile, you can name it whatever you want. On our projects, there are usually many Policyfiles: we could have &lt;code>myapp-webserver.rb&lt;/code> and &lt;code>myapp-database.rb&lt;/code>. The name that you use has to be unique in your Chef server.&lt;/p>
&lt;p>If you&amp;rsquo;re just starting out, the Policyfile will go in your application&amp;rsquo;s cookbook repo. As you advance, you&amp;rsquo;ll probably want to separate it into its own repository, because the frequent revisions of the lock file outlined below will clutter up your history. At this point we have about half and half Policyfiles in cookbooks vs. their own repository.&lt;/p>
&lt;h3 id="creating-the-policyfile">Creating the Policyfile&lt;/h3>
&lt;p>It&amp;rsquo;s always good to start out with a generated policyfile to make the adoption a little easier. There are two ways to do this:&lt;/p>
&lt;p>First you could generate the Policyfile directly:&lt;/p>
&lt;pre>&lt;code>chef generate policyfile Policyfile.rb
&lt;/code>&lt;/pre>&lt;p>Or you can add the &lt;code>-P&lt;/code> flag to the &lt;code>chef generate cookbook&lt;/code> command:&lt;/p>
&lt;pre>&lt;code>chef generate cookbook myapp -P
&lt;/code>&lt;/pre>&lt;p>Either way you have a Policyfile generated and ready to go.&lt;/p>
&lt;h3 id="basic-contents">Basic Contents&lt;/h3>
&lt;p>Once the Policyfile is generated, it should look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#0086b3">name&lt;/span> &lt;span style="color:#d14">&amp;#39;webserver&amp;#39;&lt;/span> &lt;span style="color:#998;font-style:italic"># will be used later in Client.rb on the Node&lt;/span>
default_source &lt;span style="color:#990073">:supermarket&lt;/span>, &lt;span style="color:#d14">&amp;#39;https://supermarket.mycompany.com&amp;#39;&lt;/span> &lt;span style="color:#998;font-style:italic"># this uses only internal cookbooks&lt;/span>
run_list &lt;span style="color:#d14">&amp;#39;recipe[myapp::webserver]&amp;#39;&lt;/span> &lt;span style="color:#998;font-style:italic"># the run list of recipes; won&amp;#39;t contain roles&lt;/span>
&lt;span style="color:#998;font-style:italic"># where to find cookbooks that are outside of the default_source&lt;/span>
cookbook &lt;span style="color:#d14">&amp;#39;myapp&amp;#39;&lt;/span>, &lt;span style="color:#990073">git&lt;/span>: &lt;span style="color:#d14">&amp;#39;https://git.mycompany.com/devops/myapp&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s go over the elements:&lt;/p>
&lt;table>
&lt;tr>
&lt;th>Element&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>used to reference this policyfile on the Chef server and it must be unique. As I said above, you probably want to come up with a naming convention for your Policies. We use &lt;code>applicationname-role.rb&lt;/code> for ours (like &lt;code>myapp-webserver&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>default_source&lt;/td>
&lt;td>This is where we get all of our cookbooks if they're not specifically declared in the lower section. This will usually be a supermarket.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>run_list&lt;/td>
&lt;td>In this model you don't declare a &lt;code>run_list&lt;/code> on the client itself. This maintains consistency between environments.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cookbook&lt;/td>
&lt;td>declares the non-default location where chef can find this cookbook. In this case we'll find it on the git server.&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h3 id="environment-specific-settings">Environment-specific settings&lt;/h3>
&lt;p>Pretty quickly you&amp;rsquo;ll run into situations where you have environment specific settings. This is better avoided if at all possible; one possible solution is &lt;a href="https://youtu.be/TEvElu6Wnbc">to use Consul&lt;/a> to deal with environment-specific settings. However, &lt;a href="https://hedge-ops.com/all-or-nothing-changes/">it&amp;rsquo;s also important to make progress&lt;/a>, so you&amp;rsquo;ll probably want to declare the settings in a structure that includes the &lt;code>policy_group&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># in the Policyfile:&lt;/span>
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;qa&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#990073">myapp&lt;/span>: {
&lt;span style="color:#990073">database&lt;/span>: &lt;span style="color:#d14">&amp;#39;qaserver01&amp;#39;&lt;/span>
}
}
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;uat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#990073">myapp&lt;/span>: {
&lt;span style="color:#990073">database&lt;/span>: &lt;span style="color:#d14">&amp;#39;uatdbsrv32&amp;#39;&lt;/span>
}
}
default&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;production&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> {
&lt;span style="color:#990073">myapp&lt;/span>: {
&lt;span style="color:#990073">database&lt;/span>: &lt;span style="color:#d14">&amp;#39;proddbsrv62&amp;#39;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then in our recipe code we can reference the &lt;code>policy_group&lt;/code> and easily get to our setting:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">database &lt;span style="color:#000;font-weight:bold">=&lt;/span> node&lt;span style="color:#000;font-weight:bold">[&lt;/span>node&lt;span style="color:#000;font-weight:bold">.&lt;/span>policy_group&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;myapp&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;database&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or you could take it one step closer and include the &lt;a href="https://github.com/poise/poise-hoist">poise-hoist&lt;/a> cookbook in your &lt;code>run_list&lt;/code> and simply write:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#998;font-style:italic"># with poise-hoist, you can&amp;#39;t tell if you&amp;#39;re using policyfiles&lt;/span>
database &lt;span style="color:#000;font-weight:bold">=&lt;/span> node&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;myapp&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">][&lt;/span>&lt;span style="color:#d14">&amp;#39;database&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to learn about this in more detail, check out &lt;a href="https://hedge-ops.com/policyfile-attributes/">my follow up post&lt;/a> that dives into this more deeply.&lt;/p>
&lt;h2 id="creation-of-the-policyfilelockjson-file">Creation of the Policyfile.lock.json file&lt;/h2>
&lt;p>Now that you have a declaration of what you want to run on a machine and your environment-specific settings declared, it&amp;rsquo;s time to create a point in time snapshot of &lt;em>specific&lt;/em> dependencies Chef will use on a node. This is your actual policy and it is stored in your &lt;code>Policyfile.lock.json&lt;/code> file. This is the file that your node will read to pull dependencies down and run them locally.&lt;/p>
&lt;p>To generate your &lt;code>Policyfile.lock.json&lt;/code> file, run:&lt;/p>
&lt;pre>&lt;code>rm Policyfile.lock.json # remove any old lockfiles first
chef install Policyfile.rb
&lt;/code>&lt;/pre>&lt;p>This generates the following important attributes at the top of the file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#d14">&amp;#34;revision_id&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">:&lt;/span> &lt;span style="color:#d14">&amp;#34;6156a875a7c0eb06ce9gdc9e3d4f19809752942efd6dd20888ddd9fd8bbbd43b5&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">,&lt;/span>
&lt;span style="color:#d14">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">:&lt;/span> &lt;span style="color:#d14">&amp;#34;platform&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">,&lt;/span>
&lt;span style="color:#d14">&amp;#34;run_list&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">:&lt;/span> [
&lt;span style="color:#d14">&amp;#34;recipe[platform::default]&amp;#34;&lt;/span>
]&lt;span style="color:#a61717;background-color:#e3d2d2">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;tr>
&lt;th>Attribute&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;tr>
&lt;td>revision_id&lt;/td>
&lt;td>This is a &lt;b>very&lt;/b> important field, that will tell you what version of the policy you are running on the chef server and during your chef run. By committing the &lt;code>Policyfile.lock.json&lt;/code> file to source, you'll always be able to view &lt;b>exactly&lt;/b> what runs on the node by referring back to the version of this file by this revision.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>The policy name, which you will declare as a node attribute to declare which policy the node uses. This is the "logical" connection to the policy.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>run_list&lt;/td>
&lt;td>A fully expanded list of recipes that will run. With this generation there is no doubt over what will run. This is a major benefit of this over using roles or environments, where there can be a doubt, and thus confusion and potential disaster.&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>Later down the file, we can see the output for one of our cookbooks:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#d14">&amp;#34;windows&amp;#34;&lt;/span>&lt;span style="color:#a61717;background-color:#e3d2d2">:&lt;/span> {
&lt;span style="color:#000080">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;1.40.0&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;identifier&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;54a9b2515c853919c4953893997899584d4cefba&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;dotted_decimal_identifier&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;23830481377985849.7253019596134776.168604533059514&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;cache_key&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;windows-1.40.0-supermarket.mycompany.com&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;origin&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;https://supermarket.mycompany.com:443/api/v1/cookbooks/windows/versions/1.40.0/download&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;source_options&amp;#34;&lt;/span>: {
&lt;span style="color:#000080">&amp;#34;artifactserver&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;https://supermarket.mycompany.com:443/api/v1/cookbooks/windows/versions/1.40.0/download&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;1.40.0&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can see here that there is a very specific declaration of the dependency for the cookbook. This is in the policyfile so if we wanted to regenerate all dependencies from this &lt;code>Policyfile.lock.json&lt;/code>, we can do so as long as we still have connectivity to the repositories on which the dependencies are stored. It&amp;rsquo;s important to also note that the &lt;code>identifier&lt;/code> here &lt;em>also&lt;/em> doubles as a checksum of the cookbook contents. If the contents change, but &lt;strong>nothing else&lt;/strong> changes, then &lt;code>chef-client&lt;/code> will refuse to run the policy. This is a tamper-proof mechanism that increases your ability to predict what code will run on your servers.&lt;/p>
&lt;p>Remember, we are running this code with elevated privileges, so if you&amp;rsquo;re running in production, it&amp;rsquo;s incredibly important to predict what will happen. &lt;strong>You can&amp;rsquo;t easily predict outcomes without policyfiles.&lt;/strong>&lt;/p>
&lt;h2 id="pushing-it-to-the-chef-server">Pushing it to the Chef Server&lt;/h2>
&lt;p>Now that we have a lockfile built, it&amp;rsquo;s time to make the policy active for our nodes. If our nodes, Chef Server, and development machine are all on the same network, we can simply push the policy to the Chef Server directly. If you&amp;rsquo;re doing this within CI and it&amp;rsquo;s possible on another agent or at another time, you&amp;rsquo;ll want to run &lt;code>chef install&lt;/code> first to ensure the cookbooks are locally cached. The &lt;code>chef install&lt;/code> command will &lt;em>not&lt;/em> replace the lockfile if it already exists.&lt;/p>
&lt;pre>&lt;code>chef install Policyfile.rb # to ensure dependencies are loaded
chef push qa Policyfile.rb
&lt;/code>&lt;/pre>&lt;p>This will push the policy and all dependencies declared in the lockfile to the Chef Server for the &lt;code>qa&lt;/code> policy group. Once you run this command, you can guarantee that you can run it on a node. No more remembering to upload a specific dependency; it&amp;rsquo;s simply there for you to run and will include the exact same cookbooks that are in the lockfile.&lt;/p>
&lt;p>The &lt;code>qa&lt;/code> above is your policy group. &lt;strong>A policy group, similar to an environment, is a logical group of nodes that you want to have the same policy.&lt;/strong> Since many times you&amp;rsquo;ll be using the same Chef Server to manage multiple environments, you&amp;rsquo;ll want to split your nodes into different policy groups so you can make sure that you are flowing policy changes through a pipeline before they get to production.&lt;/p>
&lt;p>Also note that you should &lt;em>never&lt;/em> run the &lt;code>chef update&lt;/code> command. Results of this are not easily predicatable, so I&amp;rsquo;ve stayed away from it. If you need to regenerate a lockfile, remove the old one and run &lt;code>chef install&lt;/code>. If you want to push the policy, ensure that the dependencies are loaded with &lt;code>chef install&lt;/code> and then push it with &lt;code>chef push&lt;/code>.&lt;/p>
&lt;h2 id="setting-up-chef-client">Setting up Chef Client&lt;/h2>
&lt;p>To get your node to have the appropriate policy name and group, you need to update its attributes. The easiest way to do this is when bootstrapping the node itself:&lt;/p>
&lt;pre>&lt;code>knife bootstrap mywebserver --policy-group qa --policy-name webserver
&lt;/code>&lt;/pre>&lt;p>If you, like me, have a node-centric bootstrapping mechanism, your bootstrapper will need to update node attributes using the &lt;code>-j&lt;/code> flag. First create attributes with the &lt;code>policy_name&lt;/code> and &lt;code>policy_group&lt;/code> in them:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a61717;background-color:#e3d2d2">#&lt;/span> &lt;span style="color:#a61717;background-color:#e3d2d2">attributes.json&lt;/span>
{
&lt;span style="color:#000080">&amp;#34;policy_name&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;webserver&amp;#34;&lt;/span>,
&lt;span style="color:#000080">&amp;#34;policy_group&amp;#34;&lt;/span>: &lt;span style="color:#d14">&amp;#34;qa&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then run:&lt;/p>
&lt;pre>&lt;code>chef-client -j attributes.json
&lt;/code>&lt;/pre>&lt;p>From there your node will use that policy.&lt;/p>
&lt;p>I used to manually add the settings to &lt;code>client.rb&lt;/code> directly, but now know that this is bad because it will mean I have to manually update them again if I ever need to change it. Setting them in the node attributes directly allows me to change them remotely on the Chef Server.&lt;/p>
&lt;h2 id="packaging-it-for-air-gapped-environments">Packaging it for Air Gapped environments&lt;/h2>
&lt;p>You&amp;rsquo;re not always going to have a connected Chef Server available and may need to transfer your policy to an Air-Gapped environment. Policyfiles make this process incredibly easy because they package all dependencies into one file. To do this, start by running:&lt;/p>
&lt;pre>&lt;code>chef export Policyfile.rb . -a
&lt;/code>&lt;/pre>&lt;p>This will export the all cookbooks listed in the &lt;code>Policyfile.lock.json&lt;/code> and the lockfile itself into a single archive. Now you can transfer this file to the air-gapped environment however you are used to doing so.&lt;/p>
&lt;p>This is an essential element of the benefits to Policyfiles in a security-conscious environment: &lt;strong>You get to keep the same controls you have in place while you begin implementing Chef!&lt;/strong> Yes, eventually you&amp;rsquo;ll do a CI/CD pipeline like &lt;a href="https://docs.chef.io/workflow.html">Chef Workflow&lt;/a> but &lt;strong>don&amp;rsquo;t let that get in the way of getting value out of Chef!&lt;/strong> That&amp;rsquo;s the absolute worst thing you could do. Create value early and often. Work around your existing controls and change the parts that you have buy-in to change. Repeat that and soon enough you&amp;rsquo;ll be in a good place.&lt;/p>
&lt;p>Once you&amp;rsquo;ve generated the archive and transferred the file to your air-gapped environment, it&amp;rsquo;s time to load it up on the Chef Server, you can run:&lt;/p>
&lt;pre>&lt;code>chef push-archive qa Policyfile-6156a875a7c0eb06ce9gdc9e3d4f19809752942efd6dd20888ddd9fd8bbbd43b5.tar.gz
&lt;/code>&lt;/pre>&lt;p>Again, we&amp;rsquo;re declaring a policy group here, but this is pretty much the same as the &lt;code>chef push&lt;/code> command above. Your policy is active for that policy group on the Chef Server, and you can rest assured that all cookbooks are there ready to be used.&lt;/p>
&lt;h2 id="pipeline-management">Pipeline management&lt;/h2>
&lt;p>We&amp;rsquo;re going to want to add this workflow to a pipeline that we can manage in Jenkins or TeamCity. The process will roughly consist of:&lt;/p>
&lt;ol>
&lt;li>Cookbook builds, which include running Test Kitchen, ChefStyle linting, etc.&lt;/li>
&lt;li>Promotion to an internal supermarket (if you have one)&lt;/li>
&lt;li>Updating pinned versions of those cookbooks in the Policyfile or in specific cookbooks through a pull request&lt;/li>
&lt;li>Whenever the Policyfile.rb changes, or on demand, or when dependencies complete, rebuild the &lt;code>Policyfile.lock.json&lt;/code> file and check it in&lt;/li>
&lt;li>Push the &lt;code>Policyfile.lock.json&lt;/code> file to the Chef Server for locally available resources. If there is a pipeline, push to one policy group at a time and make sure they work before pushing out even further.&lt;/li>
&lt;li>If there isn&amp;rsquo;t a Chef Server connected to your build environment, post the policyfile archive to be loaded by your air-gapped environment. Much of this can be automated, but you&amp;rsquo;ll find that there is a step where you have to physically deal with the air-gapped environment (by definition).&lt;/li>
&lt;/ol>
&lt;h2 id="which-policy-is-active">Which Policy is Active?&lt;/h2>
&lt;p>As I said before, this revision id that is generated as a part of your lockfile will be the single identifier for this policy from here on out. So to see which policy is active you can simply run:&lt;/p>
&lt;pre>&lt;code>chef show-policy webserver
&lt;/code>&lt;/pre>&lt;p>Which will generate:&lt;/p>
&lt;pre>&lt;code>webserver
========
* qa: 6156a875a7
&lt;/code>&lt;/pre>&lt;p>Here you have the first ten characters of your revision id, and it is clear the exact versioin of the policy that is active for the &lt;code>qa&lt;/code> group. If you&amp;rsquo;re checking in your lockfiles through a pipeline, this revision id should be stored with your lockfile in your git repo and thus you can understand when it was created. You have a great understanding of the exact changes that went into your environment.&lt;/p>
&lt;p>Similarly, when you run &lt;code>chef-client&lt;/code>, you see exactly the revision id and policy that is used:&lt;/p>
&lt;pre>&lt;code>PS D:\chef&amp;gt; chef-client
Starting Chef Client, version 12.11.18
Using policy 'webserver' at revision '6156a875a7c0eb06ce9gdc9e3d4f19809752942efd6dd20888ddd9fd8bbbd43b5'
&lt;/code>&lt;/pre>&lt;p>So at all levels you have repeatability and traceability of all changes.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>The Chef Community should adopt Policyfiles because they are easier to learn than the legacy workflow, give you better control change management, and are more flexible for security-concious implementations. Hopefully this blog post will serve as an impetus for broader adoption of the feature and eventual inclusion into the Automate product suite.&lt;/p></description></item><item><title>Chef with Windows</title><link>https://hedge-ops.com/chef-with-windows/</link><pubDate>Mon, 24 Oct 2016 08:00:00 +0000</pubDate><guid>https://hedge-ops.com/chef-with-windows/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-chef-with-windows.jpg" alt="Chef with Windows" />
&lt;/div>
&lt;p>Recently &lt;a href="https://discourse.chef.io/t/chef-in-a-windows-monoculture-success-examples/9733/7">Peter Burkholder asked in the community&lt;/a> whether anyone was doing Chef at scale in a Windows environment and what lessons were learned along the way to make that happen. While we at NCR are certainly &lt;em>not&lt;/em> the first windows-oriented business to utilize Chef at scale, &lt;a href="https://www.youtube.com/watch?v=ZG3OZologLU&amp;amp;t=45s">we are doing it&lt;/a> and I have a lot of experience and ideas that could be helpful to others. Many of those ideas have been solidified as &lt;a href="http://www.anniehedgie.com">my wife&lt;/a> has been recently working with a lot of Microsoft-oriented people and I&amp;rsquo;ve had to explain the culture to her.&lt;/p>
&lt;p>At first adopting a non-Microsoft technology can feel daunting. No matter where you go within the Microsoft landscape there is either a competing Microsoft-endorsed technology or one that is rumored to be in on its way. So you get a lot of people who will see that something isn&amp;rsquo;t from them and just dismiss it outright.&lt;/p>
&lt;p>Another hurdle to overcome is that people within this culture view open source as chaotic and expensive. Many people outside of the Microsoft ecosystem view open source as a driver for innovation and thus tolerate the chaos that happens when trying to get it to work. People who have spent their careers with Microsoft technologies don&amp;rsquo;t think that way; they want it to work, be intuitive, documented, and they want to get someone on the phone if something goes wrong.&lt;/p>
&lt;p>For these reasons, in an organization that has heavily invested in Microsoft, I would &lt;strong>not&lt;/strong> start with the awesomeness of the technology. This will get you nowhere. Instead, &lt;strong>it all boils down to the business case for the proposed change&lt;/strong>. Do we need to do configuration management with Chef or do we need to use System Center or some other related technology? It&amp;rsquo;s a great question and probably one that should be considered through deep investigation.&lt;/p>
&lt;p>Find the business case by demonstrating that the current process isn&amp;rsquo;t working either by keeping costs high (usually labor) or delaying business opportunities (usually new development). The more you can get on the right side of that business case, the better time everyone will have.&lt;/p>
&lt;p>So if the business is using GPOs for managing configuration state on the active directory, then do a compliance scan against your nodes and see how they line up with the CIS benchmark for Windows Server 2012. Oh wait&amp;hellip;it&amp;rsquo;s total chaos. Why? Hint: people are using remote desktop to make your system unmanageable by making one-off changes&amp;hellip;everywhere. Another hint: this is absolute insanity.&lt;/p>
&lt;p>Keep digging.&lt;/p>
&lt;p>Can you get a machine up and running quickly? Why not? Would chef help with that?&lt;/p>
&lt;p>If you need to configure a third party tool like monitoring or logging, can you do that effectively? Sure it&amp;rsquo;s great when all you do is Microsoft and it all fits together nicely, but is that realistic?&lt;/p>
&lt;p>What happens to your operations costs when we take away the UI when looking at the Microsfot stack (or even Windows Server 2016)? They will go way down, but you&amp;rsquo;re not going to get there without automation.&lt;/p>
&lt;p>Do you want to go to Azure? Do you realize that going to azure without an automation plan is like buying a tank, driving around a city (your business) and pushing random buttons? It&amp;rsquo;s going to cause damage if you don&amp;rsquo;t have a radical change towards automation. In other words, the problems you have been facing related to scale do not have anything to do with the fact that you had to call Dell before to get hardware racked. It&amp;rsquo;s everything after that too! So will System Center help you there?&lt;/p>
&lt;p>The answers to all these questions, as with many technologies, is&amp;hellip;maybe Microsoft is the best way, but usually not. That&amp;rsquo;s another quite irritating aspect of Microsoft stuff. It can do everything. It solves everyone&amp;rsquo;s problems. So when you&amp;rsquo;re in this environment look at the results! Don&amp;rsquo;t let the Microsoft sales person or the single excited Microsoft-solves-all-problems person get you sucked into ignoring common sense for your business. &lt;strong>If the tools you are using don&amp;rsquo;t drive you to the outcomes you want, then consider changing the tools and the culture behind those tools (the people).&lt;/strong>&lt;/p>
&lt;p>The real question is &lt;strong>what level of support do you need to get these things done?&lt;/strong> I think Microsoft is a fantastic platform for enterprise-level development and they have an excellent cloud solution for enterprises. But they also have a long legacy and entire culture centered around the message that you can do IT with little training and a few button clicks. By the way, &lt;a href="https://www.youtube.com/watch?v=3Uvq38XOark">this is the exact culture that Jeffrey Snover has fought for years and years&lt;/a>. Snover has done great things, but it&amp;rsquo;s important to remember that the culture he fought still exists, is going strong, and, even worse, is feeling threatened right now.&lt;/p>
&lt;p>So as a business who do you want to align with? Sure, you have a strong and great history with Microsoft and an entire staff that knows about it. But you also need a partnership with another company to get you to where you want to be in above opportunities. Chef is an excellent choice in this regard. You have a whole group of people at Chef Inc. who really get Microsoft (like &lt;a href="http://www.hurryupandwait.io/">Matt Wrock&lt;/a>, &lt;a href="http://stevenmurawski.com/">Steve Murawski&lt;/a>, and &lt;a href="http://stuartpreston.net/">Stuart Preston&lt;/a> (a partner), &lt;a href="http://www.theubergeekgirl.com/">Jessica DeVita&lt;/a>, &lt;a href="https://twitter.com/trevorghess?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">Trevor Hess&lt;/a> (a partner) to name a few). This core brings Windows into the Chef ecosystem as a first class citizen. They advocate for DSC and align themselves with PowerShell/Snover. It&amp;rsquo;s a fantastic Windows configuration management platform.&lt;/p>
&lt;p>Also for a large 100+ node organization the other sell is that having a relationship with Chef gets you access to those best practices and people to accelerate the transformation. The consulting I&amp;rsquo;ve gotten from Chef regarding my approach is probably more valuable than the software itself because it has been absolutely critical to get us to the point where we can take advantage of the software.&lt;/p>
&lt;p>Now that we&amp;rsquo;ve covered the most important thing, the outcomes, let&amp;rsquo;s talk a little about technology: what about linux?&lt;/p>
&lt;p>If you focus on the business outcomes, create an early adopter groundswell of support, then the linux question should solve itself. If it doesn&amp;rsquo;t &lt;a href="https://hedge-ops.com/the-technical-asshole-curse/">someone is being an asshole&lt;/a>. If that&amp;rsquo;s true take them to lunch and understand their needs, then incorporate that into your overall strategy. If they still don&amp;rsquo;t listen then by this point they&amp;rsquo;re clearly being an asshole, so make that reality visible to leadership and work towards getting around that person. The fact of the matter is that a company whose leadership is incapable of taking advantage of fantastic strategic and ROI business opportunities because of a few people who can&amp;rsquo;t handle learning another OS is not one with a bright future. Someone at some level should be able to see this.&lt;/p>
&lt;p>If they fail to see it after all that, then you are indeed on a sinking ship. That would be quite depressing if there weren&amp;rsquo;t so many non-sinking ships all around you that will embrace and love what you&amp;rsquo;re doing. In fact, &lt;a href="https://www.ncr.com/careers">you should come work with me at NCR&lt;/a>. :)&lt;/p></description></item><item><title>Migrating from Chef Analytics to Chef Visibility</title><link>https://hedge-ops.com/analytics-to-visibility/</link><pubDate>Sun, 16 Oct 2016 08:00:00 +0000</pubDate><guid>https://hedge-ops.com/analytics-to-visibility/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-analytics-to-visibility.jpg" alt="Analytics to Visibility" />
&lt;/div>
&lt;p>The other day I was at lunch with my customer architect at Chef. We were talking about our situation. Our reference architecture fits Chef&amp;rsquo;s reference architecture from about a year ago, which consists of a Chef Server and an Analytics Server as the core solution. Change takes a while, so I had been delaying setting up a Chef Automate environment before I got some other things accomplished.&lt;/p>
&lt;p>However, at lunch we both were convinced that a &lt;a href="https://docs.chef.io/visibility.html">Chef Visibility node&lt;/a> could easily replace a Chef Analytics node and set our teams up better for where Chef is going. We would set the server up in a POC mode which would mean we had no real backup plan, but that&amp;rsquo;s OK because we are not really using Chef Analytics in a useful way.&lt;/p>
&lt;p>This strategy is pretty typical of one I&amp;rsquo;ve used lately: &lt;strong>let people see what you&amp;rsquo;re talking about and interact with it, even if it&amp;rsquo;s not in the &amp;ldquo;perfect final state&amp;rdquo;&lt;/strong>. Then, with experience as a guide, take the next step to do it the &amp;ldquo;right&amp;rdquo; way. We will likely end up with a central Visibility server but I don&amp;rsquo;t want to risk everything just to make that happen. So we set this up instead and move things forward.&lt;/p>
&lt;p>After the discussion with my customer architect, &lt;a href="https://www.linkedin.com/in/thomas-cate-9b63a28">Thomas Cate&lt;/a> helped me come up with this guide. I wrote everything down and thought it might be good to share with the community, in case anyone else was thinking of going this way.&lt;/p>
&lt;h1 id="migration-steps">Migration Steps&lt;/h1>
&lt;p>This will migrate an existing Chef Analytics Server to a Chef Visibility Server in POC mode.&lt;/p>
&lt;h2 id="back-up-your-keys-on-the-analytics-server">Back up your keys on the analytics server&lt;/h2>
&lt;p>We&amp;rsquo;re getting ready to uninstall Analytics, but we want to keep the keys because we&amp;rsquo;ll use them later.&lt;/p>
&lt;ul>
&lt;li>Find the key location in &lt;code>/etc/opscode-analytics/opscode-analytics.rb&lt;/code>. The keys will likely be located in &lt;code>/etc/pki/tls/certs&lt;/code> and &lt;code>/etc/pki/tls/private&lt;/code>&lt;/li>
&lt;li>Back up the keys to &lt;code>~/cert-backup&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="clean-and-uninstall-chef-analytics">Clean and uninstall Chef Analytics&lt;/h2>
&lt;p>Let&amp;rsquo;s get rid of analytics now:&lt;/p>
&lt;ul>
&lt;li>Run &lt;code>opscode-analytics-ctl cleanse&lt;/code>&lt;/li>
&lt;li>Run &lt;code>opscode-analytics-ctl stop&lt;/code>&lt;/li>
&lt;li>Remove the package &lt;code>yum remove opscode-analytics&lt;/code>&lt;/li>
&lt;li>Run &lt;code>sudo rm -rf /opt/opscode-analytics&lt;/code>&lt;/li>
&lt;li>Reboot server &lt;code>sudo reboot now&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="remove-analytics-from-the-chef-server">Remove Analytics from the Chef Server&lt;/h2>
&lt;p>On the Chef Server,&lt;/p>
&lt;ul>
&lt;li>open &lt;code>/etc/opscode/chef-server.rb&lt;/code> and comment out ocid for analytics&lt;/li>
&lt;li>run &lt;code>chef-server-ctl reconfigure&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="install-automate">Install Automate&lt;/h2>
&lt;ul>
&lt;li>Navigate to the &lt;a href="https://downloads.chef.io/automate/">downloads page&lt;/a> and copy the appropriate link&lt;/li>
&lt;li>On the Analytics Server, wget that link to download it to the user home, for example: &lt;code>wget https://packages.chef.io/stable/el/7/delivery-0.5.370-1.el7.x86_64.rpm&lt;/code> for my CentOS box&lt;/li>
&lt;li>Install the package, on CentOS: &lt;code>sudo rpm -Uvh delivery-0.5.370-1.el6.x86_64.rpm&lt;/code>. When it asks you to configure the Delivery Server, say no&lt;/li>
&lt;/ul>
&lt;h2 id="set-up-licensing">Set up Licensing&lt;/h2>
&lt;p>You&amp;rsquo;ll need to get a &lt;code>delivery.license&lt;/code> from a friend at Chef. You also get your pem key for your Chef Server as a one-time use to authenticate to it and add workflow stuff. I&amp;rsquo;m not using that, so this was not really needed, but you know, we do it anyways.&lt;/p>
&lt;ul>
&lt;li>Run &lt;code>sudo delivery-ctl setup --license ~/delivery.license --key ~/[your-name].pem --server-url https://[your-chef-server]/organizations/[your-org] --fqdn analytics.[your-domain].com&lt;/code>&lt;/li>
&lt;li>When it asks for an organization, use your company name. The organization can be the same for different visibility servers. In fact, one can argue in this situation it&amp;rsquo;s quite useless; it&amp;rsquo;s more for multitenancy.&lt;/li>
&lt;/ul>
&lt;p>You should probably copy the &lt;code>server-url&lt;/code> from your &lt;code>knife.rb&lt;/code> file.&lt;/p>
&lt;h2 id="finalize-installation">Finalize installation&lt;/h2>
&lt;ul>
&lt;li>run &lt;code>sudo delivery-ctl reconfigure&lt;/code>&lt;/li>
&lt;li>check that the settings in &lt;code>/etc/delivery/delivery.rb&lt;/code> are good (especially the FQDN)&lt;/li>
&lt;/ul>
&lt;h2 id="set-up-certificates">Set up certificates&lt;/h2>
&lt;p>Now it&amp;rsquo;s time to reuse your certificates that you backed up earlier.&lt;/p>
&lt;ul>
&lt;li>Put the ssl certs in place &lt;code>/var/opt/delivery/nginx/ca&lt;/code> - &lt;strong>Important:&lt;/strong> these files need to same name as what is there by default. So you should copy by name and change the file name of what you had before.&lt;/li>
&lt;li>Restart nginx &lt;code>sudo delivery-ctl restart nginx&lt;/code>&lt;/li>
&lt;li>Make sure it&amp;rsquo;s working with &lt;code>delivery-ctl status&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="set-up-an-admin-user">Set up an Admin User&lt;/h2>
&lt;ul>
&lt;li>Run &lt;code>delivery-ctl create-enterprise [enterprise] --ssh-pub-key-file=/etc/delivery/builder_key.pub&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This will generate user information that will be output to your command line:&lt;/p>
&lt;pre>&lt;code>Created enterprise: companyname
Admin username: admin
Admin password: blahblahblah
Builder Password: blahblahblah-2
Web login: https://analytics.mycompany.com/e/companyname/
&lt;/code>&lt;/pre>&lt;p>Navigate to that web login and you should see the automate login. Login with &amp;ldquo;admin&amp;rdquo; and the password it gives you.&lt;/p>
&lt;h2 id="set-up-more-users">Set up more users&lt;/h2>
&lt;p>At this point you can change the admin password to something you can remember and add users. This has to be separate from the Chef Server because there are many Chef Servers to one Visibility Server. Well, not in this case, but that&amp;rsquo;s the design.&lt;/p>
&lt;p>So you have two options:&lt;/p>
&lt;ol>
&lt;li>Set up a bunch of users manually&lt;/li>
&lt;li>Set up LDAP authentication following &lt;a href="https://docs.chef.io/integrate_delivery_ldap.html">these directions&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="configure-data-collector-on-chef-visibility-server">Configure Data Collector on Chef Visibility server&lt;/h2>
&lt;p>Now I&amp;rsquo;m going to set up a token for configuring a data collector for my clients to talk to the Chef Visiblity server:&lt;/p>
&lt;ul>
&lt;li>Create a Guid (on PowerShell I ran: &lt;code>[guid]::NewGuid()&lt;/code>)&lt;/li>
&lt;li>Add data collector configuration to &lt;code>/etc/delivery/delivery.rb&lt;/code>:
&lt;code>data_collector['token'] = 'my-guid-here'&lt;/code>&lt;/li>
&lt;li>Run &lt;code>sudo delivery-ctl reconfigure&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="configure-chef-server-to-report-to-visibility">Configure Chef Server to report to Visibility&lt;/h2>
&lt;p>You&amp;rsquo;ll also need &lt;a href="https://docs.chef.io/setup_visibility_chef_automate.html#configure-chef-server-to-send-server-object-data">the Chef Server to report to Visibility&lt;/a>. To do this:&lt;/p>
&lt;ul>
&lt;li>Add the following settings to &lt;code>/etc/opscode/chef-server.rb&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">data_collector&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;root_url&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;https://my-automate-server.mycompany.com/data-collector/v0/&amp;#39;&lt;/span>
data_collector&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#d14">&amp;#39;token&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#39;TOKEN&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configure-chef-client-to-report-to-visiblity">Configure Chef Client to report to Visiblity&lt;/h2>
&lt;p>You&amp;rsquo;ll need to make sure your Chef-Client is on a fairly recent version. For me I need to update chef-client in my infrastructure to 12.15.19 for this to work properly. I had some problems on an earlier version.&lt;/p>
&lt;p>Now that we&amp;rsquo;re on the latest, let&amp;rsquo;s configure the &lt;code>data_collector&lt;/code> on the node in the &lt;code>client.rb&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">data_collector&lt;span style="color:#000;font-weight:bold">.&lt;/span>server_url &lt;span style="color:#d14">&amp;#34;https://analytics.yourcompany.ncr/data-collector/v0/&amp;#34;&lt;/span>
data_collector&lt;span style="color:#000;font-weight:bold">.&lt;/span>token &lt;span style="color:#d14">&amp;#34;guid-from-previous-step&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configure-notification-replacement-for-analytics">Configure Notification replacement for Analytics&lt;/h2>
&lt;p>We were taking advantage of the notifications in Chef Analytics and needed a replacement. My colleague has written &lt;a href="https://github.com/jkerry/SimpleSlackHandler">a slack notifier report handler&lt;/a> for Chef that we&amp;rsquo;re now using.&lt;/p>
&lt;h1 id="initial-thoughts-on-visibility">Initial Thoughts on Visibility&lt;/h1>
&lt;p>First of all, I&amp;rsquo;m really impressed with the Chef team for thinking out of the box and getting me on their new platform in a way that works for me. This underscores once again why they&amp;rsquo;re a great partner: &lt;strong>Chef doesn&amp;rsquo;t show up with an inflexible agenda; they listen, find the &lt;em>right&lt;/em> solution, and then execute.&lt;/strong>&lt;/p>
&lt;p>My first impressions of the product are that it looks very nice and clean. I can tell Chef has hired some UX people. :)&lt;/p>
&lt;p>Visibility definitely has room to grow but it&amp;rsquo;s an exciting start to a great platform for making Chef operable at scale within the enterprise. While some in the open source community might elect to roll their own reporting platform for Chef-related stuff, to us that&amp;rsquo;s the path pain and discomfort, because we realize that we&amp;rsquo;ll never have the funding that Chef has to deliver this. And they like hearing from people like me give them feedback. So to me that&amp;rsquo;s the best of both worlds.&lt;/p>
&lt;p>I don&amp;rsquo;t like how the Visibility product is tied to workflow, though. I can understand how Chef wants to sell an all-in-one solution, but to me it&amp;rsquo;s better to design your products with as little coupling as possible so they can be independent. From their perspective, it may make sense; keep things simple so your support can be focused in one direction.&lt;/p>
&lt;p>I&amp;rsquo;m really glad I converted my Chef Analytics server to a Visibility server. Hopefully this helps you do the same.&lt;/p></description></item><item><title>Finding Habitat</title><link>https://hedge-ops.com/finding-habitat/</link><pubDate>Wed, 15 Jun 2016 07:39:22 +0000</pubDate><guid>https://hedge-ops.com/finding-habitat/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-finding-habitat.jpg" alt="Finding Habitat" />
&lt;/div>
&lt;p>A few months ago I caught up with Julian Dunn in Ghent about what he was up to. His &lt;a href="https://www.youtube.com/watch?v=kfF9IATUask">talk on orchestration&lt;/a> was instrumental in forming &lt;a href="https://hedge-ops.com/orchestration-maturity-model-with-chef/">our approach&lt;/a> to solving the problem with Consul and his &lt;a href="http://www.juliandunn.net/2015/12/04/the-oncoming-train-of-enterprise-container-deployments/">blog post on docker&lt;/a> showed me he was thinking deeply and critically about some interesting topics. I reached out to him to learn more about what he was up to and spent some time with him to learn about Habitat.&lt;/p>
&lt;p>When I learned that Fletcher Nichol was also working on the project, I got even more excited. Fletcher&amp;rsquo;s work on &lt;a href="http://kitchen.ci/">Test Kitchen&lt;/a> has &lt;a href="https://hedge-ops.com/test-kitchen-required-not-optional/">revolutionized our workflow&lt;/a>. Recently, I saw it lower the barrier to entry for &lt;a href="http://www.anniehedgie.com/">my wife&lt;/a> to learn Chef. There really is a &amp;ldquo;before Kitchen&amp;rdquo; and &amp;ldquo;after Kitchen&amp;rdquo; epoch in her learning. It&amp;rsquo;s that revolutionary. And to see that Fletcher was focusing on this problem as well was quite exciting.&lt;/p>
&lt;p>&lt;a href="https://www.chef.io/blog/2016/06/14/introducing-habitat/">Adam Jacob&amp;rsquo;s blog post &lt;/a> left me both intrigued me and a little confused. I wanted to understand what Habitat was and how it fit into Chef&amp;rsquo;s infrastructure and strategy. So I watched the event and got on twitter and had a fun time figuring it out.&lt;/p>
&lt;p>It was clear to me even from my early talks with Julian that Habitat was a disruptive technology. This is yet another reason why &lt;a href="https://hedge-ops.com/technology-partnership/">Chef is such a good partner for us&lt;/a>. I can trust them to prioritize &lt;em>the right solution&lt;/em> for me over whether this will help their sales numbers this quarter. That trust drives sales higher than other companies because navigating this journey is difficult and we need people on our side who will tell us the hard truths on how to arrive at our destination. So kudos to Chef and its leadership for being so brave to make this step that says &amp;ldquo;there&amp;rsquo;s another aspect to the problem that could be better, here&amp;rsquo;s what we think&amp;rdquo;&lt;/p>
&lt;p>Unfortunately, the initial message of Habitat didn&amp;rsquo;t resonate with me. I feel that it suffered from a few flaws that hurt it&amp;rsquo;s ability to resonate with enterprise customers like me:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>You&amp;rsquo;re doing it wrong&lt;/strong>. I reread the narrative about the siloed enterprise and the big web and am still struggling to understand it. What I felt initially is &amp;ldquo;how you have been approaching the problem of configuration management is all wrong.&amp;rdquo; I&amp;rsquo;m honestly not sure whether that should have been the feeling I got because honestly I still don&amp;rsquo;t understand the narrative they were going for. I do know that a good pitch to enterprise people &lt;em>should not&lt;/em> start with the message &amp;ldquo;your organization is fundamentally improperly structured&amp;rdquo; People don&amp;rsquo;t like to hear that. And even if they agree, there is nothing they can do about it. The message (intended or not) isn&amp;rsquo;t necessary because Habitat doesn&amp;rsquo;t ask you to change any of that (see my revised message below).&lt;/li>
&lt;li>&lt;strong>Here is a Cool Solution.&lt;/strong> And it is. You put some really great people on this project for months or more, I expect it to be cool. But from an enterprise perspective its coolness carries little weight on whether it will help us solve the problems we are having. I would have preferred some discussion on what outcomes the team was able to accomplish as they partnered with an early customer, preferably from the enterprise. What did they do? Is it better? Why? Without this context it was difficult to put the solution in context.&lt;/li>
&lt;li>&lt;strong>Context?&lt;/strong> This was the part I struggled with the most. How does Habitat fit into the Chef ecosystem? Where does it start and Chef begin? What problems does it solve that &lt;em>both&lt;/em> products could solve? Why would I choose one over the other? It was difficult to understand, especially over the medium of twitter where characters are limited and tone isn&amp;rsquo;t easily communicated.&lt;/li>
&lt;/ul>
&lt;p>Am I still excited about Habitat? Absolutely! After talking with a few people and with Julian for 15 minutes or so, I can now think about it in terms that make sense to me that I can share with others in our organization. In the spirit of providing alternatives when sharing problems, &lt;strong>here&amp;rsquo;s the pitch I would give if someone in my organization would ask me about it today&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>Chef&amp;rsquo;s has done an outstanding job with configuration management of infrastructure. This is why they are our partner. They have built upon that core competency with a reporting product to see what&amp;rsquo;s happening and a delivery product to manage changes. On top of that (and most importantly for us), they even help make your infrastructure more secure by helping you scan your infrastructure for security vulnerabilities and use Chef to remediate them. With Chef it is very easy to get a secure, hardened infrastructure configured for your business.&lt;/p>
&lt;p>That&amp;rsquo;s not all you want to do, though. You want applications &lt;em>running&lt;/em> on that infrastructure. And it turns out when you start down this path, things get complicated quickly. You face problems that aren&amp;rsquo;t &lt;em>really&lt;/em> configuration management problems like orchestration or service discovery. You have to figure out how to scale. And you have an application team that wants to focus on &lt;em>those issues&lt;/em> rather than configure a specific machine to run. They might even insist on &lt;em>not&lt;/em> running a production-like machine for their development by insisting that they use docker to speed up development. How do you engage the application team in a way that helps them own their solution and use it, then deliver that automation to a broader ecosystem in a meaningful way?&lt;/p>
&lt;p>Enter Habitat. With Habitat, your application team can define availability, upgrade, red/green deployments, and other application-level-concerns and package that &lt;em>with the application&lt;/em> and deliver it to their target environments. This means that Chef can focus what it&amp;rsquo;s good at: configuration management of the infrastructure. A habitat package can live as a docker container on a development machine, a minimal QA environment, or as a full-blown linux node which was also configured using Chef.&lt;/p>
&lt;p>It&amp;rsquo;s tempting to try to find the one solution that will solve all of your problems. Many times that leaves you doing &lt;em>a lot of work&lt;/em> as you try to solve a problem with a solution that was not meant to solve those types of problems. Instead, it&amp;rsquo;s totally fine to have a solution to the application&amp;rsquo;s problems and a different solution for the infrastructure problems. As long as both solutions start with code, are tested early and often, and meet together very quickly, we can take advantage of their differentiated power.&lt;/p>
&lt;/blockquote>
&lt;p>This, to me is Habitat&amp;rsquo;s story and is what makes me so excited for its future and so happy that I&amp;rsquo;m a partner with Chef.&lt;/p></description></item><item><title>Promoting Cookbooks into a Private Chef Supermarket with TeamCity</title><link>https://hedge-ops.com/promoting-cookbooks-into-a-private-chef-supermarket-with-teamcity/</link><pubDate>Fri, 29 Apr 2016 08:01:34 +0000</pubDate><guid>https://hedge-ops.com/promoting-cookbooks-into-a-private-chef-supermarket-with-teamcity/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-promoting-cookbooks-into-a-private-chef-supermarket-with-teamcity.jpg" alt="Promoting Cookbooks" />
&lt;/div>
&lt;p>&lt;a href="http://hedge-ops.com/my-advice-for-chef-in-large-corporations/">We want the ability to control&lt;/a> which versions of which cookbooks we rely on and that those cookbooks are available to us even if the author removes them from GitHub. In fact with &lt;a href="http://www.theverge.com/2016/3/24/11300840/how-an-irate-developer-briefly-broke-javascript">the recent craziness on dependency management&lt;/a> and after listening to &lt;a href="https://www.arresteddevops.com/availability/">an episode on availability on Arrested DevOps,&lt;/a> I&amp;rsquo;m starting to think that this isn&amp;rsquo;t just for large organizations like mine.&lt;/p>
&lt;p>So to protect ourselves from that kind of craziness, we have created a &lt;a href="https://www.chef.io/blog/2015/12/31/a-supermarket-of-your-own-running-a-private-supermarket/">private chef supermarket&lt;/a> that we host all dependencies on. Then in our policyfiles, we specify that private supermarket as our default source for finding cookbooks.&lt;/p>
&lt;p>At first, to get us started, we manually uploaded the cookbooks we needed and got to working. Then as we scaled we got tired of people asking us to upload another version. On top of that we want to have a good, clean process for approving external cookbooks/code into our blessed environment. Here&amp;rsquo;s how we implemented it:&lt;/p>
&lt;h2 id="1-synchronize-github-with-internal-git-server">1: Synchronize GitHub with internal Git server&lt;/h2>
&lt;p>We have an internal, corporately blessed git server we use, so we needed to get what was in GitHub into that Git server. For each of the cookbooks, we create a TeamCity &lt;a href="https://confluence.jetbrains.com/display/TCD9/Build+Configuration">build configuration&lt;/a> (that&amp;rsquo;s based on a &lt;a href="https://confluence.jetbrains.com/display/TCD9/Build+Configuration+Template">template&lt;/a>) that does just this with a simple &lt;a href="https://confluence.jetbrains.com/display/TCD9/Command+Line">Command Line runner&lt;/a> (that runs in Windows only at the moment):&lt;/p>
&lt;pre class="lang:default decode:true ">mkdir %Repository Name%.git
git clone --mirror %Github Clone URL%
cd %Repository Name%.git
git remote add stash %Stash Clone URL%
git push --all stash
git push --tags stash&lt;/pre>
&lt;p>There are three variables that are &lt;a href="https://confluence.jetbrains.com/display/TCD9/Configuring+Build+Parameters">defined as parameters&lt;/a> here:&lt;/p>
&lt;ol>
&lt;li>Repository Name: the name of the git repository, like &lt;span class="lang:default decode:true crayon-inline ">chef-client&lt;/span>&lt;/li>
&lt;li>Github Clone URL: the URL to clone the git on GitHub, like &lt;span class="lang:default decode:true crayon-inline ">&lt;a href="https://github.com/chef-cookbooks/chef-client">https://github.com/chef-cookbooks/chef-client&lt;/a>&lt;/span>&lt;/li>
&lt;li>Stash URL: the URL to push the code to internally&lt;/li>
&lt;/ol>
&lt;p>I had to go into our internal Git server and create a repo with the same name as the GitHub one so something could be pushed.&lt;/p>
&lt;p>I then &lt;a href="https://confluence.jetbrains.com/display/TCD9/Configuring+Build+Triggers">schedule this to run every day&lt;/a>, and let it do its thing. If I got crazy I could make it run everytime there was a checkin on github, but the model doesn&amp;rsquo;t &lt;em>have&lt;/em> to have immediacy to it. My repository internally will be reasonably up to date.&lt;/p>
&lt;h2 id="2-create-an-internally-approved-branch-based-on-a-tag">2: Create an internally approved branch based on a tag&lt;/h2>
&lt;p>The next thing we do is create a new branch on our internal git server that outlines what we have code reviewed and have approved to be a part of our infrastructure. During the first setup, we first clone the repo on our local machine with the internal git server:&lt;/p>
&lt;pre class="lang:default decode:true ">git clone http://mycompanygitserver.com/chef-client.git&lt;/pre>
&lt;p>Then we simply run these commands:&lt;/p>
&lt;pre class="lang:default decode:true ">git checkout -b mycompany-approved v4.3.2
git push origin mycompany-approved&lt;/pre>
&lt;p>This creates our &amp;ldquo;safe&amp;rdquo; branch, from which our promotion can occur.&lt;/p>
&lt;h2 id="3-run-cookbook-build-just-as-with-other-cookbooks">3: Run cookbook build just as with other cookbooks&lt;/h2>
&lt;p>The cookbook build will run as I outlined in &lt;a href="http://hedge-ops.com/chef-cookbook-builds-in-teamcity/">a different post&lt;/a>. The only difference is the VCS Root that I pull will be off of the &lt;span class="lang:default decode:true crayon-inline ">mycompany-approved&lt;/span>  branch created above.&lt;/p>
&lt;h2 id="4-promote-cookbook-to-supermarket">4: Promote cookbook to supermarket&lt;/h2>
&lt;p>Then I promote a cookbook to the supermarket using a TeamCity template that I use for all cookbook promotions, which is basically this command:&lt;/p>
&lt;pre class="lang:default decode:true ">knife supermarket share %cookbook_name% "Other" -o .&lt;/pre>
&lt;p>I had to ensure that the &lt;span class="lang:default decode:true crayon-inline ">knife-supermarket&lt;/span>  gem was installed on my build server (of course, configured by chef as well). Also I parameterized the cookbook name so this could be inside of a template that can be reused everywhere.&lt;/p>
&lt;p>The cookbook also has a &lt;a href="https://confluence.jetbrains.com/display/TCD9/Snapshot+Dependencies">snapshot dependency&lt;/a> to the cookbook build above, ensuring that it is only released to our supermarket when it passes the build. That keeps everyone honest.&lt;/p>
&lt;h2 id="5-merge-into-approved-branch-as-people-request">5: Merge into approved branch as people request&lt;/h2>
&lt;p>People will still request that we merge into the approved branch, which is locked down so that a smaller team can approve of the changes. We can use a pull request model to review and audit how this happens.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Doing it this way gave us the most control over which changes go into our infrastructure. It avoids the public supermarket alltogether, because we found that the packages posted on that server cannot be pushed to another supermarket. Even if that problem were fixed, this way is superior because it gives us the ability to code review and audit every dependency we have going into our system.&lt;/p></description></item><item><title>Orchestration Maturity Model with Chef</title><link>https://hedge-ops.com/orchestration-maturity-model-with-chef/</link><pubDate>Fri, 22 Apr 2016 08:00:44 +0000</pubDate><guid>https://hedge-ops.com/orchestration-maturity-model-with-chef/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-orchestration-maturity-model-with-chef.jpg" alt="Orchestration with Chef" />
&lt;/div>
&lt;p>One of our &lt;a href="https://hedge-ops.com/proof-of-concept/">earliest questions&lt;/a> about configuration management tools is how we would do orchestration with them. We realized early on that with chef the orchestration story was fairly weak, especially compared with something like &lt;a href="http://saltstack.com/">salt&lt;/a>. But chef&amp;rsquo;s &lt;a href="http://hedge-ops.com/technology-partnership/">other benefits&lt;/a> outweighed the weaknesses so we moved forward.&lt;/p>
&lt;p>The whole time though I was confused about why Chef hadn&amp;rsquo;t invested more in orchestration. Salt and Ansible has it as a first class citizen and Puppet was &lt;a href="https://docs.puppet.com/pe/latest/app_orchestration_overview.html">actively adding it to its product&lt;/a>. I didn&amp;rsquo;t really &amp;ldquo;get&amp;rdquo; it until I listened to Julian Dunn&amp;rsquo;s &lt;a href="https://www.youtube.com/watch?v=kfF9IATUask">excellent presentation&lt;/a> on it at Ghent.&lt;/p>
&lt;p>Chef, as a company, is more interested in giving you what will work for you than giving you what you&amp;rsquo;re asking for. This is what makes them such a special partner for us. They&amp;rsquo;re more of a coach and less of an enabler. This has led me to think of orchestration as a maturity journey through three phases:&lt;/p>
&lt;h2 id="phase-1-do-it-like-before">&lt;strong>Phase 1: Do it Like Before!&lt;/strong>&lt;/h2>
&lt;p>The first phase of orchestration will be to model how you have been doing things before. OK, I need to stop services, copy files, start services. That&amp;rsquo;s orchestration, right?&lt;/p>
&lt;p>At a surface level this is fine, but it leaves out the edge cases that happen when you&amp;rsquo;re dealing with a scaled infrastructure:&lt;/p>
&lt;ul>
&lt;li>What happens when a node was down and didn&amp;rsquo;t get the message to stop, and then comes back up in the middle of your upgrade, and starts?&lt;/li>
&lt;li>What happens when a new node is added at a time when  you&amp;rsquo;re not doing an upgrade? Are any of those orchestration commands critical to the node itself?&lt;/li>
&lt;li>Are you splitting configuration management between your configuration management tool &lt;em>and&lt;/em> your orchestration? If you are directly stopping a service, THEN running chef later, then your configuration management is leaking out of your system and into other places.&lt;/li>
&lt;/ul>
&lt;h2 id="phase-2-declaratively-manage-state">&lt;strong>Phase 2: Declaratively Manage State&lt;/strong>&lt;/h2>
&lt;p>If we&amp;rsquo;re writing chef recipes and starting from the beginning with some infrastructure, why live with the limitations of Phase 1? Why don&amp;rsquo;t we solve this problem? Thankfully with a tool like &lt;a href="https://www.consul.io/">consul&lt;/a> we can solve the problem by making some subtle changes:&lt;/p>
&lt;ul>
&lt;li>Create a real-time shared data view of the state of your system (with consul, &lt;a href="https://zookeeper.apache.org/">zookeeper&lt;/a>)&lt;/li>
&lt;li>Using this shared data view, define &lt;em>all&lt;/em> desired states of the system. So if you need to transition your web cluster from the states of: off, waiting, converged, set that in your key value store&lt;/li>
&lt;li>Write your chef recipe to define the desired state (resources) that are compiled &lt;em>based on the desired state defined in the shared data view&lt;/em>. So you have an if statement that says &amp;ldquo;if we want this thing to be off right now, there is a service resource with action of ‘off&amp;rsquo;&amp;rdquo;&lt;/li>
&lt;li>Write an orchestrator that manages the state transitions between nodes in the environment &lt;em>by updating the shared data view&lt;/em>.  With consul we can do a consul_exec on our nodes to force chef to run. Or take it even further. And the orchestrator itself can be written through chef.&lt;/li>
&lt;/ul>
&lt;p>This gives you a number of benefits over the earlier phase:&lt;/p>
&lt;ul>
&lt;li>If a node isn&amp;rsquo;t there when the state changes, it checks in and converges to the correct state, immediately! You &lt;em>always&lt;/em> get the node at the right state in the process because they are sharing the latest up to date shared data view&lt;/li>
&lt;li>If a node is added, it will also converge to the correct state. It checks in and catches up immediately. Now you don&amp;rsquo;t have to worry about adding nodes and coordinating that with upgrades; things will just happen.&lt;/li>
&lt;li>All configuration management are belong to chef. Simple.&lt;/li>
&lt;/ul>
&lt;h2 id="phase-3-decouple-the-nodes">&lt;strong>Phase 3: Decouple the Nodes&lt;/strong>&lt;/h2>
&lt;p>The unfortunate reality though, is that even after phase 2 you may not be ready for bursting and scale. In order for those capabilities to exist, you need to have services that are independent of each other. So it shouldn&amp;rsquo;t matter that your web tier is on a particular version and the database hasn&amp;rsquo;t caught up yet. The web tier should tolerate that reality. So you can then update them separately and not worry about it.&lt;/p>
&lt;p>I still think there is a role for real-time orchestration to happen in order to manage the portions of your infrastructure to go through a little at a time until all is upgraded. But the complexities of having to turn one layer off so another layer can do its thing should largely go away.&lt;/p>
&lt;p>Unfortunately this is really up to the software design itself to facilitate. Therefore, it&amp;rsquo;s really a business decision on whether that infrastructure should be made burstable and thus truly cloud-enabled. In some cases, we&amp;rsquo;ll only get as far as phase 2. In others we&amp;rsquo;ll go all the way, but probably camp out at phase 2 while the software catches up. That&amp;rsquo;s the way it should be: let&amp;rsquo;s get there little by little. As long as we&amp;rsquo;re going in the right direction, we&amp;rsquo;re good.&lt;/p></description></item><item><title>Chef Cookbook Builds in TeamCity</title><link>https://hedge-ops.com/chef-cookbook-builds-in-teamcity/</link><pubDate>Fri, 15 Apr 2016 08:00:50 +0000</pubDate><guid>https://hedge-ops.com/chef-cookbook-builds-in-teamcity/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-chef-cookbook-builds-in-teamcity.jpg" alt="Chef Cookbook Builds in TeamCity" />
&lt;/div>
&lt;p>As more and more teams are &lt;a href="http://hedge-ops.com/my-advice-for-chef-in-large-corporations/">coming on board with Chef&lt;/a>, I&amp;rsquo;ve began to standardize our pipeline and ensure that everyone meets quality gates for the infrastructure they are creating. This started with finally figuring out how to get &lt;a href="http://hedge-ops.com/test-kitchen-required-not-optional/">Test Kitchen working with Windows&lt;/a>, then quickly migrated to getting it running in &lt;a href="http://hedge-ops.com/christmas-with-russians/">TeamCity&lt;/a>. Our entire division uses TeamCity for configuration management, so it&amp;rsquo;s something that I needed to plan out carefully in order to make the Chef pipeline &lt;em>feel&lt;/em> like it&amp;rsquo;s a part of a team&amp;rsquo;s normal build process.&lt;/p>
&lt;h2 id="project-structure">Project Structure&lt;/h2>
&lt;p>With this in mind, we created a** Chef** &lt;a href="https://confluence.jetbrains.com/display/TCD9/Creating+and+Editing+Projects">subproject&lt;/a> _inside_ of each team&amp;rsquo;s _existing_ project. We want them to have ownership when Chef infrastructure breaks and to take action on problems, just as if the problem happened in their own software build.&lt;/p>
&lt;p>We then created a** Chef Cookbook** &lt;a href="https://confluence.jetbrains.com/display/TCD9/Build+Configuration+Template">build template&lt;/a> at the &lt;Root Project> level that all cookbooks can use for their own builds. This template defines a cookbook parameter that enables the build steps below to know where the cookbook is in source.&lt;/p>
&lt;h2 id="version-control-settings">Version Control Settings&lt;/h2>
&lt;p>We&amp;rsquo;re not really sure about how we approach testing at the moment when it comes to dependencies. If a cookbook is very young or if we are testing a lot of things at once, we might want to use relative path dependencies to other cookbooks. Or we might want to use data bags at some level. So we&amp;rsquo;ve decided on the build agent itself to mimic a chef repo and then test it that way. We do this &lt;a href="https://confluence.jetbrains.com/display/TCD9/Build+Checkout+Directory#BuildCheckoutDirectory-Customcheckoutdirectory">through a checkout rule&lt;/a>, like this:&lt;/p>
&lt;pre>&lt;code>+:.=&amp;amp;gt;cookbooks/contributors
&lt;/code>&lt;/pre>&lt;p>This means that the contributors cookbook will go to the cookbooks/contributors repo relative to build working directory.&lt;/p>
&lt;h2 id="build-steps">Build Steps&lt;/h2>
&lt;h3 id="1-run-foodcritic">&lt;strong>1. Run Foodcritic&lt;/strong>&lt;/h3>
&lt;p>We want to do Chef liniting first before we get into further testing, so we run &lt;a href="http://www.foodcritic.io/">foodcritic&lt;/a>. This is done simply by creating a &lt;a href="https://confluence.jetbrains.com/display/TCD9/Command+Line">Command Line runner&lt;/a> with the foodcritic command:&lt;/p>
&lt;p>&lt;img src="https://hedge-ops.com/images/post-assets/2016-04-15-chef-cookbook-builds-in-teamcity/run-foodcritic-1.png" alt="Run Foodcritic">&lt;/p>
&lt;h3 id="2-run-rubocop">&lt;strong>2. Run Rubocop&lt;/strong>&lt;/h3>
&lt;p>Once foodcritic runs, we want to finish our cookbook linting with &lt;a href="http://batsov.com/rubocop/">rubocop&lt;/a>:&lt;/p>
&lt;p>&lt;img src="https://hedge-ops.com/images/post-assets/2016-04-15-chef-cookbook-builds-in-teamcity/run-rubocop.png" alt="Run Rubocop">&lt;/p>
&lt;h3 id="3-run-cookbook-unit-tests">&lt;strong>3. Run Cookbook Unit Tests&lt;/strong>&lt;/h3>
&lt;p>I&amp;rsquo;m not a huge fan of &lt;a href="https://docs.chef.io/chefspec.html">ChefSpec&lt;/a> because I believe they mock too much out and end up not adding a lot of value. But I do think having at least one there that ensures that your code will converge is immensely helpful. It&amp;rsquo;s much better waiting the few seconds to ensure that code converges than the few minutes to wait for kitchen to tell you the same thing. So I put the step here:&lt;/p>
&lt;p>&lt;img src="https://hedge-ops.com/images/post-assets/2016-04-15-chef-cookbook-builds-in-teamcity/run-chef-unit-tests.png" alt="Run Chef Unit Tests">&lt;/p>
&lt;p>&lt;em>Update: actually just before this published, I removed this. The Chef Spec unit tests required too much ruby expertise to be helpful. Plus people are working well with kitchen and learn to rely on it instead. So as of yesterday, this step was removed.&lt;/em>&lt;/p>
&lt;h3 id="4-run-test-kitchen">&lt;strong>4.&lt;/strong> &lt;strong>Run Test Kitchen&lt;/strong>&lt;/h3>
&lt;p>And now for the magic! I need to &lt;a href="http://hedge-ops.com/test-kitchen-required-not-optional/">run Test Kitchen&lt;/a>. If I&amp;rsquo;m using vagrant, I need to have a physical build agent to do this on. &lt;a href="http://hedge-ops.com/tutorial-for-test-kitchen-with-azure/">If I&amp;rsquo;m running azure&lt;/a>, I need to have some credentials set up on the build agent. All of that configuration is handled through chef itself, so at this point all I need to do is run the command itself:&lt;/p>
&lt;p>&lt;img src="https://hedge-ops.com/images/post-assets/2016-04-15-chef-cookbook-builds-in-teamcity/run-kitchen-test.png" alt="Run Kitchen Test">&lt;/p>
&lt;p>Kitchen test will do a create, converge, and verify. It runs through the whole process. And I&amp;rsquo;ve tested that if it fails, the build will fail.&lt;/p>
&lt;h3 id="5-kitchen-destroy">&lt;strong>5. Kitchen Destroy&lt;/strong>&lt;/h3>
&lt;p>If the above test fails, it&amp;rsquo;s important to not keep the virtual machine running. This is especially true if I&amp;rsquo;m using the azure runner. So at the end I&amp;rsquo;ll call kitchen destroy, and &lt;em>always&lt;/em> call it, even if the previous command failed:&lt;/p>
&lt;p>&lt;img src="https://hedge-ops.com/images/post-assets/2016-04-15-chef-cookbook-builds-in-teamcity/run-kitchen-destroy.png" alt="Run Kitchen Destroy">&lt;/p>
&lt;h2 id="build-agent-setup">Build Agent Setup&lt;/h2>
&lt;p>As I mentioned earlier, our build agents are set up through Chef itself, so configuration of them is easy. Since we are creating our Chef Projects inside of the product&amp;rsquo;s projects, we don&amp;rsquo;t want to mix their build agents with the chef ones. We keep them separated because we let each team have their own build agents that they manage. To solve for the mix, we add the** Chef** subproject set up above to our own Chef build &lt;a href="https://confluence.jetbrains.com/display/TCD9/Agent+Pools">agent pool&lt;/a>. Then in our template, we add a &lt;a href="https://confluence.jetbrains.com/display/TCD9/Agent+Requirements">build agent requirement&lt;/a>:&lt;/p>
&lt;p>&lt;img src="https://hedge-ops.com/images/post-assets/2016-04-15-chef-cookbook-builds-in-teamcity/chef-cookbook-requirement.png" alt="Chef Cookbook Requirement">&lt;/p>
&lt;p>In our recipe for the build agent, we set this environment variable, so this limits our cookbook builds to only run on build agents on which our chef recipe has run.&lt;/p>
&lt;h2 id="triggering">Triggering&lt;/h2>
&lt;p>Finally, we want to trigger this cookbook build whenever something in the cookbook is checked in. We do this through adding a &lt;a href="https://confluence.jetbrains.com/display/TCD9/Configuring+VCS+Triggers">VCS trigger&lt;/a> with the default settings to the template.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>With the template in place, it takes about ten minutes to add a team&amp;rsquo;s cookbook to be fully tested and built within their own environment. It feels very much like a software build, which is fantastic for everyone because it reminds us that the infrastructure code we are creating is like any other code; it should be subject to automation just like the rest.&lt;/p></description></item><item><title>chef-vault Tutorial</title><link>https://hedge-ops.com/chef-vault-tutorial/</link><pubDate>Wed, 06 Apr 2016 00:00:32 +0000</pubDate><guid>https://hedge-ops.com/chef-vault-tutorial/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-chef-vault-tutorial.jpg" alt="Vault Tutorial" />
&lt;/div>
&lt;p>This week I researched &lt;a href="https://github.com/chef/chef-vault">chef-vault&lt;/a> and struggled quite a bit &lt;a href="https://docs.chef.io/chef_vault.html">with the documentation&lt;/a>, so I thought I would write a bit of a tutorial on the technology for those who are interested in quickly understanding how it might work for their organizations.&lt;/p>
&lt;h2 id="why-chef-vault">Why chef-vault?&lt;/h2>
&lt;p>&lt;a href="https://docs.chef.io/data_bags.html#encrypt-a-data-bag-item">Encrypted data bags&lt;/a> force you to copy the shared secret that is used for decryption to your infrastructure. It&amp;rsquo;s very easy to take that secret file and nefariously decrypt the data from somewhere else without anyone knowing about it. Chef-vault makes this much more difficult by giving both nodes and chef server users expressed permission to decrypt certain data. With chef-vault you don&amp;rsquo;t have to share a secret file with all of your nodes. This is a step up that simplifies everything.&lt;/p>
&lt;p>The solution isn&amp;rsquo;t without its drawbacks. The main one is if you add nodes, you have to rerun something on the server to get that node to be able to decrypt the data bag. With &lt;a href="https://www.hashicorp.com/blog/vault.html">Hashicorp&amp;rsquo;s vault&lt;/a> you get better control over that, and better lease management, and credentials creation. To me, encrypted data bags are an unreliable used car, chef-vault is a nice mid-size sedan, and Hashicorp&amp;rsquo;s vault is like a luxury car.&lt;/p>
&lt;p>So now that we know where the tool sits within our choices, let&amp;rsquo;s look at the basics:&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>To get started with chef-vault, have the latest &lt;a href="https://downloads.chef.io/chef-dk/">ChefDK&lt;/a> installed (0.12 or greater) and install the &lt;a href="https://rubygems.org/gems/chef-vault/versions/2.8.0">chef-vault gem&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">chef gem install chef-vault
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then ensure you have a .chef directory that connects to a chef server.&lt;/p>
&lt;h2 id="creation">Creation&lt;/h2>
&lt;p>Creating a vault is easy:&lt;/p>
&lt;pre>&lt;code>knife vault create passwords root -S &amp;quot;policy_name:webserver&amp;quot; -A &amp;quot;michael&amp;quot; -J root.json -M client
&lt;/code>&lt;/pre>&lt;p>For whatever reason the &lt;code>knife vault&lt;/code>  command doesn&amp;rsquo;t default to talk to a chef server. So to create a knife vault, you have to specify &lt;code>-M client&lt;/code>  at the end. Or you can make your life easier going forward by adding this line to your knife.rb:&lt;/p>
&lt;pre>&lt;code>knife[:vault_mode] = 'client'
&lt;/code>&lt;/pre>&lt;p>For the command, I used this root.json:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;username&amp;quot;: &amp;quot;mhedgpeth&amp;quot;,
&amp;quot;password&amp;quot;: &amp;quot;myPassword&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s review the options:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Team&lt;/th>
&lt;th>Natural Alignment&lt;/th>
&lt;th>Natural Misalignment&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Development&lt;/td>
&lt;td>Faster Delivery of features&lt;/td>
&lt;td>Have to be engaged in operations, more &amp;ldquo;work&amp;rdquo; to do&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Operations&lt;/td>
&lt;td>Less fires, more consistency&lt;/td>
&lt;td>Have to learn a new skillset and be a beginner&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Security&lt;/td>
&lt;td>More consistency, compliance&lt;/td>
&lt;td>Automation can cause unknown vulnerabilities&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Business&lt;/td>
&lt;td>Faster ROI for development, lower cost for operations, and a scale model that works&lt;/td>
&lt;td>Takes ongoing investment in culture and tools&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>This uploads two data bag items to a data bag called &amp;ldquo;passwords&amp;rdquo;:&lt;/p>
&lt;ol>
&lt;li>&lt;code>root&lt;/code> which has the data above&lt;/li>
&lt;li>&lt;strong>&lt;code>root_keys&lt;/code>&lt;/strong> which stores the metadata about which clients can read and edit this data bag (as you specified above in the search criteria and administrators list.&lt;/li>
&lt;/ol>
&lt;h3 id="making-it-even-more-secure">Making it Even More Secure&lt;/h3>
&lt;p>&lt;a href="https://coderanger.net/">Noah Kantrowitz&lt;/a> helped me understand the vulnerabilities of the above approach using the &lt;code>-S&lt;/code>  flag. With that flag, you give the nodes the ability to define the criteria by which they are allowed to decrypt the vault. So if you say I want nodes that have &lt;code>policy_name:webserver&lt;/code>  to decrypt this data, all it takes is someone saying they are &lt;code>'policy_name:webserver'&lt;/code>  and they will be granted the keys.&lt;/p>
&lt;p>A better way to handle this is through specifying each node explicitly through the -A flag. So your command would be:&lt;/p>
&lt;pre>&lt;code>knife vault create passwords root -A &amp;quot;michael,webserver1,webserver2&amp;quot; -J root.json -M client
&lt;/code>&lt;/pre>&lt;h2 id="viewing-a-vault">Viewing a Vault&lt;/h2>
&lt;p>Now that we have created a vault, let&amp;rsquo;s view it:&lt;/p>
&lt;pre>&lt;code>knife vault show passwords root -M client
&lt;/code>&lt;/pre>&lt;p>which will output:&lt;/p>
&lt;pre>&lt;code>id: root
password: myPassword
username: mhedgpeth
&lt;/code>&lt;/pre>&lt;p>It lets me view it in cleartext because I am one of the administrators on the vault itself. If I want, I can even view it in JSON if you want to move the file to another chef server:&lt;/p>
&lt;pre>&lt;code>knife vault show passwords root -M client -Fjson
&lt;/code>&lt;/pre>&lt;h2 id="viewing-encrypted-version">Viewing Encrypted Version&lt;/h2>
&lt;p>To view the encrypted version of the vault, you can simply use the normal commands for viewing data bag, just realizing that the vault data bag also has a _keys one too:&lt;/p>
&lt;pre>&lt;code>knife data bag show passwords root
&lt;/code>&lt;/pre>&lt;p>and&lt;/p>
&lt;pre>&lt;code>knife data bag show password root_keys
&lt;/code>&lt;/pre>&lt;p>Will show you lots of encrypted goodness which I will not show. The keys is helpful to see what clients are connected to it.&lt;/p>
&lt;h2 id="adding-nodes">Adding nodes&lt;/h2>
&lt;p>Probably the weakest part of chef-vault is what to do when you add nodes. If you have an elastic situation this can be dicey, because when you add nodes, you have to run this command to generate keys for those nodes to read the encrypted data:&lt;/p>
&lt;pre>&lt;code>knife vault refresh passwords root --clean-unknown-clients
&lt;/code>&lt;/pre>&lt;p>This updates the &lt;code>root_keys&lt;/code>  encrypted data bag with information on the nodes that now match the search criteria. So it&amp;rsquo;s  important to know that the nodes that can read a vault is a snapshot in time based on the search criteria, not a dynamic list.&lt;/p>
&lt;p>If you aren&amp;rsquo;t using a search criteria, you&amp;rsquo;ll need to add nodes to the administrators list itself:&lt;/p>
&lt;pre>&lt;code>knife vault update passwords root -A 'newnode,newnode2'
&lt;/code>&lt;/pre>&lt;h2 id="rotating-keys">Rotating keys&lt;/h2>
&lt;p>You might want to rotate the key that encrypts the data in the data bag. The way this works is the clients use their own key as a private key to combine with the public key on the chef server to decrypt the data bag&amp;rsquo;s key. That key encrypts the real data bag. This command will change that key:&lt;/p>
&lt;pre>&lt;code>knife vault rotate all keys
&lt;/code>&lt;/pre>&lt;h2 id="cookbook-development">Cookbook Development&lt;/h2>
&lt;p>What use is a data bag without using it in a cookbook? To be able to deal with this data bag in the cookbook, include the &lt;code>chef-vault::default&lt;/code>  recipe in your runlist. Then you will have the &lt;code>chef_vault_item&lt;/code>  method that you can call like this:&lt;/p>
&lt;pre>&lt;code>item = chef_vault_item(&amp;quot;passwords&amp;quot;, &amp;quot;root&amp;quot;)
password = item['password']
&lt;/code>&lt;/pre>&lt;p>Using &lt;code>chef_vault_item&lt;/code>  will make your cookbook more testable by test kitchen (see below).&lt;/p>
&lt;h2 id="version-control">Version Control&lt;/h2>
&lt;p>With data bags, we like to have a data_bags repository that we use to promote shared data and version control changes. This kind of thing doesn&amp;rsquo;t work with chef-vault. Instead you get a small team that can update the vault and then have them manually do it. This isn&amp;rsquo;t ideal, but secrets are hard and, as I wrote above, using a dedicated secrets management tool like Hashicorp Vault will keep you from that level of work.&lt;/p>
&lt;h2 id="kitchen-support">Kitchen Support&lt;/h2>
&lt;p>To make this work in kitchen, just put a cleartext data bag in the data_bags folder that your kitchen run refers to (probably in &lt;code>test/integration/data_bags&lt;/code>). Then the vault commands fall back into using that dummy data when you use &lt;code>chef_vault_item&lt;/code>  to retrieve it.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>The chef-vault functionality is compelling enough for serious consideration. Hopefully this walkthrough will help you decide if it is right for you.&lt;/p></description></item><item><title>Tutorial for Test Kitchen with Azure</title><link>https://hedge-ops.com/tutorial-for-test-kitchen-with-azure/</link><pubDate>Fri, 04 Mar 2016 08:00:20 +0000</pubDate><guid>https://hedge-ops.com/tutorial-for-test-kitchen-with-azure/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-tutorial-for-test-kitchen-with-azure.jpg" alt="Test Kitchen Azure" />
&lt;/div>
&lt;p>As I wrote in &lt;a href="https://hedge-ops.com/test-kitchen-required-not-optional/">the last post&lt;/a>, Test Kitchen as one of the &lt;a href="https://hedge-ops.com/learning-chef-book-review/">things that attracted me to Chef&lt;/a>. There was a problem, though: running Windows on virtual machines automatically is difficult.&lt;/p>
&lt;p>I&amp;rsquo;ve spent quite a bit of time trying to create a vagrant image &lt;a href="http://www.hurryupandwait.io/blog/creating-windows-base-images-for-virtualbox-and-hyper-v-using-packer-boxstarter-and-vagrant">using Matt Wrock&amp;rsquo;s excellent blog&lt;/a> as a resource, and haven&amp;rsquo;t quite gotten it there yet. Plus, if I go the vagrant route, people have to have powerful machines on which to run test kitchen. The more I worked through that option, the more I because discouraged and dismayed that this may just never work for us.&lt;/p>
&lt;p>And then I discovered azure.&lt;/p>
&lt;p>Don&amp;rsquo;t get me wrong: I&amp;rsquo;m not a Microsoft fanboy. But there are some great advantages to going this route:&lt;/p>
&lt;ol>
&lt;li>Through my Microsoft-friendly workplace I get a MSDN Subscription, &lt;a href="https://azure.microsoft.com/en-us/pricing/member-offers/msdn-benefits/">with which I get $50/month credit to use azure&lt;/a>. So this is free, and I can run test kitchen on not-my compute resources.&lt;/li>
&lt;li>Microsoft by definition is going to get Windows images right. So I don&amp;rsquo;t have to fight it anymore. I can just use it. It just works, just like it should.&lt;/li>
&lt;li>&lt;a href="http://stuartpreston.net/">Stuart Preston&lt;/a> wrote a plugin for me that gets anyone past the learning curve very quickly. With this plugin you don&amp;rsquo;t have to really know anything about azure to use it for test kitchen&lt;/li>
&lt;/ol>
&lt;p>These reasons are so compelling, this is what our teams will be going with in the coming months. It&amp;rsquo;s critical that everyone be able to run test kitchen easily, and azure gives us the best shot at doing that without a lot of drama.&lt;/p>
&lt;p>Setting up was easy:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://blogs.msdn.com/b/msgulfcommunity/archive/2014/09/15/how-to-activate-azure-benefit-for-msdn-subscribers.aspx">Activate your subscription from your MSDN account&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/">Install the Azure CLI for Windows&lt;/a>&lt;/li>
&lt;li>Follow the directions &lt;a href="https://github.com/pendrica/kitchen-azurerm">on the kitchen-azurerm main page&lt;/a> to set up a Security Principal, Tenant, Password, and configure it in your user directory&lt;/li>
&lt;li>In a simple cookbook, create &lt;a href="https://gist.github.com/mhedgpeth/a70ef0a7edf01d9c7ed2">a simple kitchen.yml file&lt;/a> like this:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">---&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000;font-weight:bold">driver&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>azurerm&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000;font-weight:bold">driver_config&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">subscription_id&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&amp;lt;%=&lt;span style="color:#bbb"> &lt;/span>ENV[&lt;span style="color:#d14">&amp;#39;AZURE_SUBSCRIPTION_ID&amp;#39;&lt;/span>]&lt;span style="color:#bbb"> &lt;/span>%&lt;span style="color:#d14">&amp;gt;
&lt;/span>&lt;span style="color:#d14"> location: &amp;#39;South Central US&amp;#39;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">machine_size&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#d14">&amp;#39;Standard_D1&amp;#39;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000;font-weight:bold">provisioner&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>chef_zero&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000;font-weight:bold">verifier&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>inspec&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000;font-weight:bold">platforms&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>windows2012-r2&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">driver_config&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">image_urn&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>MicrosoftWindowsServer:WindowsServer:&lt;span style="color:#099">2012&lt;/span>-R2-Datacenter:latest&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">transport&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>winrm&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>centos71&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">driver_config&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">image_urn&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>OpenLogic:CentOS:&lt;span style="color:#099">7.1&lt;/span>:latest&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000;font-weight:bold">suites&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- &lt;span style="color:#000;font-weight:bold">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>default&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">run_list&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>- recipe[contributors::default]&lt;span style="color:#bbb">
&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">attributes&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s really that simple. Now I can run test kitchen commands:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>command&lt;/th>
&lt;th>description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>kitchen create&lt;/td>
&lt;td>creates azure infrastructure for running, powers on machines&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kitchen converge&lt;/td>
&lt;td>does kitchen create if needed, will converge the node using chef&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kitchen verify&lt;/td>
&lt;td>does create and converge if needed, runs the tests that you&amp;rsquo;ve written&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kitchen test&lt;/td>
&lt;td>does everything: create, converge, verify&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kitchen destroy&lt;/td>
&lt;td>don&amp;rsquo;t forget this one; it removes the resources&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>There you have it, go through those easy steps and you have Kitchen working with Azure.&lt;/p></description></item><item><title>Test Kitchen: Required, not Optional</title><link>https://hedge-ops.com/test-kitchen-required-not-optional/</link><pubDate>Fri, 26 Feb 2016 08:00:21 +0000</pubDate><guid>https://hedge-ops.com/test-kitchen-required-not-optional/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-test-kitchen-required-not-optional.jpg" alt="Test Kitchen" />
&lt;/div>
&lt;p>When I first started reading through &lt;a href="https://hedge-ops.com/learning-chef-book-review/">the Learning Chef book&lt;/a> I became quite fascinated and enamored by &lt;a href="http://kitchen.ci/">Test Kitchen&lt;/a>. The community created such a wonderful way to introduce testing into their workflow. That&amp;rsquo;s fantastic!&lt;/p>
&lt;p>Integration and support of Test Kitchen was one of our reasons for &lt;a href="https://hedge-ops.com/technology-partnership/">partnering with Chef&lt;/a>. We had a way to create a test-driven infrastructure, which would be essential to truly scaling our automation to fit our vision. But, I reasoned, for now we would leave it out of the picture so we can focus on the more important tasks like developing cookbooks and establishing a &lt;a href="https://hedge-ops.com/my-advice-for-chef-in-large-corporations/">change-management workflow&lt;/a> that fit our broader security model.&lt;/p>
&lt;p>I now see that I was looking at this all wrong.&lt;/p>
&lt;p>The choice to forego testing is a common one: teams often make sure then have a core idea that will work before they invest in testing. Then they pivot very hard into the testing direction when the core is there. This is the direction I took, largely because of how we couldn&amp;rsquo;t easily get Windows, Test Kitchen and vagrant to work together.&lt;/p>
&lt;p>I changed my mind when I recently tried to work with a group of 25 people to learn Chef. In the workshop I asked people to set up a virtual machine somewhere, copy stuff over, get it on a chef server (or run it in local mode directly) and then watched them struggle with the nonessential details and not get much done.&lt;/p>
&lt;p>The reality then dawned on me: &lt;strong>Test Kitchen is the only efficient way to run your cookbooks.&lt;/strong> It&amp;rsquo;s not for testing first. It&amp;rsquo;s for running first. If you are a developer, you&amp;rsquo;re used to coding a little and running a little. The reality all developers discovered decades ago is that &lt;strong>you&amp;rsquo;re not going to get very far with coding unless you are running your code frequently.&lt;/strong>&lt;/p>
&lt;p>Since chef runs on an infrastructure, it&amp;rsquo;s much more difficult to run. You have to run it on a virtual machine. This is what Test Kitchen is for.****&lt;/p>
&lt;p>Using chef without Test Kitchen is like opening a restaurant and inviting everyone to taste the food without practicing with your kitchen staff first. No one would do that because it would fail miserably. The restaurant would spend a massive amount of time getting feedback on a product that they can&amp;rsquo;t trust is ready for external consumption.&lt;/p>
&lt;p>So my next task is to get us up and running with Test Kitchen. I now know that it&amp;rsquo;s not just a nice tool for testing; it&amp;rsquo;s an essential part of coding with chef.&lt;/p></description></item><item><title>The Power of Culture in Cross-Discipline Change Initiatives</title><link>https://hedge-ops.com/the-power-of-culture-in-cross-discipline-change-initiatives/</link><pubDate>Fri, 12 Feb 2016 08:00:17 +0000</pubDate><guid>https://hedge-ops.com/the-power-of-culture-in-cross-discipline-change-initiatives/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-the-power-of-culture-in-cross-discipline-change-initiatives.jpg" alt="Power of Culture" />
&lt;/div>
&lt;p>When I started my career, I was rewarded for &lt;a href="https://hedge-ops.com/christmas-with-russians/">being creative&lt;/a>, stretching the boundaries, getting changes through the system to &lt;a href="https://hedge-ops.com/funding/">bring more revenue to my company&lt;/a>. I was a developer.&lt;/p>
&lt;p>When my SecOps colleague started his career, he was rewarded for keeping people like me from destroying the business with poorly planned implementations that make us vulnerable to attacks.&lt;/p>
&lt;p>When my Operations colleague started her career, she was rewarded for taking the crazy ideas that the developer wanted to implement and translating them into something that &lt;em>will actually work&lt;/em>, subject to the rules that the SecOps person dictates.&lt;/p>
&lt;p>In the natural state, we have all created value in our careers by trying to work around the flaws of the other groups.&lt;/p>
&lt;p>To the developer, SecOps and Operations needlessly slow everything down.&lt;/p>
&lt;p>To SecOps, developers are dangerous and operations are unreliable.&lt;/p>
&lt;p>To Operations, SecOps are paranoid and developers don&amp;rsquo;t have a clue.&lt;/p>
&lt;p>&lt;strong>I vastly underrated the power of these cultural scripts when first initiating our change initiatives around DevOps and automation.&lt;/strong> In fact, I mindlessly continued to follow my script. I went to SecOps with the attitude of &amp;ldquo;here&amp;rsquo;s this awesome change I want to do that will change our business, please approve of it.&amp;rdquo; They followed their cultural script with the response of &amp;ldquo;oh look here is a developer who just walked in with a weapon that can wipe out our entire business.&amp;rdquo; There is no partnership there; there is only conflict. And unfortunately, conflict is what I began with. &lt;a href="https://hedge-ops.com/my-advice-for-chef-in-large-corporations/">I&amp;rsquo;m still working to undo the damage&lt;/a> I did in those early days.&lt;/p>
&lt;p>Instead of the attitude I learned as a developer, I should have taken an attitude of a business person: &amp;ldquo;What are the problems that are or have the potential to drag down revenue and increase costs, and how can I help fix them?&amp;rdquo; It turns out that SecOps and Operations both have extremely valuable roles and they aren&amp;rsquo;t getting in the way of my awesome developer changes. They have problems just like the rest of us, and if I take the time to understand them, perhaps we can partner and solve them together.&lt;/p>
&lt;p>Instead of coming to SecOps to try to get approval for the tool, why don&amp;rsquo;t I start with their compliance challenges and how we solve those? If I can use a tool to get their system more compliant, then that&amp;rsquo;s a &lt;em>better&lt;/em> baseline from which we can do some other great things, like configuration management.&lt;/p>
&lt;p>Instead of coming to Operations to merely implement the tool, why don&amp;rsquo;t I start with the problems they are having and iteratively help them solve those problems? Instead of just relying on the development teams, maybe I should start going to the Change Advisory Board meetings and then show up when the deployment happens. Then after that I can follow up and say, &amp;ldquo;For a couple of days of work, we can automate that. How does that sound?&amp;rdquo; All of the sudden I go from being a &lt;em>developer who doesn&amp;rsquo;t get it&lt;/em> to &lt;em>partner who will make my life easier&lt;/em>.&lt;/p>
&lt;p>When the cultural roles shift away from conflict and towards cooperation, magical things will happen. I&amp;rsquo;m working like crazy to make that happen right now.&lt;/p></description></item><item><title>Proof of Concept</title><link>https://hedge-ops.com/proof-of-concept/</link><pubDate>Fri, 29 Jan 2016 08:00:45 +0000</pubDate><guid>https://hedge-ops.com/proof-of-concept/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-proof-of-concept.jpg" alt="Proof of Concept" />
&lt;/div>
&lt;p>It&amp;rsquo;s a classic scenario: a group of people &lt;a href="https://hedge-ops.com/dont-start-with-tools/">want to use a tool&lt;/a> but before they can, they do a proof of concept (or POC) with the technology as a means of showing that it will do what it says it will do. In the past the proof of concept was purely a technical issue: how does the tool act when working with the various use cases we&amp;rsquo;ve identified? We create a sandbox and show the value at a demo or two, then we&amp;rsquo;re ready to move forward.&lt;/p>
&lt;p>It&amp;rsquo;s easy to stop there. But I&amp;rsquo;ve learned to take things further. The proof of concept should include at least two other aspects beyond technology:&lt;/p>
&lt;p>&lt;strong>Culture:&lt;/strong> can you &lt;strong>prove&lt;/strong> (through an experiment or two) that the people who will be involved with the new tool or change will be engaged as expected? It&amp;rsquo;s nice enough to have the person who is excited about the technology get it to provide value, but can an average person within the organization?&lt;/p>
&lt;p>&lt;strong>Security:&lt;/strong> how does your SecOps team feel about this change? Are they on board with it or resisting it? Will they cooperate to the extent that they can put it in production in a limited capacity?&lt;/p>
&lt;p>For &lt;a href="https://hedge-ops.com/intrinsic-motivators-leading-to-chef/">our Chef initiative&lt;/a> both of these elements were concerns that were outside of the scope of our proof of concept. If I were to do things again, I would have put them in scope. That would have better clarified and added urgency to all elements that posed a risk to the change.&lt;/p>
&lt;p>&lt;strong>A good test for a true proof of concept is whether you can get something running in production.&lt;/strong> If the answer is yes, then you are probably ready to go. If the answer is no, then watch out for what you&amp;rsquo;re buying and how easily you will be able to roll out the change you are promising.&lt;/p></description></item><item><title>Technology &lt; Partnership</title><link>https://hedge-ops.com/technology-partnership/</link><pubDate>Fri, 22 Jan 2016 08:00:43 +0000</pubDate><guid>https://hedge-ops.com/technology-partnership/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-technology-partnership.jpg" alt="Technology Partnership" />
&lt;/div>
&lt;p>Last year our organization &lt;a href="https://hedge-ops.com/intrinsic-motivators-leading-to-chef/">made a major decision to use Chef&lt;/a> for our configuration management. People often ask me why we chose Chef over Puppet, SaltStack, or Ansible. I tell them that we chose Chef over the others because they have a better sales organization.&lt;/p>
&lt;p>I&amp;rsquo;m only half kidding.&lt;/p>
&lt;p>I&amp;rsquo;ve come to believe that the essence of success with change initiatives and tools is &lt;a href="https://hedge-ops.com/dont-start-with-tools/">not about the underlying technology&lt;/a>. Chances are if you have a &lt;a href="https://hedge-ops.com/funding/">funded popular tool&lt;/a> it&amp;rsquo;s going to have some cool technology. All of the above was cool.&lt;/p>
&lt;p>Instead the essence of success with change initiatives is managing the organizational and cultural changes needed to make it to the other side. Chef is a great partner in helping us navigate our change through the various parties and &lt;a href="https://hedge-ops.com/my-advice-for-chef-in-large-corporations/">into a model that rapidly delivers value for our business&lt;/a>. I&amp;rsquo;ve been extremely impressed with their organization at all levels and don&amp;rsquo;t think I would be where I am without their help.&lt;/p>
&lt;p>So don&amp;rsquo;t start with the tools. Start with the people, the culture, the process that will lead to safe, repeatable, high-velocity change. If you find a tool that will partner with you in that discovery, you probably have a world-class tool. If you start with the tool and ignore the other things, you might end up with a cool tool that no one wants or understands.&lt;/p></description></item><item><title>Don't Start with Tools</title><link>https://hedge-ops.com/dont-start-with-tools/</link><pubDate>Fri, 15 Jan 2016 08:00:05 +0000</pubDate><guid>https://hedge-ops.com/dont-start-with-tools/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-dont-start-with-tools.jpg" alt="Don't Start with Tools" />
&lt;/div>
&lt;p>In the past whenever I&amp;rsquo;ve tried to solve a technical problem, the first thing I would do is &lt;a href="https://hedge-ops.com/christmas-with-russians/">find the right tool for the job&lt;/a>. I would then test that tool against the known use cases, share it with others in the organization, and see if excitement warrants further consideration. If we&amp;rsquo;re spending a lot of money, the vendor will get involved and help push everyone toward a decision to go with the tool.&lt;/p>
&lt;p>The phase is so exciting, so full of promise&amp;hellip;&lt;/p>
&lt;p>And often completely misguided.&lt;/p>
&lt;p>Instead of starting with the tool, I&amp;rsquo;ve learned that I need to start with the business and the problems its leaders face. Once we all agree to the problems and have a clear, shared, measurable view of those problems, we can then determine the right tool for the job.&lt;/p>
&lt;p>Recently I was in a meeting about &lt;a href="https://hedge-ops.com/intrinsic-motivators-leading-to-chef/">Chef&lt;/a> with a colleague who is not very interested in adopting Chef for his project. He doesn&amp;rsquo;t see how Chef fits with his operational goals for next year. He was talking about his main pain points being the a greater need for operational visibility into his entire stack of hundreds of nodes. So I asked him, &amp;ldquo;what if we helped you solve that problem with a greater focus on monitoring?&amp;rdquo; He paused and said to me &amp;ldquo;I thought this meeting was about Chef.&amp;rdquo;&lt;/p>
&lt;p>Once the meeting and discussion becomes about the tool, you&amp;rsquo;re no longer having the right conversation. Start with the problems, and find good solutions that fit those problems. Repeat.&lt;/p></description></item><item><title>The Inferior "Right" Way</title><link>https://hedge-ops.com/the-inferior-right-way/</link><pubDate>Fri, 20 Nov 2015 08:00:20 +0000</pubDate><guid>https://hedge-ops.com/the-inferior-right-way/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-the-inferior-right-way.jpg" alt="Inferior Right Way" />
&lt;/div>
&lt;p>I&amp;rsquo;ve spent much of my career trying to find roadblocks to technical and organizational success. This passion leads me to great tools like &lt;a href="https://hedge-ops.com/christmas-with-russians/">TeamCity&lt;/a> and of &lt;a href="https://hedge-ops.com/intrinsic-motivators-leading-to-chef/">Chef&lt;/a>. My success in leveraging tools for organizational success leads me to be opinionated about what tools we should be using and how we should be doing things in our organization.&lt;/p>
&lt;p>It is so easily get locked into the &amp;ldquo;right&amp;rdquo; solution that would &amp;ldquo;solve all of our problems.&amp;rdquo; Early on that worked just fine for me, but over the years I&amp;rsquo;ve changed my approach.&lt;/p>
&lt;p>As I&amp;rsquo;ve grown with our organization from a newly acquired startup to a mid-sized company to a large multinational, I&amp;rsquo;ve realized that doing the &amp;ldquo;right&amp;rdquo; thing &lt;a href="https://hedge-ops.com/alignment/">without alignment&lt;/a> with the key stakeholders is the wrong thing. It&amp;rsquo;s not enough to read a book and evaluate a tool like chef to see that it will solve our problems. It&amp;rsquo;s not even enough to talk developers into using it and seeing its value. One must do serious work to analyze the state of the business, find the pain points that are either preventing revenue or creating unnecessary cost, and then set a strategy for addressing those things.&lt;/p>
&lt;p>After that, one finds the &amp;ldquo;right&amp;rdquo; way. After that, one finds the &amp;ldquo;tool&amp;rdquo; that they&amp;rsquo;ll use to solve the problem.&lt;/p>
&lt;p>Anyone claiming to be the &amp;ldquo;right&amp;rdquo; tool or solution before that analysis happens is likely wasting your time.&lt;/p></description></item><item><title>Three Essential Components to Compliance at Velocity in the Enteprise</title><link>https://hedge-ops.com/three-essential-components-to-compliance-at-velocity-in-the-enteprise/</link><pubDate>Fri, 06 Nov 2015 08:00:26 +0000</pubDate><guid>https://hedge-ops.com/three-essential-components-to-compliance-at-velocity-in-the-enteprise/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-three-essential-components-to-compliance-at-velocity-in-the-enteprise.jpg" alt="Compliance at Velocity" />
&lt;/div>
&lt;p>Security has been the most difficult part of &lt;a href="https://hedge-ops.com/intrinsic-motivators-leading-to-chef/">implementing chef&lt;/a> in my large organization. I recently spoke with Chef about this and had a great conversation with &lt;a href="https://twitter.com/dromologue">Justin Arbuckle&lt;/a> related to it. Chef is focusing this year on helping organizations like mine to achieve compliance at velocity.&lt;/p>
&lt;p>Through the conversation and Justin&amp;rsquo;s great advice, I realized that every Chef initiative must have these three elements to be sucessful:&lt;/p>
&lt;h2 id="focus-on-the-workflow">Focus on the Workflow&lt;/h2>
&lt;p>At first I was focused on the technology and what talked to what, which commands would be used, and how awesome the outcome would be for our business. From a security perspective, however, this was worthless. Security and compliance are focused on &lt;em>how we can safely make changes to this system&lt;/em>. This means that you don&amp;rsquo;t accidentally bring production down by a cookbook change. It also means that you get approvals within a defined process before making &lt;em>any&lt;/em> change. For us, this workflow didn&amp;rsquo;t really take shape until we decided to fully adopt &lt;a href="https://github.com/chef/chef-dk/blob/master/POLICYFILE_README.md">the Policy feature&lt;/a> and workflow for change management. We then wrote extensive documentation and visio diagrams to explain every element of every step in the journey from a checkin to a production change.&lt;/p>
&lt;p>It wasn&amp;rsquo;t until we had this documented and clear that we started making progress with our security team. The lesson we learned was: &lt;em>the technology is secondary to the workflow&lt;/em>. The workflow is most important. And, for you, if you&amp;rsquo;re security conscious and you haven&amp;rsquo;t looked at Policies yet, you really need to.&lt;/p>
&lt;h2 id="make-it-real">Make it Real&lt;/h2>
&lt;p>Looking back at the last few months of our implementation, we&amp;rsquo;ve spent way too much time in visio and not enough time creating a real environment in order to demonstrate the changes we&amp;rsquo;re talking about. I spent quite a lot of time trying to consolidate the chef ecosystem into something that someone could understand in an hour-long meeting, but that was ineffective. It turns out that: (1) chef is complicated and hard, that&amp;rsquo;s why it&amp;rsquo;s so powerful, and (2) people don&amp;rsquo;t generally have time to wrap their minds around it like I have.&lt;/p>
&lt;p>Knowing what I know today, I would have started by creating an environment that demonstrated what I was talking about and then showed every stakeholder the workflow (defined above) applied to a real work situation that I could control. This is what we have done: we migrated YouTrack management to Chef and will demonstrate a secure, repeatable workflow to our security stakeholders with that.&lt;/p>
&lt;p>This will shift the conversation away from the abstract and into the implemented. It also means there are no unknowns to implementing the solution.&lt;/p>
&lt;h2 id="empower-security">Empower Security&lt;/h2>
&lt;p>Security people are used to hearing from people, &amp;ldquo;We want to do this cool thing that will make &lt;em>our&lt;/em> lives easier but will make &lt;em>your&lt;/em> lives more difficult.&amp;rdquo; It&amp;rsquo;s natural for them to  approach chef in the same way.&lt;/p>
&lt;p>Fortunately, chef has made some amazing investments lately in features that enable a partnership with security rather than an impediment. The &lt;a href="https://www.chef.io/blog/2015/04/09/chef-audit-mode-cis-benchmarks/">audit mode features&lt;/a> recently released in Chef allow a security team to map the auditor&amp;rsquo;s implementation of the security compliance into actionable requirements that can then be applied to the system.&lt;/p>
&lt;p>So, all of the sudden, the crazy devops person who wants to make everything go faster is the person who will enable automated, reported compliance for PCI throughout our data center. The posture of the security group changes from being antagonistic into being a true partnership.&lt;/p>
&lt;p>We&amp;rsquo;re planning on taking some PCI requirements and writing audit cookbooks for them. We&amp;rsquo;ll go into the auditing relationship with demonstratable proof that we are creating a more secure, auditable, and fast system for managing configuration in our hosted environment.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Empathy is probably the most important aspect of any change. Begin with how a change will improve the effectiveness of your colleagues and the ultimate profitability of your company. Security is no different. Thanks to my friends at Chef, I have a more solid strategy for meeting those goals.&lt;/p></description></item><item><title>My Advice For Chef in Large Corporations</title><link>https://hedge-ops.com/my-advice-for-chef-in-large-corporations/</link><pubDate>Wed, 23 Sep 2015 11:21:34 +0000</pubDate><guid>https://hedge-ops.com/my-advice-for-chef-in-large-corporations/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-my-advice-for-chef-in-large-corporations.jpg" alt="Advice for Chef" />
&lt;/div>
&lt;p>Here&amp;rsquo;s my simple advice about &lt;a href="https://hedge-ops.com/intrinsic-motivators-leading-to-chef/">Chef&lt;/a> I wish I would have heard a year ago:&lt;/p>
&lt;p>All of the stories about &lt;a href="http://www.itskeptic.org/content/devops-unicorns-horses-and-mules">the unicorns, rainbows, and fairies&lt;/a> that are doing absolutely amazing things with configuration automation are extremely inspirational. &lt;a href="https://hedge-ops.com/customizing-chef-book-review/">Read about them&lt;/a>. Learn about them. Enjoy their talks. Enjoy their hipster vibe. Tell yourself that you are going to be cool like that one day.&lt;/p>
&lt;p>And then forget everything they are talking about. Because what they are doing is likely too advanced for what you&amp;rsquo;re trying to do, because you&amp;rsquo;re not five years or more into your infrastructure automation initiative.&lt;/p>
&lt;p>Do this instead:&lt;/p>
&lt;p>Create these four nodes in your Data Center, behind firewalls, with no outside connectivity whatsoever:&lt;/p>
&lt;ol>
&lt;li>A Chef Server&lt;/li>
&lt;li>A Chef Client with the &lt;a href="https://downloads.chef.io/chef-dk/">ChefDK&lt;/a> installed on it&lt;/li>
&lt;li>A Chef Analytics Server&lt;/li>
&lt;li>An Artifacts Server (like SFTP server)&lt;/li>
&lt;/ol>
&lt;p>Does your security team not allow connectivity between Production and UAT? Awesome! Build two environments! Does your security team segment audited environments from non-audited environments? Awesome! Build the above four servers in &lt;em>every segmented environment you have&lt;/em>.&lt;/p>
&lt;p>You heard that right. Now isn&amp;rsquo;t the time to get into pissing matches about your &amp;ldquo;new devops vision of greatness&amp;rdquo; that will totally transfor&amp;hellip;EVERYTHING! No, now is the time to automate the things. Set up your servers and make it happen.&lt;/p>
&lt;p>If this becomes political, then you are doing it wrong.&lt;/p>
&lt;p>&lt;em>But Michael, how am I going to maintain all those environments?&lt;/em> Well, thankfully you have the joy and pleasure of (1) probably having a bad system in place which is why you are looking at Chef, and (2) Policyfiles. So get over your perfectionism and implement this easy workflow for change management:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://docs.chef.io/config_rb_policyfile.html">Use a policyfile&lt;/a> for every node in your infrastructure&lt;/li>
&lt;li>Save changes to policyfiles into Git where each team has their policyfiles in their own git repository separate from their cookbooks&lt;/li>
&lt;li>Use your CI &lt;a href="https://docs.chef.io/ctl_chef.html#chef-install">to automatically generate&lt;/a> your policyfile.lock.json files and check them into Git.&lt;/li>
&lt;li>Use your CI to &lt;a href="https://docs.chef.io/ctl_chef.html#chef-export">to package each policy into a file&lt;/a> with the &lt;a href="https://docs.chef.io/ctl_chef.html#chef-export">chef export&lt;/a> command. This has all cookbooks, policy, everything.&lt;/li>
&lt;li>&lt;a href="http://lmgtfy.com/?q=how+to+transfer+a+file+from+one+place+to+another">Get your updated policy archives to your Data Center&lt;/a>. You should be good at this. You do this already.&lt;/li>
&lt;li>&lt;a href="https://docs.chef.io/ctl_chef.html#chef-push-archive">Activate your archives&lt;/a> on the Chef Server for the appropriate policy group with the &lt;a href="https://docs.chef.io/ctl_chef.html#chef-push-archive">chef push-archive&lt;/a> command&lt;/li>
&lt;/ol>
&lt;p>It&amp;rsquo;s as easy as that. Have one or a hundred chef servers and you have those six steps above. You can save the absolutely mind blowing automation of step #5 and the simplification of everything later. That&amp;rsquo;s not the most important thing.&lt;/p>
&lt;p>Here&amp;rsquo;s what&amp;rsquo;s most important: an application team deploys an upgrade with zero outages and zero problems. Then they brag to their leadership about it because it never went this smoothly when they did it the old way.&lt;/p>
&lt;p>Notice nobody cared about a stupid security argument about what ports are open between environments (there are none in the above proposal) or trying to be &lt;a href="https://codeascraft.com/">like Etsy&lt;/a> or Netflix. People saw the zero outage and zero problems and people said to themselves, ‘Holy Shit This Is Real.&amp;rsquo;&lt;/p>
&lt;p>!(Holy Shit This Is Real)[http://i.imgur.com/ON3nwXb.png]&lt;/p>
&lt;p>Multiply the &amp;ldquo;&lt;a href="http://imgur.com/ON3nwXb">Holy Shit This Is Real&lt;/a>&amp;rdquo; moments.&lt;/p>
&lt;p>That&amp;rsquo;s what you&amp;rsquo;re trying to accomplish. Not a dream state. Not what a book said. You&amp;rsquo;re fundamentally transforming your organization&amp;rsquo;s ability to react to change, and that capability will be an absolute game changer.&lt;/p>
&lt;p>So get out of the politics, get out of the arguments, document and implement the simple strategy above, and watch perceptions of what is possible rapidly change.&lt;/p></description></item><item><title>Intrinsic Motivators Leading to Chef</title><link>https://hedge-ops.com/intrinsic-motivators-leading-to-chef/</link><pubDate>Mon, 04 May 2015 08:00:25 +0000</pubDate><guid>https://hedge-ops.com/intrinsic-motivators-leading-to-chef/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-intrinsic-motivators-leading-to-chef.jpg" alt="Intrinsic Motivators" />
&lt;/div>
&lt;p>I&amp;rsquo;m reading about culture in &lt;a href="http://amzn.to/1LfPSL8">Lean Enterprise&lt;/a>, and the author makes the point that &lt;a href="https://www.youtube.com/watch?v=u6XAPnuFjJc">bonuses aren&amp;rsquo;t the most effective means of motivating employees&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>While extrinsic motivators such as bonuses are effective in&amp;hellip;mechanical work, they actually &lt;em>reduce&lt;/em> performance in the context of knowledge work. People involved in nonroutine work are motivated by intrinsic factors summarized by Dan Pink as:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>1: &lt;em>Autonomy:&lt;/em> the desire to direct our own lives.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>2. &lt;em>Mastery:&lt;/em> the urge to get better and better at something that matters.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>3. &lt;em>Purpose:&lt;/em> the yearning to do what we do in the service of something larger than ourselves.&amp;rsquo;&lt;/p>
&lt;/blockquote>
&lt;p>I think this does a really great job of describing what my intrinsic motivators are for &lt;a href="https://hedge-ops.com/learning-chef-book-review/" title="Learning Chef Book Review">rolling out Chef&lt;/a> in our organization. Yes, I&amp;rsquo;d love to be compensated well for doing what we are doing and would never argue to the contrary. I&amp;rsquo;ve seen though in the past that money is just money and there are things that matter to me as much or more than money. Daniel Pink really hits the nail on the head about what those are:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Autonomy:&lt;/strong> providing this capability to my company will create more of an ability to direct my own path in the future. The more value I help create, the more I can be in control on how I express that value, and the more freedom I&amp;rsquo;ll have, within the context of a team, to solve problems that interest me.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Mastery:&lt;/strong> here is something that I can master: how to automate infrastructure configuration management through code using chef. This is something that can scale quite large, and I have the ability to become one of a few people in the organization that has a full handle on it. That&amp;rsquo;s exciting to me! I don&amp;rsquo;t want to be mediocre or have a skill that everyone else views as a commodity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Purpose:&lt;/strong> this is the biggest intrinsic motivator for what I&amp;rsquo;m doing. People who do configuration management today have chaotic lives and regularly stay up all hours of the night to perform their duties manually. I get to change that! Our customers don&amp;rsquo;t yet have the uptime and consistency that they expect and deserve. I get to help change that, and create a game-changing strength for our organization compared to our competitors.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I&amp;rsquo;m excited about this journey that I&amp;rsquo;m on. The motivators are far more intrinsic than extrinsic. I&amp;rsquo;ve discovered that is why they are so powerful.&lt;/p></description></item><item><title>Is Continuous Delivery Needed in Our Organization?</title><link>https://hedge-ops.com/is-continuous-delivery-needed-in-our-organization/</link><pubDate>Fri, 13 Feb 2015 08:00:49 +0000</pubDate><guid>https://hedge-ops.com/is-continuous-delivery-needed-in-our-organization/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-is-continuous-delivery-needed-in-our-organization.jpg" alt="Continuous Delivery" />
&lt;/div>
&lt;p>Continuous Delivery sounds wonderful when &lt;a href="http://www.infoq.com/interviews/jez-humble-lean-enterprise">you&amp;rsquo;re at a conference&lt;/a>. You hear about companies like &lt;a href="http://www.infoq.com/presentations/netflix-continuous-delivery">Netflix&lt;/a> that deploy to production many times per day. When &lt;a href="https://hedge-ops.com/learning-chef-book-review/">learning Chef&lt;/a>, people often ask me if we really need something that will enable us to deploy that often. Some of them are on projects that take many months to deliver, and the customer would have it no other way.&lt;/p>
&lt;p>I answer this problem by splitting it up into two questions:&lt;/p>
&lt;p>&lt;strong>How quickly does a customer want a Severity 1 defect fixed in production?&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;d say the answer to this is usually, regardless of the tooling used, within a few hours. If there is a critical defect affecting operations, no one is talking about how we&amp;rsquo;ll have that delivered in a few months. People are on phones, developers are doing what it takes to get done, and something happens. So I&amp;rsquo;d say in this situation it&amp;rsquo;s a great investment to automate your delivery so the emergency situation is as tested as the non emergency situation.&lt;/p>
&lt;p>&lt;strong>How quickly does a customer want a feature in production?&lt;/strong>&lt;/p>
&lt;p>This is a trickier question. We can separate the answer into what the customer &lt;em>wants&lt;/em> and what the customer &lt;em>expects&lt;/em>. The customer &lt;em>wants&lt;/em> to have the feature in production right now. Otherwise they wouldn&amp;rsquo;t have told you about it. I have never heard a user make a request for change in software and say, &amp;ldquo;I&amp;rsquo;m just letting you know, I&amp;rsquo;d rather have it six months from now.&amp;rdquo; Now is always better.&lt;/p>
&lt;p>However, our customers have a business to run, so they&amp;rsquo;re not going to be foolish with updates. They want us to &lt;a href="https://hedge-ops.com/safety-net/">fully test and properly deliver the software&lt;/a>. So I believe their answer to this question would be: &lt;strong>as quickly as you can safely get it to me.&lt;/strong>&lt;/p>
&lt;p>This is a flexible arrangement based on the trust we create from automating our delivery and testing process. The better job we do, the more they trust us and the quicker they get their software. It will probably never be _today_that they get updates, but also if we&amp;rsquo;re taking this seriously it also shouldn&amp;rsquo;t be a long time.&lt;/p>
&lt;p>So even for us, with real customers that are paying us to get it right, there is room for continuous delivery and Chef.&lt;/p></description></item><item><title>The Phoenix Project Book Review</title><link>https://hedge-ops.com/the-phoenix-project-book-review/</link><pubDate>Mon, 02 Feb 2015 08:00:14 +0000</pubDate><guid>https://hedge-ops.com/the-phoenix-project-book-review/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-the-phoenix-project-book-review.jpg" alt="Phoenix Project" />
&lt;/div>
&lt;p>As I&amp;rsquo;ve looked into devops more and more over the past few months, the book &lt;a href="http://amzn.to/1AinIdB">The Phoenix Project&lt;/a> has come up over and over. I finally bought it when Matt Stratton at chef basically insisted on it in &lt;a href="http://www.mattstratton.com/tech/devops">his very awesome reading list&lt;/a> to ramp yourself up on devops.&lt;/p>
&lt;p>I haven&amp;rsquo;t been into fiction very much, but over the summer I read &lt;a href="http://amzn.to/1zx9aT7">A Man in Full&lt;/a> as a means of integrating stoicism into my own philosophy. That book lit up my imagination and helped me absorb the stoic themes in a way that would be difficult had I just read an outline of stoicism. I was awakened to the reality of how fiction can transform your mind deeply by awakening all aspects of the mind during learning.&lt;/p>
&lt;p>So I was very excited to read the book. And the book did not disappoint in changing my outlook on my own career and what is possible for those around me. It taught me a few basic lessons that I believe will transform my behavior in the future:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Have a respect for the system.&lt;/strong> Up until I read this book I treated a inefficient system like it was garbage. Let&amp;rsquo;s get rid of the inefficiency! This is dumb! What I realized by reading the book is that in order for you to effectively and profitably change a system, you must have a respect and understanding of why it is the way it is. If you don&amp;rsquo;t know why it is this way, you can realize that it is an inefficient system, but you will not effectively change it.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://hedge-ops.com/measure-for-reality/">Measure, Measure, Measure&lt;/a>.&lt;/strong> The main character in the book has a great respect for measurement. People say you can&amp;rsquo;t manage what you don&amp;rsquo;t measure. I think that can be taken too far, but there is a reality in it: if I can&amp;rsquo;t measure the reality of the system, it will be very difficult for me to (1) convince people that a more efficient change is needed, and (2) know that the changes I am making are having their desired effect.&lt;/li>
&lt;li>&lt;strong>Take a Breath and Count to 2.&lt;/strong> One of the nice things about the book that taught me a lesson is when the main character interacts with various antagonists, who are obviously being reckless, dumb, and incendiary, the main character will take a breath and count to 2. Then respond. And when he responds, it&amp;rsquo;s with facts and an attitude of doing what&amp;rsquo;s best for everyone. I desperately want to exhibit this kind of tact and patience. I get so passionate about my ideas that I can forget to have patience, be calm, and move the ball forward.&lt;/li>
&lt;li>&lt;strong>Find the Bottleneck Constraint.&lt;/strong> In the book there is a legendary character named Brent. Brent can do everything. He can fix problems in seconds that everyone has spent days trying to understand. He knows why this server is the way it is, and the answer lies in activities from 2002. Brent has everyone asking him for everything and the business is at it&amp;rsquo;s knees due to Brent&amp;rsquo;s inability to clone himself into fifty other people. In the book, the main focus was on getting Brent isolated and his work properly documented, prioritized, and managed. Brent remained a hugely valuable member of the team, but they couldn&amp;rsquo;t grow until his workload was under control. And once Brent had his priorities under control, he was able to do some special things for the company.&lt;/li>
&lt;/ul>
&lt;p>I really enjoyed the Phoenix Project and recommend it to anyone wanting to lead change in their organization using lean principles. It reaches the reader in a way that a nonfiction book can&amp;rsquo;t: you can feel the tension. You drop the F-bombs right there with the reader. You feel the desperation as the core concepts come to life. And therefore when you face similar situations, you have a whole new world of awesome manufacturing theory available to you.&lt;/p>
&lt;p>This book was one of the best software-related books I&amp;rsquo;ve ever read. If you want to be a leader, please get a copy and read it. Then invite me to lunch and let&amp;rsquo;s talk about it; maybe we can change the world together.&lt;/p></description></item><item><title>Programming Ruby (Pickaxe) Book Review</title><link>https://hedge-ops.com/programming-ruby-pickaxe-book-review/</link><pubDate>Mon, 26 Jan 2015 08:00:32 +0000</pubDate><guid>https://hedge-ops.com/programming-ruby-pickaxe-book-review/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-programming-ruby-pickaxe-book-review.jpg" alt="Ruby Pickaxe" />
&lt;/div>
&lt;p>When I started &lt;a href="https://hedge-ops.com/learning-chef-book-review/">learning Chef&lt;/a> in earnest I realized quickly that my need to know what was happening was leading me to need to dive into a book on Ruby and figure out what all the magic I was seeing in Chef was really about. Chef has an amazing way of being usable for those who don&amp;rsquo;t know much Ruby, but I&amp;rsquo;m the curious type that just needs to know.&lt;/p>
&lt;p>I started out with &lt;a href="http://amzn.to/13QZz1v">The Ruby Programming Language&lt;/a> but found it to be too much of a reference work that basically stated facts about the language instead of walking the reader through the learning process. I was delighted to find &lt;a href="http://ruby-doc.com/docs/ProgrammingRuby/">Programming Ruby&lt;/a> to be exactly that.&lt;/p>
&lt;p>I was able to get through the book in a few days. It starts you out with objects, which for Ruby is the right place to start out. As I&amp;rsquo;m teaching my son how to program, the concept of objects is very easy for him to pick up. You don&amp;rsquo;t need to start with primitives, then control flow, then objects for people to learn. Learning is less logically structured than that. People don&amp;rsquo;t think like computers.&lt;/p>
&lt;p>Each chapter in the book is about fifteen to twenty minutes of time investment and walks you through an example that you can easily code on your own. I find that when learning these things, I can&amp;rsquo;t just read it and know it. I need to &lt;em>do&lt;/em> something as well. This book did a great job at keeping me engaged with my ruby interpreter as well as with my mind.&lt;/p>
&lt;p>In November I set a goal to be working with Ruby every day by February. This book did a great job at making the goal possible. It demystified how Chef was doing its magic, but it has done so much more. It has opened me up to a whole new world of possibilities by quickly being able to script a solution to a problem without having to go through all the hoops of a statically typed programming language. While I still love C# and will use it for certain problems, Ruby is not a part of my life, thanks partly to this excellent book.&lt;/p></description></item><item><title>Customizing Chef Book Review</title><link>https://hedge-ops.com/customizing-chef-book-review/</link><pubDate>Fri, 16 Jan 2015 08:00:36 +0000</pubDate><guid>https://hedge-ops.com/customizing-chef-book-review/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-customizing-chef-book-review.jpg" alt="Customizing Chef" />
&lt;/div>
&lt;p>When I was stuck trying to understand simple concepts about Chef, I bought two books: &lt;a href="http://amzn.to/1wHMEZb">Learning Chef&lt;/a> (read the review) and &lt;a href="http://amzn.to/1Ajtt8G">Customizing Chef&lt;/a> by &lt;a href="http://jonliv.es/">Jon Cowie&lt;/a>.&lt;/p>
&lt;p>Learning Chef gave me the basic concepts, but Customizing Chef gave me the deep understanding I needed to evaluate the tool for my large, complicated organization.&lt;/p>
&lt;p>In the closed-source Microsoft world, you figure out what the thing can do and just accept it. The book opened my eyes that Chef allows me to use a skill (reading code) that I&amp;rsquo;ve built up for over ten years. This leads to a much deeper understanding of how it works than just &amp;ldquo;trust us this feature does X&amp;rdquo;.&lt;/p>
&lt;p>That&amp;rsquo;s not the best thing about the book though. The thing I appreciated the most was the ability to learn from the author who implemented a world class deployment solution for &lt;a href="https://codeascraft.com/">Etsy&lt;/a> using chef. The examples he provided were real world. This wasn&amp;rsquo;t a textbook exposition on chef. You could tell that this was the real deal. Learning from him in this way reinforced the idea that chef was something I could implement in my complicated organization and that with every problem that arises I have options because of chef&amp;rsquo;s extensibility.&lt;/p>
&lt;p>The author did a wonderful job at explaining that extensibility with examples at every level. I learned how to customize chef&amp;rsquo;s notification customizations, cookbooks, and even knife itself. Every explanation of a customization didn&amp;rsquo;t merely explain it; it started with the code and took the reader through a series of examples to build up understanding of the customization.&lt;/p>
&lt;p>Customizing Chef isn&amp;rsquo;t for someone who is just starting chef. For that I would recommend the tutorials or the book Learning Chef. For someone who is tasked with implementing it in a complicated organization or someone who has been using it for months and has come across some scaling challenges, this book is a life-saver.&lt;/p></description></item><item><title>Learning Chef Book Review</title><link>https://hedge-ops.com/learning-chef-book-review/</link><pubDate>Fri, 09 Jan 2015 08:00:12 +0000</pubDate><guid>https://hedge-ops.com/learning-chef-book-review/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-learning-chef-book-review.jpg" alt="Learning Chef Book Review" />
&lt;/div>
&lt;p>A couple of months ago I found myself drowning in the learning curve that was &lt;a href="http://chef.io">chef&lt;/a>. I had great support from them, but I&amp;rsquo;m the type of person who needs to know a technology in order to appropriately evaluate it. I could tell that chef was a nice technology, but I didn&amp;rsquo;t know how.&lt;/p>
&lt;p>I went through &lt;a href="https://learn.chef.io/">the tutorials&lt;/a> but they weren&amp;rsquo;t adequate for me to understand the solution. Then I found the book &lt;a href="http://amzn.to/1Ajqayd">Learning Chef&lt;/a>.&lt;/p>
&lt;p>Learning Chef is an excellent first step in understanding the chef universe in order to get started on the right foot with the tool. I absolutely loved the tutorial, incremental approach that &lt;a href="http://misheska.com/">the&lt;/a> &lt;a href="https://sethvargo.com/">authors&lt;/a> take to go from running a recipe on your own machine to running tests on locally available virtual machines.&lt;/p>
&lt;p>Which leads me to my other pleasant surprise of this book: it lays out the techniques you can use with chef in order to test what you&amp;rsquo;re doing so you know that it works. That is what separates chef from many other solutions I&amp;rsquo;ve seen: &lt;a href="http://kitchen.ci/">they bake testing into the process itself&lt;/a>. If you&amp;rsquo;re going to treat infrastructure as code then you &lt;em>have&lt;/em> to test it as a part of your deployment pipeline. Fortunately this introductory book doesn&amp;rsquo;t skimp on this core aspect of chef.&lt;/p>
&lt;p>The third great thing about this book is that it is very approachable to those of us who have built their careers programming in the Windows environment. Every command has a hint at what you would do on a windows box. This really increased my comfort level with learning chef by allowing me to learn it in &lt;em>my own&lt;/em> development environment.&lt;/p>
&lt;p>The book is not for people who want a quick, few hour understanding of chef to get up and running. For example if I bring a new team on board with Chef, I probably won&amp;rsquo;t hand them this book; I&amp;rsquo;ll probably do a couple of day class with them to teach them the basics. If they&amp;rsquo;re the type of person (like me) who wants to dig deeper though and learns by doing, this book is a fabulous step in becoming proficient at using chef.&lt;/p></description></item><item><title>Solving SSL Validation failure with knife</title><link>https://hedge-ops.com/solving-ssl-validation-failure-with-knife/</link><pubDate>Mon, 05 Jan 2015 08:00:37 +0000</pubDate><guid>https://hedge-ops.com/solving-ssl-validation-failure-with-knife/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-solving-ssl-validation-failure-with-knife.jpg" alt="SSL Validation" />
&lt;/div>
&lt;p>After I moved to a hosted version of the &lt;a href="http://chef.io">chef&lt;/a> server, I started getting this problem with knife:&lt;/p>
&lt;pre>&lt;code>knife download environments
ERROR: SSL Validation failure connecting to host: chef.yourdomain.com - SSL_connect returned=1 errno=0 state=SSLv3 read server
certificate B: certificate verify failed
ERROR: OpenSSL::SSL::SSLError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify
failed
&lt;/code>&lt;/pre>&lt;p>There are a couple of ways to fix this. The short-term way is to ignore SSL on your knife.rb file with this setting:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">ssl_verify_mode &lt;span style="color:#990073">:verify_none&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The better and more long-term solution is to add this line to the knife.rb file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">trusted_certs_dir        &lt;span style="color:#d14">&amp;#34;&lt;/span>&lt;span style="color:#d14">#{&lt;/span>current_dir&lt;span style="color:#d14">}&lt;/span>&lt;span style="color:#d14">/trusted_certs&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then run:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">knife ssl fetch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I then had to ignore the trusted_certs file in my git repo.&lt;/p>
&lt;p>Thanks to &lt;a href="http://www.mattstratton.com/">Matt Stratton&lt;/a> and his colleagues at &lt;a href="http://chef.io">chef&lt;/a> for helping me find the solution.&lt;/p></description></item></channel></rss>