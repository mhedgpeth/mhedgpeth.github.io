<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Meeting on Michael Hedgpeth</title><link>https://hedge-ops.com/tags/meeting/</link><description>Recent content in Meeting on Michael Hedgpeth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>MIT</copyright><lastBuildDate>Fri, 06 Mar 2015 08:00:35 +0000</lastBuildDate><atom:link href="https://hedge-ops.com/tags/meeting/index.xml" rel="self" type="application/rss+xml"/><item><title>Kanban Standup Meetings: A Way Out of Standup Hell?</title><link>https://hedge-ops.com/kanban-standup-meetings-a-way-out-of-standup-hell/</link><pubDate>Fri, 06 Mar 2015 08:00:35 +0000</pubDate><guid>https://hedge-ops.com/kanban-standup-meetings-a-way-out-of-standup-hell/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-kanban-standup-meetings-a-way-out-of-standup-hell.jpg" alt="Kanban Standup" />
&lt;/div>
&lt;p>In every Agile project, you&amp;rsquo;re supposed to have a daily standup meeting to facilitate communication and collective ownership. Intentions are always great at the beginning, but for me they have always descended into a tolerable mess. Can the &lt;a href="defining-the-kanban-input-queue/">Kanban method&lt;/a> teach us anything about how to do them better?&lt;/p>
&lt;p>&lt;a href="http://www.mountaingoatsoftware.com/agile/scrum/daily-scrum">If you&amp;rsquo;re following the Scrum process&lt;/a>, the meeting should last 10-15 minutes and everyone should go around the room talking about what they accomplished yesterday, what they plan on doing today, and what, if anything, is blocking them. Every software development methodology I have read tells you to do them; I&amp;rsquo;ve even seen people have success with them on waterfall projects.&lt;/p>
&lt;p>Everyone is excited about doing the standups correctly, and then someone gets tired and &lt;a href="http://www.batimes.com/articles/seven-common-mistakes-with-the-daily-stand-up-meeting.html">everyone sits down&lt;/a>. Eventually what tends to happen on my team is that everyone reports to &lt;em>me&lt;/em>, the leader, what they intend on doing today and I give them about 10-30 seconds of comment to help them along. While I&amp;rsquo;m engaging with each person, the others are thinking about other things. There is no collective ownership.&lt;/p>
&lt;p>This is by no means a functional standup meeting.&lt;/p>
&lt;p>What to do about this? &lt;a href="http://www.djaa.com/">David Anderson&lt;/a> has some suggestions in his &lt;a href="http://amzn.to/1yaebV5">Kanban book&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>The need to go around the room and ask the three questions is obviated by the card wall. The wall contains all the information about who is working on what. Attendees who come regularly can see what has changed since yesterday and whether something is blocked or is not visually evident. So standups take a different format with a Kanban system. &lt;strong>The focus is on the flow of work.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;ve done these types before, and it is very effective. The question is now, &amp;ldquo;What needs to happen today to move things forward?&amp;rdquo; and everyone participates. This becomes an obvious group exercise, not a task reporting meeting to management.&lt;/p>
&lt;p>So in the new standup, you start with the board on the right side and talk about every card. The team collectively identifies the actions taken that day to move it forward. Items that are blocked are highlighted and the team plans for a course of action. While it is driven by a leader, the person driving it can change and everyone is engaged.&lt;/p>
&lt;p>Also this way of doing standups scales well. Anderson writes:&lt;/p>
&lt;blockquote>
&lt;p>Daniel Vacanti ran a successful standup with more than 50 people at a project at Corbis in 2007 where, despite the large size of the team, the meeting was completed in around 10 minutes every morning.&lt;/p>
&lt;/blockquote>
&lt;p>A ten minute meeting with fifty people; that&amp;rsquo;s amazing! I&amp;rsquo;m looking forward to getting my standups out of standup hell.&lt;/p></description></item><item><title>Defining the Kanban Input Queue</title><link>https://hedge-ops.com/defining-the-kanban-input-queue/</link><pubDate>Mon, 02 Mar 2015 10:00:33 +0000</pubDate><guid>https://hedge-ops.com/defining-the-kanban-input-queue/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-defining-the-kanban-input-queue.jpg" alt="Defining the Input Queue" />
&lt;/div>
&lt;p>I have been reading &lt;a href="http://www.djaa.com/">David Anderson&amp;rsquo;s&lt;/a> wonderful book on &lt;a href="http://amzn.to/14OSLBa">Kanban&lt;/a> this week as a means to get more specific on the project improvements I want to make based &lt;a href="https://hedge-ops.com/the-one-metric-that-matters/">on what I&amp;rsquo;m learning&lt;/a> with &lt;a href="http://amzn.to/1y9Xjhh">Lean Enterprise&lt;/a>. This book has disrupted up my approach to backlog management and prioritization. Within a Scrum or Waterfall process, whenever a customer asks for a request, you put it on a list and regularly prioritize that list. The backlog as a whole is the input queue in the system.&lt;/p>
&lt;p>Currently there are 397 issues on our backlog. We can&amp;rsquo;t possibly be meaningfully prioritizing all of these.&lt;/p>
&lt;p>In a Kanban system, this is seen as waste. Why spend all this time prioritizing something when only the top five things at any one time are important? Is there a way to communicate to users that we just won&amp;rsquo;t get around to certain things?&lt;/p>
&lt;p>At &lt;a href="http://www.corbisimages.com/">Corbis&lt;/a>, Anderson tried something different: he figured out how many items that were needed in the input queue to keep the system going. In other words, we don&amp;rsquo;t want to be caught not knowing what to do next, so what number of items in the input queue would keep that from ever happening? Usually the number is less than five.&lt;/p>
&lt;p>Every week the team meets with the stakeholders and asks the simple question, &amp;ldquo;What are the most important X things to do next?&amp;rdquo; These items can be pulled off of the backlog or they could even be new. The stakeholders can discuss what the most important changes are and why. The important items are determined and then the changes flow through the system.&lt;/p>
&lt;p>Now that this discussion is happening regularly, the territorial fighting should decrease. It&amp;rsquo;s up to those in the meeting to come to an agreement on what is next. If your thing isn&amp;rsquo;t done this week, then perhaps it will be done next week. Nothing is set in stone.&lt;/p>
&lt;p>After a few months of this, it should become apparent that some items on the backlog have very little chance of getting done. Therefore, if a backlog item is more than six months old, we should close it. We can always reopen it if is a priority, but it keeps open communication with those requesting changes about whether to expect the change anytime soon.&lt;/p>
&lt;p>Yesterday in a project meeting one of our senior developers recommended that we focus more on ensuring buy-in from teams that we are serving for what we are doing. At the time I was focused on how to define appropriate metrics and so didn&amp;rsquo;t know how to implement her point. But now I see that if I follow this pattern of input queue management, I&amp;rsquo;ll be able to bring together stakeholder&amp;rsquo;s desire to have something &lt;em>right now&lt;/em> and their ability to ensure that no other teams are blocking us from creating that outcome. I&amp;rsquo;m really excited to see how this suggestion will work for us.&lt;/p></description></item></channel></rss>