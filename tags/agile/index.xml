<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>agile on Michael Hedgpeth</title><link>https://hedge-ops.com/tags/agile/</link><description>Recent content in agile on Michael Hedgpeth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>MIT</copyright><lastBuildDate>Mon, 02 Mar 2015 10:00:33 +0000</lastBuildDate><atom:link href="https://hedge-ops.com/tags/agile/index.xml" rel="self" type="application/rss+xml"/><item><title>Defining the Kanban Input Queue</title><link>https://hedge-ops.com/defining-the-kanban-input-queue/</link><pubDate>Mon, 02 Mar 2015 10:00:33 +0000</pubDate><guid>https://hedge-ops.com/defining-the-kanban-input-queue/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-defining-the-kanban-input-queue.jpg" alt="Defining the Input Queue" />
&lt;/div>
&lt;p>I have been reading &lt;a href="http://www.djaa.com/">David Anderson&amp;rsquo;s&lt;/a> wonderful book on &lt;a href="http://amzn.to/14OSLBa">Kanban&lt;/a> this week as a means to get more specific on the project improvements I want to make based &lt;a href="https://hedge-ops.com/the-one-metric-that-matters/">on what I&amp;rsquo;m learning&lt;/a> with &lt;a href="http://amzn.to/1y9Xjhh">Lean Enterprise&lt;/a>. This book has disrupted up my approach to backlog management and prioritization. Within a Scrum or Waterfall process, whenever a customer asks for a request, you put it on a list and regularly prioritize that list. The backlog as a whole is the input queue in the system.&lt;/p>
&lt;p>Currently there are 397 issues on our backlog. We can&amp;rsquo;t possibly be meaningfully prioritizing all of these.&lt;/p>
&lt;p>In a Kanban system, this is seen as waste. Why spend all this time prioritizing something when only the top five things at any one time are important? Is there a way to communicate to users that we just won&amp;rsquo;t get around to certain things?&lt;/p>
&lt;p>At &lt;a href="http://www.corbisimages.com/">Corbis&lt;/a>, Anderson tried something different: he figured out how many items that were needed in the input queue to keep the system going. In other words, we don&amp;rsquo;t want to be caught not knowing what to do next, so what number of items in the input queue would keep that from ever happening? Usually the number is less than five.&lt;/p>
&lt;p>Every week the team meets with the stakeholders and asks the simple question, &amp;ldquo;What are the most important X things to do next?&amp;rdquo; These items can be pulled off of the backlog or they could even be new. The stakeholders can discuss what the most important changes are and why. The important items are determined and then the changes flow through the system.&lt;/p>
&lt;p>Now that this discussion is happening regularly, the territorial fighting should decrease. It&amp;rsquo;s up to those in the meeting to come to an agreement on what is next. If your thing isn&amp;rsquo;t done this week, then perhaps it will be done next week. Nothing is set in stone.&lt;/p>
&lt;p>After a few months of this, it should become apparent that some items on the backlog have very little chance of getting done. Therefore, if a backlog item is more than six months old, we should close it. We can always reopen it if is a priority, but it keeps open communication with those requesting changes about whether to expect the change anytime soon.&lt;/p>
&lt;p>Yesterday in a project meeting one of our senior developers recommended that we focus more on ensuring buy-in from teams that we are serving for what we are doing. At the time I was focused on how to define appropriate metrics and so didn&amp;rsquo;t know how to implement her point. But now I see that if I follow this pattern of input queue management, I&amp;rsquo;ll be able to bring together stakeholder&amp;rsquo;s desire to have something &lt;em>right now&lt;/em> and their ability to ensure that no other teams are blocking us from creating that outcome. I&amp;rsquo;m really excited to see how this suggestion will work for us.&lt;/p></description></item><item><title>Embrace Difficulty</title><link>https://hedge-ops.com/embrace-difficulty/</link><pubDate>Wed, 02 Jul 2014 08:12:45 +0000</pubDate><guid>https://hedge-ops.com/embrace-difficulty/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-embrace-difficulty.jpg" alt="Embrace Difficulty" />
&lt;/div>
&lt;p>It was an impossible project and I was scared. The fact that &lt;a href="https://hedge-ops.com/christmas-with-russians/">the world was ending&lt;/a> was the least of my concerns. We have software that is so flexible and configurable that it was impossible to fully test all the combinations of options our customers could run. My leadership at the time asked us to mitigate this by recording everything that happened at a restaurant and playing it back it back internally on prereleased software to make sure everything behaved the same.&lt;/p>
&lt;p>I can&amp;rsquo;t overstate how I felt: this problem scared the crap out of me. So much could go wrong, and so many issues to figure out. How would I get the software started? How would I know when/if the simulation was running correctly? What about all the other automation projects I had heard about over the years that had been cancelled due to lack of results? Would this project (and my career with it) be the next one thrown on the scrap heap when management realizes how impossible it is?&lt;/p>
&lt;p>I had to step back, step away from my fear, and think of a good strategy. We were facing a difficult problem. The process we would come up with was likely to fail. A lot. Instead of running &lt;em>away&lt;/em> from that failure, we needed to embrace it. We needed to welcome it with open arms. Because &lt;strong>if we didn&amp;rsquo;t face the failure head on, we would never get past it, and we would fail.&lt;/strong>&lt;/p>
&lt;p>So we created a system where we ran any automation we had &lt;em>every day&lt;/em>. In fact, this is how we do it today, with over 150 restaurants running in a virtual environment and over 4,000 small scenarios. We do it every night. Do we have to do it every night? Technically no. But we embrace the difficulty of it by doing it every night so we get quick feedback of the problems and keep it on track.&lt;/p>
&lt;p>People still argue with me over whether we &lt;em>have&lt;/em> to run this every night. I&amp;rsquo;m fine with that; I know it seems silly at times. But I think it&amp;rsquo;s key to our success: &lt;strong>we embrace the difficulty by doing difficult things all the time, so we can learn how to deal with them and make them not difficult anymore.&lt;/strong>&lt;/p>
&lt;p>Here are a few other examples of embracing the difficulty in a system:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>When&lt;/th>
&lt;th>Embrace Difficulty By&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Doing Laundry&lt;/td>
&lt;td>Doing it every day&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Budgeting&lt;/td>
&lt;td>Starting every month and facing reality&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Blogging&lt;/td>
&lt;td>Keeping a month ahead and posting at a regular pace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Learning to Cook&lt;/td>
&lt;td>Cooking a regular meal on a day of a week&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Keeping the Family Close&lt;/td>
&lt;td>Eating dinner together every night&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>What have you avoided that you need to embrace in order to overcome it?&lt;/p></description></item></channel></rss>