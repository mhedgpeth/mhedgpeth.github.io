<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Input Queue on Michael Hedgpeth</title><link>https://hedge-ops.com/tags/input-queue/</link><description>Recent content in Input Queue on Michael Hedgpeth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>MIT</copyright><lastBuildDate>Fri, 13 Mar 2015 08:00:45 +0000</lastBuildDate><atom:link href="https://hedge-ops.com/tags/input-queue/index.xml" rel="self" type="application/rss+xml"/><item><title>Kanban Decoupling Input Cadence from Delivery Cadence</title><link>https://hedge-ops.com/kanban-decoupling-input-cadence-from-delivery-cadence/</link><pubDate>Fri, 13 Mar 2015 08:00:45 +0000</pubDate><guid>https://hedge-ops.com/kanban-decoupling-input-cadence-from-delivery-cadence/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-kanban-decoupling-input-cadence-from-delivery-cadence.jpg" alt="Decopuling Input Cadence" />
&lt;/div>
&lt;p>For my entire career, I have approached software development project planning at the level of the release. In waterfall, you plan a six month release, the first phase of which is to design and estimate the requested features to determine how much can go into the release. You are supposed to plan the whole thing. In Scrum, you plan a three week release up front. The cadence is shorter, but the process very similar. &lt;a href="http://www.djaa.com/">David Anderson&amp;rsquo;s&lt;/a> &lt;a href="http://amzn.to/1yaDiHw">Kanban book&lt;/a> provides another approach that separates &lt;a href="https://hedge-ops.com/defining-the-kanban-input-queue/">the input process&lt;/a> from the output process.&lt;/p>
&lt;p>In Kanban, the input queue is largely there to serve the development machine. You want to have as many items in the queue as are needed to not have anyone waiting for new work. On a typical small team, that is probably five items. A product manager would manage this queue by creating a regular meeting for all stakeholders to collectively decide what needs to happen next. Anderson recommends that the meeting happen once a week. If the product is processing work at an agile pace, this should be enough to refill the most important 2-3 items.&lt;/p>
&lt;p>It&amp;rsquo;s easy to think that this means that there should be weekly releases. When you step back and think about it, the release cycle has its own set of constraints. Remember that the input queue&amp;rsquo;s function is to provide the development team with the most valuable items to do next. The function of the delivery is to provide that value to the customers while minimizing delivery costs.&lt;/p>
&lt;p>Let&amp;rsquo;s say delivery of the software means that thousands of people need to be trained, materials need to be printed, and a marketing program needs to kick off. In this situation, the fixed costs of the delivery are high and thus it is desirable that they not happen as frequently. Can you imagine doing such a release every two weeks? That would be insane!&lt;/p>
&lt;p>On the other hand, delivery of the software might be very cheap because of tools &lt;a href="https://hedge-ops.com/learning-chef-book-review/">like chef&lt;/a> and training is built into the product. In this case, it makes sense to release more often. Perhaps a daily release would be a great idea for this type of team.&lt;/p>
&lt;p>A part of the lean movement focuses on taking a situation like the former one and turning it into the latter one. Lowered fixed costs of release means that value can flow more freely to customers, and ROI happens quicker. But that&amp;rsquo;s a strategic choice. At the beginning, you get the release cycle you get, and continuously improve to a better one. But because we have decoupled the input side of the equation, we get a team that is focused, flowing the highest priority work quickly through the system. I think that this will be a gamechanger for how my teams do product management going forward.&lt;/p></description></item><item><title>Defining the Kanban Input Queue</title><link>https://hedge-ops.com/defining-the-kanban-input-queue/</link><pubDate>Mon, 02 Mar 2015 10:00:33 +0000</pubDate><guid>https://hedge-ops.com/defining-the-kanban-input-queue/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-defining-the-kanban-input-queue.jpg" alt="Defining the Input Queue" />
&lt;/div>
&lt;p>I have been reading &lt;a href="http://www.djaa.com/">David Anderson&amp;rsquo;s&lt;/a> wonderful book on &lt;a href="http://amzn.to/14OSLBa">Kanban&lt;/a> this week as a means to get more specific on the project improvements I want to make based &lt;a href="https://hedge-ops.com/the-one-metric-that-matters/">on what I&amp;rsquo;m learning&lt;/a> with &lt;a href="http://amzn.to/1y9Xjhh">Lean Enterprise&lt;/a>. This book has disrupted up my approach to backlog management and prioritization. Within a Scrum or Waterfall process, whenever a customer asks for a request, you put it on a list and regularly prioritize that list. The backlog as a whole is the input queue in the system.&lt;/p>
&lt;p>Currently there are 397 issues on our backlog. We can&amp;rsquo;t possibly be meaningfully prioritizing all of these.&lt;/p>
&lt;p>In a Kanban system, this is seen as waste. Why spend all this time prioritizing something when only the top five things at any one time are important? Is there a way to communicate to users that we just won&amp;rsquo;t get around to certain things?&lt;/p>
&lt;p>At &lt;a href="http://www.corbisimages.com/">Corbis&lt;/a>, Anderson tried something different: he figured out how many items that were needed in the input queue to keep the system going. In other words, we don&amp;rsquo;t want to be caught not knowing what to do next, so what number of items in the input queue would keep that from ever happening? Usually the number is less than five.&lt;/p>
&lt;p>Every week the team meets with the stakeholders and asks the simple question, &amp;ldquo;What are the most important X things to do next?&amp;rdquo; These items can be pulled off of the backlog or they could even be new. The stakeholders can discuss what the most important changes are and why. The important items are determined and then the changes flow through the system.&lt;/p>
&lt;p>Now that this discussion is happening regularly, the territorial fighting should decrease. It&amp;rsquo;s up to those in the meeting to come to an agreement on what is next. If your thing isn&amp;rsquo;t done this week, then perhaps it will be done next week. Nothing is set in stone.&lt;/p>
&lt;p>After a few months of this, it should become apparent that some items on the backlog have very little chance of getting done. Therefore, if a backlog item is more than six months old, we should close it. We can always reopen it if is a priority, but it keeps open communication with those requesting changes about whether to expect the change anytime soon.&lt;/p>
&lt;p>Yesterday in a project meeting one of our senior developers recommended that we focus more on ensuring buy-in from teams that we are serving for what we are doing. At the time I was focused on how to define appropriate metrics and so didn&amp;rsquo;t know how to implement her point. But now I see that if I follow this pattern of input queue management, I&amp;rsquo;ll be able to bring together stakeholder&amp;rsquo;s desire to have something &lt;em>right now&lt;/em> and their ability to ensure that no other teams are blocking us from creating that outcome. I&amp;rsquo;m really excited to see how this suggestion will work for us.&lt;/p></description></item></channel></rss>