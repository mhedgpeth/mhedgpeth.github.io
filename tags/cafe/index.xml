<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cafe on Michael Hedgpeth</title><link>https://hedge-ops.com/tags/cafe/</link><description>Recent content in cafe on Michael Hedgpeth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>MIT</copyright><lastBuildDate>Thu, 18 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://hedge-ops.com/tags/cafe/index.xml" rel="self" type="application/rss+xml"/><item><title>Chef Rollback with Policyfiles and Cafe</title><link>https://hedge-ops.com/chef-rollback/</link><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/chef-rollback/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-chef-rollback.jpg" alt="Failure Masquerading as Success" />
&lt;/div>
&lt;p>When we first looked at application release automation tools, one of the first things people told me we needed was a solid rollback mechanism. One of my colleagues even insisted without satisfying his rollback scenarios, it was silly even looking at a tool for application release automation. I can definitely understand the sentiment; when you&amp;rsquo;re doing a change and that change goes badly you really want to have a mechanism to get out of that bad situation.&lt;/p>
&lt;p>It would be fantastic if we had a time machine and were able to simply tell ourselves &amp;ldquo;stop!&amp;rdquo; But in lieu of that, we have to devise a plan for when we need to get out of a change we made, we are able to do so safely.&lt;/p>
&lt;h1 id="policyfiles-simplify-rollback">Policyfiles Simplify Rollback&lt;/h1>
&lt;p>Fortunately, we have the &lt;a href="https://hedge-ops.com/policyfiles/">policyfiles&lt;/a> feature at our disposal which makes &lt;strong>everything&lt;/strong> in this area so much simpler. In the classical Chef model, your rollback might be a rollback change to an environment pin, or a role, or a cookbook, or a combination of all of these. And if you, like most people in a panic, made some on the fly changes to any of these, good luck with getting out of that mess.&lt;/p>
&lt;p>With policyfiles, rollback of your Chef code is quite easy; you simply upload the old version of the policy to the Chef server and reconverge your nodes. That&amp;rsquo;s it. It&amp;rsquo;s virtually impossible to get yourself into a mess where you can&amp;rsquo;t somehow &amp;ldquo;remember&amp;rdquo; what your rollback was.&lt;/p>
&lt;h1 id="with-a-defined-deployment-its-even-simpler">With a Defined Deployment Its Even Simpler&lt;/h1>
&lt;p>And, now that I&amp;rsquo;ve shown you how you can do a controlled, atomic deployment with a &lt;a href="https://hedge-ops.com/policyfile-deployment-with-cafe-and-psake/">policyfile deployment&lt;/a>, things get even easier! You &lt;strong>just&lt;/strong> went to Jenkins and uploaded policy &lt;code>1.0.32&lt;/code> for your nodes related to product X. Things went south. Now go back to that same place and enter in &lt;code>1.0.31&lt;/code> and roll out that new policy to all your nodes, safely and immediately with &lt;a href="https://hedge-ops.com/introducing-cafe/">cafe&lt;/a>.&lt;/p>
&lt;h1 id="sometimes-a-data-bag-will-suffice">Sometimes a Data Bag will Suffice&lt;/h1>
&lt;p>If you&amp;rsquo;re just dealing with whether you&amp;rsquo;re going to deploy version &lt;code>A&lt;/code> or &lt;code>B&lt;/code> of your application, with Chef you can just store which version you&amp;rsquo;re on in a Data Bag. If your Chef code doesn&amp;rsquo;t need to change, a &amp;ldquo;rollback&amp;rdquo; is simply an update of your Data Bag and then a convergence with cafe. I&amp;rsquo;ve found it a best practice to decouple my Chef code, wrapped in policies, with what version my application is on, stored in Data Bags.&lt;/p>
&lt;h1 id="code-a-rollback-in-critical-situations">Code a Rollback in Critical Situations&lt;/h1>
&lt;p>It would be silly of me to suggest merely rolling back chef code and product code are enough to satisfy a true rollback. In some situations that isn&amp;rsquo;t sufficient. Let&amp;rsquo;s say we have a situation like this:&lt;/p>
&lt;pre>&lt;code>Version 1.0
website myweb exists
Version 2.0
website myweb exists
website newmicroservice exists
&lt;/code>&lt;/pre>&lt;p>And let&amp;rsquo;s say you went from version &lt;code>1.0&lt;/code> to version &lt;code>2.0&lt;/code>. And things went south, so you rolled back. In this situation, with Chef you would still have &lt;code>newmicoservice&lt;/code> there. So to facilitate this kind of change, you&amp;rsquo;ll want to do this:&lt;/p>
&lt;pre>&lt;code>Version 1.0
website myweb exists
Version 1.1
website myweb exists
website newmicroservice DOES NOT exist
Version 2.0
website myweb exists
website newmicroservice exists
&lt;/code>&lt;/pre>&lt;p>Here you&amp;rsquo;re giving your Chef code an ability to roll back and undo stuff you plan on doing in the future. This is smart planning. I recommend it for any time a product adds new features; always add a version of the cookbook (or better yet, an attribute to a cookbook) that will turn that thing off, so if you need to roll back you can roll back safely.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Hopefully by now you can see that the rollback mechanisms offered by Chef Policyfiles are an excellent alternative to the coded rollback in other application release automation tools. In addition to this, you get all of the fantastic elements of infrastructure as code with Chef and infrastructure testing with InSpec. The holistic approach is what gets you a full solution that will create the velocity you&amp;rsquo;re looking for.&lt;/p></description></item><item><title>Cafe Cookbook</title><link>https://hedge-ops.com/cafe-cookbook/</link><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/cafe-cookbook/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-cafe-cookbook.jpg" alt="Cafe Cookbook" />
&lt;/div>
&lt;p>With a &lt;a href="policyfile-deployment-with-cafe-and-psake">solid deployment pipeline&lt;/a> in place for running Chef that depends on &lt;a href="https://hedge-ops.com/introducing-cafe/">Cafe&lt;/a> for a safe, atomic, and controlled rollout of Chef &lt;a href="https://hedge-ops.com/policyfiles/">policy&lt;/a> changes, it has become more important than ever to utilize &lt;a href="https://hedge-ops.com/introducing-cafe/">cafe&lt;/a> to manage itself and Chef on a machine. The &lt;a href="https://github.com/mhedgpeth/cafe-cookbook">&lt;code>cafe&lt;/code> cookbook&lt;/a> does just that.&lt;/p>
&lt;p>The cafe cookbook makes it easy to ensure that Cafe is installed and configured properly on a machine and will manage Chef upgrades that happen outside of when Chef runs.&lt;/p>
&lt;p>It does this very easily by giving you access to two resources:&lt;/p>
&lt;h2 id="cafe-resource">&lt;code>cafe&lt;/code> resource&lt;/h2>
&lt;p>To install and configure Cafe, you should use the &lt;code>cafe&lt;/code> resource, for example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">cafe &lt;span style="color:#d14">&amp;#39;cafe&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
download_source &lt;span style="color:#d14">&amp;#39;https://github.com/mhedgpeth/cafe/releases/download/0.9.2-beta/cafe-win10-x64-0.9.2.0.zip&amp;#39;&lt;/span>
download_checksum &lt;span style="color:#d14">&amp;#39;75707978E48B51EC9564D209A9B6CA8F4B563AC4B128C34614435899FAD787C7&amp;#39;&lt;/span>
version &lt;span style="color:#d14">&amp;#39;0.9.2.0&amp;#39;&lt;/span>
installer &lt;span style="color:#d14">&amp;#39;cafe-win10-x64-0.9.2.0.zip&amp;#39;&lt;/span>
cafe_install_root &lt;span style="color:#d14">&amp;#39;D:&amp;#39;&lt;/span>
chef_interval &lt;span style="color:#099">1800&lt;/span>
service_port &lt;span style="color:#099">59320&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See the &lt;a href="https://github.com/mhedgpeth/cafe/releases">Cafe Releases&lt;/a> page to get the &lt;code>download_source&lt;/code>, &lt;code>version&lt;/code>, and &lt;code>installer&lt;/code> that you need to use. You&amp;rsquo;ll have to calculate your own checksum at the moment. The last three properties are configuration elements of Cafe itself; if you omit them, the resource will use sensible default values.&lt;/p>
&lt;p>You should also notice that this resource is very friendly to air-gapped environments; you can use any URL you need to use here, as long as you get it downloaded and it matches the checksum. We use &lt;a href="https://www.jfrog.com/artifactory/">artifactory&lt;/a> for our artifacts and love it.&lt;/p>
&lt;p>If you are introducing Cafe to existing Chef nodes because you want to manage Chef that way now, and your &lt;code>cafe_install_root&lt;/code> is set to &lt;code>D:&lt;/code>, it will dutifully install Cafe for the first time in &lt;code>D:\chef&lt;/code>. On an upgrade, the &lt;code>cafe&lt;/code> service asks its &lt;code>cafe Updater&lt;/code> service friend to update &lt;code>cafe&lt;/code> for it, because services can&amp;rsquo;t update themselves. This all happens after the Chef run is finished, assuming that Cafe is running Chef.&lt;/p>
&lt;h2 id="cafe_chef-resource">&lt;code>cafe_chef&lt;/code> resource&lt;/h2>
&lt;p>You&amp;rsquo;ll also want to keep the &lt;code>chef-client&lt;/code> application up to date and consistent on all of your nodes. You&amp;rsquo;ll want to make sure you do this when Chef is not running as well. Fortunately, Cafe has you covered in this regard. Simply declare what you want Chef to look like on the machine, and Cafe handles the rest:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">cafe_chef &lt;span style="color:#d14">&amp;#39;chef-client&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">do&lt;/span>
download_source &lt;span style="color:#d14">&amp;#39;https://packages.chef.io/files/stable/chef/13.0.118/windows/2012r2/chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span>
installer &lt;span style="color:#d14">&amp;#39;chef-client-13.0.118-1-x64.msi&amp;#39;&lt;/span>
download_checksum &lt;span style="color:#d14">&amp;#39;c594965648e20a2339d6f33d236b4e3e22b2be6916cceb1b0f338c74378c03da&amp;#39;&lt;/span>
version &lt;span style="color:#d14">&amp;#39;13.0.118&amp;#39;&lt;/span>
cafe_install_root &lt;span style="color:#d14">&amp;#39;D:&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As with the scenario above, you can use any source you want from a private repository like artifactory. This is the equivalent of running &lt;code>cafe chef download 13.0.118&lt;/code> and then &lt;code>cafe install chef 13.0.118&lt;/code> but gives you more control to download the file.&lt;/p>
&lt;p>Also, you can omit the &lt;code>cafe_install_root&lt;/code> if you want to install everything on &lt;code>C:&lt;/code>.&lt;/p>
&lt;p>It&amp;rsquo;s important to understand what exactly is happening here, because this is at the genesis of why Cafe exists. You would expect Cafe to be &lt;em>running&lt;/em> Chef at this moment, so you don&amp;rsquo;t want it to upgrade Chef immediately. So here we&amp;rsquo;re &lt;strong>not&lt;/strong> upgrading Chef, we&amp;rsquo;re &lt;strong>requesting&lt;/strong> that Cafe upgrade Chef after the Chef client runs. The &lt;em>desired state&lt;/em> of the system is &amp;ldquo;I want Cafe to make the Chef client be on version 13.0.118&amp;rdquo;. Cafe handles the rest!&lt;/p>
&lt;p>So you don&amp;rsquo;t need to worry about timing here. Cafe runs &lt;strong>all&lt;/strong> of its jobs sequentially because it knows that you don&amp;rsquo;t want things stepping on other things. So sleep peacefully, my friend!&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>I hope you&amp;rsquo;re as excited as I am about the promise Cafe brings to the Chef runtime. With Cafe, you can still use Chef to manage itself and Cafe on an application, but you can trust that Cafe will handle this management with grace and no drama. If you&amp;rsquo;re interested in deploying or contributing to Cafe, I&amp;rsquo;d love to hear from you about it. I think it addresses a critical need within the Chef ecosystem.&lt;/p></description></item><item><title>Policyfile Deployment with Cafe and Psake</title><link>https://hedge-ops.com/policyfile-deployment-with-cafe-and-psake/</link><pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/policyfile-deployment-with-cafe-and-psake/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-policyfile-deployment-with-cafe-and-psake.jpg" alt="Policyfile Deployment with Cafe" />
&lt;/div>
&lt;p>Our &lt;a href="https://hedge-ops.com/cookbook-development-with-rakefile/">cookbook builds&lt;/a> make a &lt;a href="https://hedge-ops.com/cookbook-pipeline-with-jenkinsfile/">pipeline&lt;/a> which places them into a private supermarket. Then separate &lt;a href="https://hedge-ops.com/policyfile-pipeline-with-jenkinsfile/">policyfile repository pipelines&lt;/a> grouped by product get uploaded to an artifactory server.&lt;/p>
&lt;p>Now for the exciting part: In an air-gapped environment, we can easily update all the things chef-related and do that within a transactional interaction with the Chef Server and all of its nodes.&lt;/p>
&lt;p>This is the part where my project &lt;a href="https://hedge-ops.com/introducing-cafe/">cafe&lt;/a> really shines. In this situation where you&amp;rsquo;re rolling out a &lt;a href="https://hedge-ops.com/policyfiles/">policy&lt;/a> to a Chef Server, you might have a lot of issues; you might have to wait an indeterminate time for chef to run on each node. You may not be able to predict if all the right policies hit the nodes when they run next. It&amp;rsquo;s a very scary moment.&lt;/p>
&lt;p>But we can automate that crazy situation and make it a peaceful, good situation. We do that with cafe and &lt;a href="https://github.com/psake/psake">psake&lt;/a> a powershell-based automation mechanism.&lt;/p>
&lt;p>Why psake? Within our windows-heavy environment people want to see powershell. So it makes sense for us to orchestrate our deployment of chef changes with a powershell-based mechanism. If I was in a ruby shop I&amp;rsquo;d probably use rake. Whatever it takes; the main requirements are that it be a staged model where if a stage fails then the execution stops. Pretty much any make-based system will do that.&lt;/p>
&lt;h1 id="psake-deployment-script-with-cafe">Psake Deployment Script with Cafe&lt;/h1>
&lt;p>So let&amp;rsquo;s jump into our &lt;code>deploy.ps1&lt;/code> which is our script to deploy all the things to the Chef Server and rerun Chef on all the servers:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">properties {
&lt;span style="color:#998;font-style:italic">#put properties here like servers&lt;/span>
&lt;span style="color:#008080">$servers&lt;/span> = @( &lt;span style="color:#d14">&amp;#39;database-server&amp;#39;&lt;/span>, &lt;span style="color:#d14">&amp;#39;webserver&amp;#39;&lt;/span>)
&lt;span style="color:#008080">$policy_group&lt;/span> = &lt;span style="color:#d14">&amp;#39;qa&amp;#39;&lt;/span>
&lt;span style="color:#008080">$product_prefix&lt;/span> = &lt;span style="color:#d14">&amp;#39;myproduct&amp;#39;&lt;/span>
}
Task &lt;span style="color:#000;font-weight:bold">default&lt;/span> -description &lt;span style="color:#d14">&amp;#34;runs a full deployment&amp;#34;&lt;/span> `
-depends PauseChef, UpdatePolicies, ConvergeNodes, ResumeChef
Task PauseChef -description &lt;span style="color:#d14">&amp;#34;pauses chef across all nodes using cafe&amp;#34;&lt;/span> {
&lt;span style="color:#000;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#008080">$server&lt;/span> &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#008080">$servers&lt;/span>) {
exec { &lt;span style="color:#0086b3">Invoke-Expression&lt;/span> &lt;span style="color:#d14">&amp;#34;C:\cafe\cafe.exe chef pause on: $server&amp;#34;&lt;/span> }
}
}
Task UpdatePolicies -description &lt;span style="color:#d14">&amp;#34;Updates the Policies on the Chef Server&amp;#34;&lt;/span> {
&lt;span style="color:#000;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#008080">$policyfile&lt;/span> &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#0086b3">Get-ChildItem&lt;/span> -Filter *.tgz) {
&lt;span style="color:#0086b3">Write-Host&lt;/span> &lt;span style="color:#d14">&amp;#34;Uploading $policyfile to $policy_group&amp;#34;&lt;/span>
exec { &lt;span style="color:#0086b3">Invoke-Expression&lt;/span> &lt;span style="color:#d14">&amp;#34;chef push-archive $policy_group $policyfile&amp;#34;&lt;/span> }
}
}
Task ConvergeNodes -description &lt;span style="color:#d14">&amp;#34;Runs Chef on all nodes&amp;#34;&lt;/span> {
&lt;span style="color:#000;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#008080">$server&lt;/span> &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#008080">$servers&lt;/span>) {
exec { &lt;span style="color:#0086b3">Invoke-Expression&lt;/span> &lt;span style="color:#d14">&amp;#34;C:\cafe\cafe.exe chef run on: $server&amp;#34;&lt;/span> }
}
}
Task ResumeChef -description &lt;span style="color:#d14">&amp;#34;Resumes Chef across all nodes using cafe&amp;#34;&lt;/span> {
&lt;span style="color:#000;font-weight:bold">foreach&lt;/span> (&lt;span style="color:#008080">$server&lt;/span> &lt;span style="color:#000;font-weight:bold">in&lt;/span> &lt;span style="color:#008080">$servers&lt;/span>) {
exec { &lt;span style="color:#0086b3">Invoke-Expression&lt;/span> &lt;span style="color:#d14">&amp;#34;C:\cafe\cafe.exe chef resume on: $server&amp;#34;&lt;/span> }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I really love how readable and self-documenting this is. So much so, that I don&amp;rsquo;t feel like I have to explain it. What I will say is that we follow this workflow:&lt;/p>
&lt;ol>
&lt;li>Pause Chef (get into maintenance mode)&lt;/li>
&lt;li>Push policies to Chef Server&lt;/li>
&lt;li>Converge All Nodes&lt;/li>
&lt;li>Resume Chef&lt;/li>
&lt;/ol>
&lt;p>The control and safety here should make every Chef user giddy with excitement. This change event is so scary, that you need safety around it. Coupled with Policyfiles, cafe brings you that safety, and if you agree I would love your help making cafe everything it should be within the Chef ecosystem.&lt;/p>
&lt;h1 id="pipeline-for-deployment">Pipeline for Deployment&lt;/h1>
&lt;p>If you&amp;rsquo;ll remember from the &lt;a href="https://hedge-ops.com/policyfile-pipeline-with-jenkinsfile/">policyfile pipeline&lt;/a> post, everything described above is packaged &lt;strong>with&lt;/strong> the policyfile archives. So this is the script that runs within the context of those other files. We have &lt;strong>one package&lt;/strong>, versioned by Jenkins, that we can upload to do an atomic update of everything related to Chef, then reconverge the nodes.&lt;/p>
&lt;p>So now that we have this file available on our artifacts server, it&amp;rsquo;s time to run a deployment. With an air-gapped environment, the source of these files might be different, or you might get those files to their destination in a variety of ways. However, the basics remain the same from a pipeline perspective: you need to download the file, unzip it, and run the script. Here is an example &lt;code>Jenkinsfile&lt;/code> that does just this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-groovy" data-lang="groovy">archiveName &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#d14">&amp;#34;myproduct_policies_${policiesVersion}.zip&amp;#34;&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;Download&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;windows&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
bat &lt;span style="color:#d14">&amp;#39;del /F /Q *.*&amp;#39;&lt;/span>
bat &lt;span style="color:#d14">&amp;#34;jfrog.exe rt download myproduct-repo/myproduct-policies/${archiveName} ${archiveName} --flat=true&amp;#34;&lt;/span>
bat &lt;span style="color:#d14">&amp;#34;\&amp;#34;C:\\Program Files\\7-Zip\\7z.exe\&amp;#34; x ${archiveName}&amp;#34;&lt;/span>
stash &lt;span style="color:#d14">&amp;#39;everything&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">powershell&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>command&lt;span style="color:#000;font-weight:bold">){&lt;/span>
ansiColor&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#39;xterm&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
print &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;${(char)27}[33m ${new Date()} Executing :: ${command}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
bat &lt;span style="color:#d14">&amp;#34;powershell.exe -Command \&amp;#34;${command}\&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#458;font-weight:bold">def&lt;/span> &lt;span style="color:#900;font-weight:bold">invoke_psake&lt;/span>&lt;span style="color:#000;font-weight:bold">(){&lt;/span>
powershell&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;.\\psake.ps1 .\\deploy.ps1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
stage&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;Deploy&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
node&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#d14">&amp;#34;windows&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
unstash &lt;span style="color:#d14">&amp;#39;everything&amp;#39;&lt;/span>
invoke_psake&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s as simple as that. In Jenkins we make &lt;code>policiesVersion&lt;/code> a parameter and all of the sudden we have a parameterized build of versioned grouped policies that happen in an ATOMIC update, with immediate node convergence.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>I love taking the complexity of all those Chef scripts, on all those nodes, and narrowing them down to a single file that gets deployed to a target environment. This is exactly what the developers have been doing for some time; it&amp;rsquo;s nice to see my Chef workflow catch up with that goodness. In a change management situation, it&amp;rsquo;s &lt;em>very clear&lt;/em> what&amp;rsquo;s happening here.&lt;/p>
&lt;p>One improvement I want to make soon: I&amp;rsquo;d like to have a file checksum added as a parameter to the Jenkins job. That way if someone accidentally fat fingered the wrong version, you wouldn&amp;rsquo;t accidentally get the wrong version deployed. Everything needs a safety net.&lt;/p></description></item><item><title>Introducing Cafe</title><link>https://hedge-ops.com/introducing-cafe/</link><pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate><guid>https://hedge-ops.com/introducing-cafe/</guid><description>&lt;div class="full-width">
&lt;img src="https://hedge-ops.com/images/feature-introducing-cafe.jpg" alt="Introducing Cafe" />
&lt;/div>
&lt;p>I was fortuntate enough to be at Chef Summit in Seattle last November and learned two very valuable things there: First, I learned that the core power of Chef is in its community and ecosystem. Within this ecosystem we can depart from the user customer/vendor relationship where you&amp;rsquo;re at the mercy of a product team and may or may not have enough sway to get your stuff done. Instead you can work with the community to contribute your own stuff. This inspired me to be a contributor instead of just a taker.&lt;/p>
&lt;p>The second thing I learned was that the Microsoft ecosystem was alive and well, but had a really hard time getting Chef to run in a consistent way on Windows. So I decided to do something about that over my holidays and a few long nights, and have come up with a new project I&amp;rsquo;m introducing today: &lt;a href="https://github.com/mhedgpeth/cafe">cafe&lt;/a>.&lt;/p>
&lt;p>Cafe exists to make running Chef in a windows environment easier. It takes my over two years of experience with Chef on Windows and simplifies and streamlines how I think it should go. And fortunately, I&amp;rsquo;m able to rely on my software development background to create a product that will feel like a easy to use, real product to people.&lt;/p>
&lt;p>So if you&amp;rsquo;re still reading, and I hope you are, let&amp;rsquo;s go through a demo real quick, or if you&amp;rsquo;re more visual &lt;a href="https://www.youtube.com/watch?v=QxHi01vBkiw">watch my demo on YouTube&lt;/a>.&lt;/p>
&lt;h1 id="installation">Installation&lt;/h1>
&lt;p>Cafe is a standalone program that is fully operational by unzipping files into a folder and running &lt;code>cafe.exe&lt;/code>. No ruby or .NET dependencies. It just works.&lt;/p>
&lt;p>To install:&lt;/p>
&lt;ol>
&lt;li>Unzip the installation package into a folder&lt;/li>
&lt;li>Run &lt;code>cafe init&lt;/code> if you want it added to the path (you&amp;rsquo;ll need to reboot)&lt;/li>
&lt;li>Run &lt;code>cafe service register&lt;/code> to have the cafe server run in the background so it can do things for you&lt;/li>
&lt;/ol>
&lt;h1 id="runtime">Runtime&lt;/h1>
&lt;p>Cafe is lightweight. To run the service it takes around 20MB of memory and no CPU. This means that you can put cafe on all your nodes, then install and run chef as you want to.&lt;/p>
&lt;h1 id="walkthrough">Walkthrough&lt;/h1>
&lt;p>After installation, let&amp;rsquo;s work on getting chef bootstrapped on the machine.&lt;/p>
&lt;p>The first step is to download and install &lt;a href="http://inspec.io/">inspec&lt;/a>:&lt;/p>
&lt;pre>&lt;code>cafe inspec download 1.7.1
&lt;/code>&lt;/pre>&lt;p>Once the inspec installer is downloaded, let&amp;rsquo;s install it:&lt;/p>
&lt;pre>&lt;code>cafe inspec install 1.7.1
&lt;/code>&lt;/pre>&lt;p>Next we will do the same with the &lt;a href="https://docs.chef.io/ctl_chef_client.html">Chef Client&lt;/a>:&lt;/p>
&lt;pre>&lt;code>cafe chef download 12.16.42
&lt;/code>&lt;/pre>&lt;p>And then install it:&lt;/p>
&lt;pre>&lt;code>cafe chef install 12.16.42
&lt;/code>&lt;/pre>&lt;p>Now that we&amp;rsquo;ve installed Chef, let&amp;rsquo;s bootstrap it. You can do this two ways:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://hedge-ops.com/policyfiles/">The Policyfile&lt;/a> way:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>cafe chef bootstrap policy: webserver group: qa config: C:\Users\mhedg\client.rb validator: C:\Users\mhedg\my-validator.pem
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>The Run List Way:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>cafe chef bootstrap run-list: &amp;quot;[chocolatey::default]&amp;quot; config: C:\Users\mhedg\client.rb validator: C:\Users\mhedg\my-validator.pem
&lt;/code>&lt;/pre>&lt;p>Both ways ask for a config file that will be your &lt;code>client.rb&lt;/code> on the machine and a validator used to ask the chef server for validation.&lt;/p>
&lt;p>Now that we&amp;rsquo;ve bootstrapped Chef, we can run it again on demand if we want to:&lt;/p>
&lt;pre>&lt;code>cafe chef run
&lt;/code>&lt;/pre>&lt;p>We can even look at the &lt;code>logs&lt;/code> directory and see that we have a rolling log that only has our chef-client runs in it. We can also see specific logging for our client and server.&lt;/p>
&lt;p>We probably want to schedule Chef to run every 30 minutes or so. To do this we edit our &lt;code>server.json&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#000080">&amp;#34;ChefInterval&amp;#34;&lt;/span>: &lt;span style="color:#099">1800&lt;/span>,
&lt;span style="color:#000080">&amp;#34;Port&amp;#34;&lt;/span>: &lt;span style="color:#099">59320&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And restart the cafe service:&lt;/p>
&lt;pre>&lt;code>cafe service restart
&lt;/code>&lt;/pre>&lt;p>At some point you may even want to pause chef on the node so you can manually check a node&amp;rsquo;s state without fear of Chef changing anything. To do this, run:&lt;/p>
&lt;pre>&lt;code>cafe chef pause
&lt;/code>&lt;/pre>&lt;p>And then when you&amp;rsquo;re ready to rejoin the land of sanity, you can simply run:&lt;/p>
&lt;pre>&lt;code>cafe chef resume
&lt;/code>&lt;/pre>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>If you&amp;rsquo;ve spent any time getting chef to run on a Windows infrastructure, you should be pretty excited right now. If that&amp;rsquo;s you, please try it out and let me know how it&amp;rsquo;s going for you. I&amp;rsquo;d like to get a community around cafe to become the standard for how we manage Chef in a windows environment.&lt;/p></description></item></channel></rss>